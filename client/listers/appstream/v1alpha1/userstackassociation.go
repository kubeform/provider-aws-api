/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/appstream/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UserStackAssociationLister helps list UserStackAssociations.
// All objects returned here must be treated as read-only.
type UserStackAssociationLister interface {
	// List lists all UserStackAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserStackAssociation, err error)
	// UserStackAssociations returns an object that can list and get UserStackAssociations.
	UserStackAssociations(namespace string) UserStackAssociationNamespaceLister
	UserStackAssociationListerExpansion
}

// userStackAssociationLister implements the UserStackAssociationLister interface.
type userStackAssociationLister struct {
	indexer cache.Indexer
}

// NewUserStackAssociationLister returns a new UserStackAssociationLister.
func NewUserStackAssociationLister(indexer cache.Indexer) UserStackAssociationLister {
	return &userStackAssociationLister{indexer: indexer}
}

// List lists all UserStackAssociations in the indexer.
func (s *userStackAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.UserStackAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserStackAssociation))
	})
	return ret, err
}

// UserStackAssociations returns an object that can list and get UserStackAssociations.
func (s *userStackAssociationLister) UserStackAssociations(namespace string) UserStackAssociationNamespaceLister {
	return userStackAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserStackAssociationNamespaceLister helps list and get UserStackAssociations.
// All objects returned here must be treated as read-only.
type UserStackAssociationNamespaceLister interface {
	// List lists all UserStackAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserStackAssociation, err error)
	// Get retrieves the UserStackAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UserStackAssociation, error)
	UserStackAssociationNamespaceListerExpansion
}

// userStackAssociationNamespaceLister implements the UserStackAssociationNamespaceLister
// interface.
type userStackAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserStackAssociations in the indexer for a given namespace.
func (s userStackAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserStackAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserStackAssociation))
	})
	return ret, err
}

// Get retrieves the UserStackAssociation from the indexer for a given namespace and name.
func (s userStackAssociationNamespaceLister) Get(name string) (*v1alpha1.UserStackAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("userstackassociation"), name)
	}
	return obj.(*v1alpha1.UserStackAssociation), nil
}
