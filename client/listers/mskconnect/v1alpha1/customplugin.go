/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/mskconnect/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CustomPluginLister helps list CustomPlugins.
// All objects returned here must be treated as read-only.
type CustomPluginLister interface {
	// List lists all CustomPlugins in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CustomPlugin, err error)
	// CustomPlugins returns an object that can list and get CustomPlugins.
	CustomPlugins(namespace string) CustomPluginNamespaceLister
	CustomPluginListerExpansion
}

// customPluginLister implements the CustomPluginLister interface.
type customPluginLister struct {
	indexer cache.Indexer
}

// NewCustomPluginLister returns a new CustomPluginLister.
func NewCustomPluginLister(indexer cache.Indexer) CustomPluginLister {
	return &customPluginLister{indexer: indexer}
}

// List lists all CustomPlugins in the indexer.
func (s *customPluginLister) List(selector labels.Selector) (ret []*v1alpha1.CustomPlugin, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CustomPlugin))
	})
	return ret, err
}

// CustomPlugins returns an object that can list and get CustomPlugins.
func (s *customPluginLister) CustomPlugins(namespace string) CustomPluginNamespaceLister {
	return customPluginNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CustomPluginNamespaceLister helps list and get CustomPlugins.
// All objects returned here must be treated as read-only.
type CustomPluginNamespaceLister interface {
	// List lists all CustomPlugins in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CustomPlugin, err error)
	// Get retrieves the CustomPlugin from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CustomPlugin, error)
	CustomPluginNamespaceListerExpansion
}

// customPluginNamespaceLister implements the CustomPluginNamespaceLister
// interface.
type customPluginNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CustomPlugins in the indexer for a given namespace.
func (s customPluginNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CustomPlugin, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CustomPlugin))
	})
	return ret, err
}

// Get retrieves the CustomPlugin from the indexer for a given namespace and name.
func (s customPluginNamespaceLister) Get(name string) (*v1alpha1.CustomPlugin, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("customplugin"), name)
	}
	return obj.(*v1alpha1.CustomPlugin), nil
}
