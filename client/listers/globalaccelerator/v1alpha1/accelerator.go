/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/globalaccelerator/v1alpha1"
)

// AcceleratorLister helps list Accelerators.
// All objects returned here must be treated as read-only.
type AcceleratorLister interface {
	// List lists all Accelerators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Accelerator, err error)
	// Accelerators returns an object that can list and get Accelerators.
	Accelerators(namespace string) AcceleratorNamespaceLister
	AcceleratorListerExpansion
}

// acceleratorLister implements the AcceleratorLister interface.
type acceleratorLister struct {
	indexer cache.Indexer
}

// NewAcceleratorLister returns a new AcceleratorLister.
func NewAcceleratorLister(indexer cache.Indexer) AcceleratorLister {
	return &acceleratorLister{indexer: indexer}
}

// List lists all Accelerators in the indexer.
func (s *acceleratorLister) List(selector labels.Selector) (ret []*v1alpha1.Accelerator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Accelerator))
	})
	return ret, err
}

// Accelerators returns an object that can list and get Accelerators.
func (s *acceleratorLister) Accelerators(namespace string) AcceleratorNamespaceLister {
	return acceleratorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AcceleratorNamespaceLister helps list and get Accelerators.
// All objects returned here must be treated as read-only.
type AcceleratorNamespaceLister interface {
	// List lists all Accelerators in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Accelerator, err error)
	// Get retrieves the Accelerator from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Accelerator, error)
	AcceleratorNamespaceListerExpansion
}

// acceleratorNamespaceLister implements the AcceleratorNamespaceLister
// interface.
type acceleratorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Accelerators in the indexer for a given namespace.
func (s acceleratorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Accelerator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Accelerator))
	})
	return ret, err
}

// Get retrieves the Accelerator from the indexer for a given namespace and name.
func (s acceleratorNamespaceLister) Get(name string) (*v1alpha1.Accelerator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accelerator"), name)
	}
	return obj.(*v1alpha1.Accelerator), nil
}
