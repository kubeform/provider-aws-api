/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/route53domains/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegisteredDomainLister helps list RegisteredDomains.
// All objects returned here must be treated as read-only.
type RegisteredDomainLister interface {
	// List lists all RegisteredDomains in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegisteredDomain, err error)
	// RegisteredDomains returns an object that can list and get RegisteredDomains.
	RegisteredDomains(namespace string) RegisteredDomainNamespaceLister
	RegisteredDomainListerExpansion
}

// registeredDomainLister implements the RegisteredDomainLister interface.
type registeredDomainLister struct {
	indexer cache.Indexer
}

// NewRegisteredDomainLister returns a new RegisteredDomainLister.
func NewRegisteredDomainLister(indexer cache.Indexer) RegisteredDomainLister {
	return &registeredDomainLister{indexer: indexer}
}

// List lists all RegisteredDomains in the indexer.
func (s *registeredDomainLister) List(selector labels.Selector) (ret []*v1alpha1.RegisteredDomain, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegisteredDomain))
	})
	return ret, err
}

// RegisteredDomains returns an object that can list and get RegisteredDomains.
func (s *registeredDomainLister) RegisteredDomains(namespace string) RegisteredDomainNamespaceLister {
	return registeredDomainNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegisteredDomainNamespaceLister helps list and get RegisteredDomains.
// All objects returned here must be treated as read-only.
type RegisteredDomainNamespaceLister interface {
	// List lists all RegisteredDomains in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegisteredDomain, err error)
	// Get retrieves the RegisteredDomain from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegisteredDomain, error)
	RegisteredDomainNamespaceListerExpansion
}

// registeredDomainNamespaceLister implements the RegisteredDomainNamespaceLister
// interface.
type registeredDomainNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegisteredDomains in the indexer for a given namespace.
func (s registeredDomainNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegisteredDomain, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegisteredDomain))
	})
	return ret, err
}

// Get retrieves the RegisteredDomain from the indexer for a given namespace and name.
func (s registeredDomainNamespaceLister) Get(name string) (*v1alpha1.RegisteredDomain, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("registereddomain"), name)
	}
	return obj.(*v1alpha1.RegisteredDomain), nil
}
