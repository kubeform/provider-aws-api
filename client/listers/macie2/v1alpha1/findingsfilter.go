/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/macie2/v1alpha1"
)

// FindingsFilterLister helps list FindingsFilters.
// All objects returned here must be treated as read-only.
type FindingsFilterLister interface {
	// List lists all FindingsFilters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FindingsFilter, err error)
	// FindingsFilters returns an object that can list and get FindingsFilters.
	FindingsFilters(namespace string) FindingsFilterNamespaceLister
	FindingsFilterListerExpansion
}

// findingsFilterLister implements the FindingsFilterLister interface.
type findingsFilterLister struct {
	indexer cache.Indexer
}

// NewFindingsFilterLister returns a new FindingsFilterLister.
func NewFindingsFilterLister(indexer cache.Indexer) FindingsFilterLister {
	return &findingsFilterLister{indexer: indexer}
}

// List lists all FindingsFilters in the indexer.
func (s *findingsFilterLister) List(selector labels.Selector) (ret []*v1alpha1.FindingsFilter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FindingsFilter))
	})
	return ret, err
}

// FindingsFilters returns an object that can list and get FindingsFilters.
func (s *findingsFilterLister) FindingsFilters(namespace string) FindingsFilterNamespaceLister {
	return findingsFilterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FindingsFilterNamespaceLister helps list and get FindingsFilters.
// All objects returned here must be treated as read-only.
type FindingsFilterNamespaceLister interface {
	// List lists all FindingsFilters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FindingsFilter, err error)
	// Get retrieves the FindingsFilter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FindingsFilter, error)
	FindingsFilterNamespaceListerExpansion
}

// findingsFilterNamespaceLister implements the FindingsFilterNamespaceLister
// interface.
type findingsFilterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FindingsFilters in the indexer for a given namespace.
func (s findingsFilterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FindingsFilter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FindingsFilter))
	})
	return ret, err
}

// Get retrieves the FindingsFilter from the indexer for a given namespace and name.
func (s findingsFilterNamespaceLister) Get(name string) (*v1alpha1.FindingsFilter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("findingsfilter"), name)
	}
	return obj.(*v1alpha1.FindingsFilter), nil
}
