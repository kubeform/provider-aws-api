/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/macie2/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CustomDataIdentifierLister helps list CustomDataIdentifiers.
// All objects returned here must be treated as read-only.
type CustomDataIdentifierLister interface {
	// List lists all CustomDataIdentifiers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CustomDataIdentifier, err error)
	// CustomDataIdentifiers returns an object that can list and get CustomDataIdentifiers.
	CustomDataIdentifiers(namespace string) CustomDataIdentifierNamespaceLister
	CustomDataIdentifierListerExpansion
}

// customDataIdentifierLister implements the CustomDataIdentifierLister interface.
type customDataIdentifierLister struct {
	indexer cache.Indexer
}

// NewCustomDataIdentifierLister returns a new CustomDataIdentifierLister.
func NewCustomDataIdentifierLister(indexer cache.Indexer) CustomDataIdentifierLister {
	return &customDataIdentifierLister{indexer: indexer}
}

// List lists all CustomDataIdentifiers in the indexer.
func (s *customDataIdentifierLister) List(selector labels.Selector) (ret []*v1alpha1.CustomDataIdentifier, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CustomDataIdentifier))
	})
	return ret, err
}

// CustomDataIdentifiers returns an object that can list and get CustomDataIdentifiers.
func (s *customDataIdentifierLister) CustomDataIdentifiers(namespace string) CustomDataIdentifierNamespaceLister {
	return customDataIdentifierNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CustomDataIdentifierNamespaceLister helps list and get CustomDataIdentifiers.
// All objects returned here must be treated as read-only.
type CustomDataIdentifierNamespaceLister interface {
	// List lists all CustomDataIdentifiers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CustomDataIdentifier, err error)
	// Get retrieves the CustomDataIdentifier from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CustomDataIdentifier, error)
	CustomDataIdentifierNamespaceListerExpansion
}

// customDataIdentifierNamespaceLister implements the CustomDataIdentifierNamespaceLister
// interface.
type customDataIdentifierNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CustomDataIdentifiers in the indexer for a given namespace.
func (s customDataIdentifierNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CustomDataIdentifier, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CustomDataIdentifier))
	})
	return ret, err
}

// Get retrieves the CustomDataIdentifier from the indexer for a given namespace and name.
func (s customDataIdentifierNamespaceLister) Get(name string) (*v1alpha1.CustomDataIdentifier, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("customdataidentifier"), name)
	}
	return obj.(*v1alpha1.CustomDataIdentifier), nil
}
