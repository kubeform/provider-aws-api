/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/dynamodb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KinesisStreamingDestinationLister helps list KinesisStreamingDestinations.
// All objects returned here must be treated as read-only.
type KinesisStreamingDestinationLister interface {
	// List lists all KinesisStreamingDestinations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KinesisStreamingDestination, err error)
	// KinesisStreamingDestinations returns an object that can list and get KinesisStreamingDestinations.
	KinesisStreamingDestinations(namespace string) KinesisStreamingDestinationNamespaceLister
	KinesisStreamingDestinationListerExpansion
}

// kinesisStreamingDestinationLister implements the KinesisStreamingDestinationLister interface.
type kinesisStreamingDestinationLister struct {
	indexer cache.Indexer
}

// NewKinesisStreamingDestinationLister returns a new KinesisStreamingDestinationLister.
func NewKinesisStreamingDestinationLister(indexer cache.Indexer) KinesisStreamingDestinationLister {
	return &kinesisStreamingDestinationLister{indexer: indexer}
}

// List lists all KinesisStreamingDestinations in the indexer.
func (s *kinesisStreamingDestinationLister) List(selector labels.Selector) (ret []*v1alpha1.KinesisStreamingDestination, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KinesisStreamingDestination))
	})
	return ret, err
}

// KinesisStreamingDestinations returns an object that can list and get KinesisStreamingDestinations.
func (s *kinesisStreamingDestinationLister) KinesisStreamingDestinations(namespace string) KinesisStreamingDestinationNamespaceLister {
	return kinesisStreamingDestinationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KinesisStreamingDestinationNamespaceLister helps list and get KinesisStreamingDestinations.
// All objects returned here must be treated as read-only.
type KinesisStreamingDestinationNamespaceLister interface {
	// List lists all KinesisStreamingDestinations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KinesisStreamingDestination, err error)
	// Get retrieves the KinesisStreamingDestination from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KinesisStreamingDestination, error)
	KinesisStreamingDestinationNamespaceListerExpansion
}

// kinesisStreamingDestinationNamespaceLister implements the KinesisStreamingDestinationNamespaceLister
// interface.
type kinesisStreamingDestinationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KinesisStreamingDestinations in the indexer for a given namespace.
func (s kinesisStreamingDestinationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KinesisStreamingDestination, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KinesisStreamingDestination))
	})
	return ret, err
}

// Get retrieves the KinesisStreamingDestination from the indexer for a given namespace and name.
func (s kinesisStreamingDestinationNamespaceLister) Get(name string) (*v1alpha1.KinesisStreamingDestination, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kinesisstreamingdestination"), name)
	}
	return obj.(*v1alpha1.KinesisStreamingDestination), nil
}
