/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/qldb/v1alpha1"
)

// LedgerLister helps list Ledgers.
// All objects returned here must be treated as read-only.
type LedgerLister interface {
	// List lists all Ledgers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ledger, err error)
	// Ledgers returns an object that can list and get Ledgers.
	Ledgers(namespace string) LedgerNamespaceLister
	LedgerListerExpansion
}

// ledgerLister implements the LedgerLister interface.
type ledgerLister struct {
	indexer cache.Indexer
}

// NewLedgerLister returns a new LedgerLister.
func NewLedgerLister(indexer cache.Indexer) LedgerLister {
	return &ledgerLister{indexer: indexer}
}

// List lists all Ledgers in the indexer.
func (s *ledgerLister) List(selector labels.Selector) (ret []*v1alpha1.Ledger, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ledger))
	})
	return ret, err
}

// Ledgers returns an object that can list and get Ledgers.
func (s *ledgerLister) Ledgers(namespace string) LedgerNamespaceLister {
	return ledgerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LedgerNamespaceLister helps list and get Ledgers.
// All objects returned here must be treated as read-only.
type LedgerNamespaceLister interface {
	// List lists all Ledgers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ledger, err error)
	// Get retrieves the Ledger from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Ledger, error)
	LedgerNamespaceListerExpansion
}

// ledgerNamespaceLister implements the LedgerNamespaceLister
// interface.
type ledgerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ledgers in the indexer for a given namespace.
func (s ledgerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ledger, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ledger))
	})
	return ret, err
}

// Get retrieves the Ledger from the indexer for a given namespace and name.
func (s ledgerNamespaceLister) Get(name string) (*v1alpha1.Ledger, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ledger"), name)
	}
	return obj.(*v1alpha1.Ledger), nil
}
