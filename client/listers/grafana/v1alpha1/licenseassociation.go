/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/grafana/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LicenseAssociationLister helps list LicenseAssociations.
// All objects returned here must be treated as read-only.
type LicenseAssociationLister interface {
	// List lists all LicenseAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LicenseAssociation, err error)
	// LicenseAssociations returns an object that can list and get LicenseAssociations.
	LicenseAssociations(namespace string) LicenseAssociationNamespaceLister
	LicenseAssociationListerExpansion
}

// licenseAssociationLister implements the LicenseAssociationLister interface.
type licenseAssociationLister struct {
	indexer cache.Indexer
}

// NewLicenseAssociationLister returns a new LicenseAssociationLister.
func NewLicenseAssociationLister(indexer cache.Indexer) LicenseAssociationLister {
	return &licenseAssociationLister{indexer: indexer}
}

// List lists all LicenseAssociations in the indexer.
func (s *licenseAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.LicenseAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LicenseAssociation))
	})
	return ret, err
}

// LicenseAssociations returns an object that can list and get LicenseAssociations.
func (s *licenseAssociationLister) LicenseAssociations(namespace string) LicenseAssociationNamespaceLister {
	return licenseAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LicenseAssociationNamespaceLister helps list and get LicenseAssociations.
// All objects returned here must be treated as read-only.
type LicenseAssociationNamespaceLister interface {
	// List lists all LicenseAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LicenseAssociation, err error)
	// Get retrieves the LicenseAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LicenseAssociation, error)
	LicenseAssociationNamespaceListerExpansion
}

// licenseAssociationNamespaceLister implements the LicenseAssociationNamespaceLister
// interface.
type licenseAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LicenseAssociations in the indexer for a given namespace.
func (s licenseAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LicenseAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LicenseAssociation))
	})
	return ret, err
}

// Get retrieves the LicenseAssociation from the indexer for a given namespace and name.
func (s licenseAssociationNamespaceLister) Get(name string) (*v1alpha1.LicenseAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("licenseassociation"), name)
	}
	return obj.(*v1alpha1.LicenseAssociation), nil
}
