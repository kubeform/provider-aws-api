/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/media/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StoreContainerLister helps list StoreContainers.
// All objects returned here must be treated as read-only.
type StoreContainerLister interface {
	// List lists all StoreContainers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StoreContainer, err error)
	// StoreContainers returns an object that can list and get StoreContainers.
	StoreContainers(namespace string) StoreContainerNamespaceLister
	StoreContainerListerExpansion
}

// storeContainerLister implements the StoreContainerLister interface.
type storeContainerLister struct {
	indexer cache.Indexer
}

// NewStoreContainerLister returns a new StoreContainerLister.
func NewStoreContainerLister(indexer cache.Indexer) StoreContainerLister {
	return &storeContainerLister{indexer: indexer}
}

// List lists all StoreContainers in the indexer.
func (s *storeContainerLister) List(selector labels.Selector) (ret []*v1alpha1.StoreContainer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StoreContainer))
	})
	return ret, err
}

// StoreContainers returns an object that can list and get StoreContainers.
func (s *storeContainerLister) StoreContainers(namespace string) StoreContainerNamespaceLister {
	return storeContainerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StoreContainerNamespaceLister helps list and get StoreContainers.
// All objects returned here must be treated as read-only.
type StoreContainerNamespaceLister interface {
	// List lists all StoreContainers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StoreContainer, err error)
	// Get retrieves the StoreContainer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StoreContainer, error)
	StoreContainerNamespaceListerExpansion
}

// storeContainerNamespaceLister implements the StoreContainerNamespaceLister
// interface.
type storeContainerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StoreContainers in the indexer for a given namespace.
func (s storeContainerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StoreContainer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StoreContainer))
	})
	return ret, err
}

// Get retrieves the StoreContainer from the indexer for a given namespace and name.
func (s storeContainerNamespaceLister) Get(name string) (*v1alpha1.StoreContainer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storecontainer"), name)
	}
	return obj.(*v1alpha1.StoreContainer), nil
}
