/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/wafregional/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegexMatchSetLister helps list RegexMatchSets.
// All objects returned here must be treated as read-only.
type RegexMatchSetLister interface {
	// List lists all RegexMatchSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegexMatchSet, err error)
	// RegexMatchSets returns an object that can list and get RegexMatchSets.
	RegexMatchSets(namespace string) RegexMatchSetNamespaceLister
	RegexMatchSetListerExpansion
}

// regexMatchSetLister implements the RegexMatchSetLister interface.
type regexMatchSetLister struct {
	indexer cache.Indexer
}

// NewRegexMatchSetLister returns a new RegexMatchSetLister.
func NewRegexMatchSetLister(indexer cache.Indexer) RegexMatchSetLister {
	return &regexMatchSetLister{indexer: indexer}
}

// List lists all RegexMatchSets in the indexer.
func (s *regexMatchSetLister) List(selector labels.Selector) (ret []*v1alpha1.RegexMatchSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegexMatchSet))
	})
	return ret, err
}

// RegexMatchSets returns an object that can list and get RegexMatchSets.
func (s *regexMatchSetLister) RegexMatchSets(namespace string) RegexMatchSetNamespaceLister {
	return regexMatchSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegexMatchSetNamespaceLister helps list and get RegexMatchSets.
// All objects returned here must be treated as read-only.
type RegexMatchSetNamespaceLister interface {
	// List lists all RegexMatchSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegexMatchSet, err error)
	// Get retrieves the RegexMatchSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegexMatchSet, error)
	RegexMatchSetNamespaceListerExpansion
}

// regexMatchSetNamespaceLister implements the RegexMatchSetNamespaceLister
// interface.
type regexMatchSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegexMatchSets in the indexer for a given namespace.
func (s regexMatchSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegexMatchSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegexMatchSet))
	})
	return ret, err
}

// Get retrieves the RegexMatchSet from the indexer for a given namespace and name.
func (s regexMatchSetNamespaceLister) Get(name string) (*v1alpha1.RegexMatchSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("regexmatchset"), name)
	}
	return obj.(*v1alpha1.RegexMatchSet), nil
}
