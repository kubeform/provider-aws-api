/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpn/v1alpha1"
)

// ConnectionRouteLister helps list ConnectionRoutes.
// All objects returned here must be treated as read-only.
type ConnectionRouteLister interface {
	// List lists all ConnectionRoutes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectionRoute, err error)
	// ConnectionRoutes returns an object that can list and get ConnectionRoutes.
	ConnectionRoutes(namespace string) ConnectionRouteNamespaceLister
	ConnectionRouteListerExpansion
}

// connectionRouteLister implements the ConnectionRouteLister interface.
type connectionRouteLister struct {
	indexer cache.Indexer
}

// NewConnectionRouteLister returns a new ConnectionRouteLister.
func NewConnectionRouteLister(indexer cache.Indexer) ConnectionRouteLister {
	return &connectionRouteLister{indexer: indexer}
}

// List lists all ConnectionRoutes in the indexer.
func (s *connectionRouteLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectionRoute, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectionRoute))
	})
	return ret, err
}

// ConnectionRoutes returns an object that can list and get ConnectionRoutes.
func (s *connectionRouteLister) ConnectionRoutes(namespace string) ConnectionRouteNamespaceLister {
	return connectionRouteNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConnectionRouteNamespaceLister helps list and get ConnectionRoutes.
// All objects returned here must be treated as read-only.
type ConnectionRouteNamespaceLister interface {
	// List lists all ConnectionRoutes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectionRoute, err error)
	// Get retrieves the ConnectionRoute from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConnectionRoute, error)
	ConnectionRouteNamespaceListerExpansion
}

// connectionRouteNamespaceLister implements the ConnectionRouteNamespaceLister
// interface.
type connectionRouteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConnectionRoutes in the indexer for a given namespace.
func (s connectionRouteNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectionRoute, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectionRoute))
	})
	return ret, err
}

// Get retrieves the ConnectionRoute from the indexer for a given namespace and name.
func (s connectionRouteNamespaceLister) Get(name string) (*v1alpha1.ConnectionRoute, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("connectionroute"), name)
	}
	return obj.(*v1alpha1.ConnectionRoute), nil
}
