/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpn/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GatewayAttachmentLister helps list GatewayAttachments.
// All objects returned here must be treated as read-only.
type GatewayAttachmentLister interface {
	// List lists all GatewayAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayAttachment, err error)
	// GatewayAttachments returns an object that can list and get GatewayAttachments.
	GatewayAttachments(namespace string) GatewayAttachmentNamespaceLister
	GatewayAttachmentListerExpansion
}

// gatewayAttachmentLister implements the GatewayAttachmentLister interface.
type gatewayAttachmentLister struct {
	indexer cache.Indexer
}

// NewGatewayAttachmentLister returns a new GatewayAttachmentLister.
func NewGatewayAttachmentLister(indexer cache.Indexer) GatewayAttachmentLister {
	return &gatewayAttachmentLister{indexer: indexer}
}

// List lists all GatewayAttachments in the indexer.
func (s *gatewayAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayAttachment))
	})
	return ret, err
}

// GatewayAttachments returns an object that can list and get GatewayAttachments.
func (s *gatewayAttachmentLister) GatewayAttachments(namespace string) GatewayAttachmentNamespaceLister {
	return gatewayAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GatewayAttachmentNamespaceLister helps list and get GatewayAttachments.
// All objects returned here must be treated as read-only.
type GatewayAttachmentNamespaceLister interface {
	// List lists all GatewayAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayAttachment, err error)
	// Get retrieves the GatewayAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GatewayAttachment, error)
	GatewayAttachmentNamespaceListerExpansion
}

// gatewayAttachmentNamespaceLister implements the GatewayAttachmentNamespaceLister
// interface.
type gatewayAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GatewayAttachments in the indexer for a given namespace.
func (s gatewayAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayAttachment))
	})
	return ret, err
}

// Get retrieves the GatewayAttachment from the indexer for a given namespace and name.
func (s gatewayAttachmentNamespaceLister) Get(name string) (*v1alpha1.GatewayAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gatewayattachment"), name)
	}
	return obj.(*v1alpha1.GatewayAttachment), nil
}
