/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpn/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GatewayRoutePropagationLister helps list GatewayRoutePropagations.
// All objects returned here must be treated as read-only.
type GatewayRoutePropagationLister interface {
	// List lists all GatewayRoutePropagations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayRoutePropagation, err error)
	// GatewayRoutePropagations returns an object that can list and get GatewayRoutePropagations.
	GatewayRoutePropagations(namespace string) GatewayRoutePropagationNamespaceLister
	GatewayRoutePropagationListerExpansion
}

// gatewayRoutePropagationLister implements the GatewayRoutePropagationLister interface.
type gatewayRoutePropagationLister struct {
	indexer cache.Indexer
}

// NewGatewayRoutePropagationLister returns a new GatewayRoutePropagationLister.
func NewGatewayRoutePropagationLister(indexer cache.Indexer) GatewayRoutePropagationLister {
	return &gatewayRoutePropagationLister{indexer: indexer}
}

// List lists all GatewayRoutePropagations in the indexer.
func (s *gatewayRoutePropagationLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayRoutePropagation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayRoutePropagation))
	})
	return ret, err
}

// GatewayRoutePropagations returns an object that can list and get GatewayRoutePropagations.
func (s *gatewayRoutePropagationLister) GatewayRoutePropagations(namespace string) GatewayRoutePropagationNamespaceLister {
	return gatewayRoutePropagationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GatewayRoutePropagationNamespaceLister helps list and get GatewayRoutePropagations.
// All objects returned here must be treated as read-only.
type GatewayRoutePropagationNamespaceLister interface {
	// List lists all GatewayRoutePropagations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayRoutePropagation, err error)
	// Get retrieves the GatewayRoutePropagation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GatewayRoutePropagation, error)
	GatewayRoutePropagationNamespaceListerExpansion
}

// gatewayRoutePropagationNamespaceLister implements the GatewayRoutePropagationNamespaceLister
// interface.
type gatewayRoutePropagationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GatewayRoutePropagations in the indexer for a given namespace.
func (s gatewayRoutePropagationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayRoutePropagation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayRoutePropagation))
	})
	return ret, err
}

// Get retrieves the GatewayRoutePropagation from the indexer for a given namespace and name.
func (s gatewayRoutePropagationNamespaceLister) Get(name string) (*v1alpha1.GatewayRoutePropagation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gatewayroutepropagation"), name)
	}
	return obj.(*v1alpha1.GatewayRoutePropagation), nil
}
