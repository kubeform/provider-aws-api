/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ThingGroupLister helps list ThingGroups.
// All objects returned here must be treated as read-only.
type ThingGroupLister interface {
	// List lists all ThingGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ThingGroup, err error)
	// ThingGroups returns an object that can list and get ThingGroups.
	ThingGroups(namespace string) ThingGroupNamespaceLister
	ThingGroupListerExpansion
}

// thingGroupLister implements the ThingGroupLister interface.
type thingGroupLister struct {
	indexer cache.Indexer
}

// NewThingGroupLister returns a new ThingGroupLister.
func NewThingGroupLister(indexer cache.Indexer) ThingGroupLister {
	return &thingGroupLister{indexer: indexer}
}

// List lists all ThingGroups in the indexer.
func (s *thingGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ThingGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThingGroup))
	})
	return ret, err
}

// ThingGroups returns an object that can list and get ThingGroups.
func (s *thingGroupLister) ThingGroups(namespace string) ThingGroupNamespaceLister {
	return thingGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ThingGroupNamespaceLister helps list and get ThingGroups.
// All objects returned here must be treated as read-only.
type ThingGroupNamespaceLister interface {
	// List lists all ThingGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ThingGroup, err error)
	// Get retrieves the ThingGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ThingGroup, error)
	ThingGroupNamespaceListerExpansion
}

// thingGroupNamespaceLister implements the ThingGroupNamespaceLister
// interface.
type thingGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ThingGroups in the indexer for a given namespace.
func (s thingGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ThingGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThingGroup))
	})
	return ret, err
}

// Get retrieves the ThingGroup from the indexer for a given namespace and name.
func (s thingGroupNamespaceLister) Get(name string) (*v1alpha1.ThingGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("thinggroup"), name)
	}
	return obj.(*v1alpha1.ThingGroup), nil
}
