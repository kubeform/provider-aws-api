/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iot/v1alpha1"
)

// TopicRuleLister helps list TopicRules.
// All objects returned here must be treated as read-only.
type TopicRuleLister interface {
	// List lists all TopicRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TopicRule, err error)
	// TopicRules returns an object that can list and get TopicRules.
	TopicRules(namespace string) TopicRuleNamespaceLister
	TopicRuleListerExpansion
}

// topicRuleLister implements the TopicRuleLister interface.
type topicRuleLister struct {
	indexer cache.Indexer
}

// NewTopicRuleLister returns a new TopicRuleLister.
func NewTopicRuleLister(indexer cache.Indexer) TopicRuleLister {
	return &topicRuleLister{indexer: indexer}
}

// List lists all TopicRules in the indexer.
func (s *topicRuleLister) List(selector labels.Selector) (ret []*v1alpha1.TopicRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopicRule))
	})
	return ret, err
}

// TopicRules returns an object that can list and get TopicRules.
func (s *topicRuleLister) TopicRules(namespace string) TopicRuleNamespaceLister {
	return topicRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TopicRuleNamespaceLister helps list and get TopicRules.
// All objects returned here must be treated as read-only.
type TopicRuleNamespaceLister interface {
	// List lists all TopicRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TopicRule, err error)
	// Get retrieves the TopicRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TopicRule, error)
	TopicRuleNamespaceListerExpansion
}

// topicRuleNamespaceLister implements the TopicRuleNamespaceLister
// interface.
type topicRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TopicRules in the indexer for a given namespace.
func (s topicRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TopicRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopicRule))
	})
	return ret, err
}

// Get retrieves the TopicRule from the indexer for a given namespace and name.
func (s topicRuleNamespaceLister) Get(name string) (*v1alpha1.TopicRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("topicrule"), name)
	}
	return obj.(*v1alpha1.TopicRule), nil
}
