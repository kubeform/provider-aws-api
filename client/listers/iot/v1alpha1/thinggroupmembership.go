/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ThingGroupMembershipLister helps list ThingGroupMemberships.
// All objects returned here must be treated as read-only.
type ThingGroupMembershipLister interface {
	// List lists all ThingGroupMemberships in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ThingGroupMembership, err error)
	// ThingGroupMemberships returns an object that can list and get ThingGroupMemberships.
	ThingGroupMemberships(namespace string) ThingGroupMembershipNamespaceLister
	ThingGroupMembershipListerExpansion
}

// thingGroupMembershipLister implements the ThingGroupMembershipLister interface.
type thingGroupMembershipLister struct {
	indexer cache.Indexer
}

// NewThingGroupMembershipLister returns a new ThingGroupMembershipLister.
func NewThingGroupMembershipLister(indexer cache.Indexer) ThingGroupMembershipLister {
	return &thingGroupMembershipLister{indexer: indexer}
}

// List lists all ThingGroupMemberships in the indexer.
func (s *thingGroupMembershipLister) List(selector labels.Selector) (ret []*v1alpha1.ThingGroupMembership, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThingGroupMembership))
	})
	return ret, err
}

// ThingGroupMemberships returns an object that can list and get ThingGroupMemberships.
func (s *thingGroupMembershipLister) ThingGroupMemberships(namespace string) ThingGroupMembershipNamespaceLister {
	return thingGroupMembershipNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ThingGroupMembershipNamespaceLister helps list and get ThingGroupMemberships.
// All objects returned here must be treated as read-only.
type ThingGroupMembershipNamespaceLister interface {
	// List lists all ThingGroupMemberships in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ThingGroupMembership, err error)
	// Get retrieves the ThingGroupMembership from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ThingGroupMembership, error)
	ThingGroupMembershipNamespaceListerExpansion
}

// thingGroupMembershipNamespaceLister implements the ThingGroupMembershipNamespaceLister
// interface.
type thingGroupMembershipNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ThingGroupMemberships in the indexer for a given namespace.
func (s thingGroupMembershipNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ThingGroupMembership, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThingGroupMembership))
	})
	return ret, err
}

// Get retrieves the ThingGroupMembership from the indexer for a given namespace and name.
func (s thingGroupMembershipNamespaceLister) Get(name string) (*v1alpha1.ThingGroupMembership, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("thinggroupmembership"), name)
	}
	return obj.(*v1alpha1.ThingGroupMembership), nil
}
