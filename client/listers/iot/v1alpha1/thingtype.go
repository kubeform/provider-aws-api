/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ThingTypeLister helps list ThingTypes.
// All objects returned here must be treated as read-only.
type ThingTypeLister interface {
	// List lists all ThingTypes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ThingType, err error)
	// ThingTypes returns an object that can list and get ThingTypes.
	ThingTypes(namespace string) ThingTypeNamespaceLister
	ThingTypeListerExpansion
}

// thingTypeLister implements the ThingTypeLister interface.
type thingTypeLister struct {
	indexer cache.Indexer
}

// NewThingTypeLister returns a new ThingTypeLister.
func NewThingTypeLister(indexer cache.Indexer) ThingTypeLister {
	return &thingTypeLister{indexer: indexer}
}

// List lists all ThingTypes in the indexer.
func (s *thingTypeLister) List(selector labels.Selector) (ret []*v1alpha1.ThingType, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThingType))
	})
	return ret, err
}

// ThingTypes returns an object that can list and get ThingTypes.
func (s *thingTypeLister) ThingTypes(namespace string) ThingTypeNamespaceLister {
	return thingTypeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ThingTypeNamespaceLister helps list and get ThingTypes.
// All objects returned here must be treated as read-only.
type ThingTypeNamespaceLister interface {
	// List lists all ThingTypes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ThingType, err error)
	// Get retrieves the ThingType from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ThingType, error)
	ThingTypeNamespaceListerExpansion
}

// thingTypeNamespaceLister implements the ThingTypeNamespaceLister
// interface.
type thingTypeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ThingTypes in the indexer for a given namespace.
func (s thingTypeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ThingType, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThingType))
	})
	return ret, err
}

// Get retrieves the ThingType from the indexer for a given namespace and name.
func (s thingTypeNamespaceLister) Get(name string) (*v1alpha1.ThingType, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("thingtype"), name)
	}
	return obj.(*v1alpha1.ThingType), nil
}
