/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicyAttachmentLister helps list PolicyAttachments.
// All objects returned here must be treated as read-only.
type PolicyAttachmentLister interface {
	// List lists all PolicyAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyAttachment, err error)
	// PolicyAttachments returns an object that can list and get PolicyAttachments.
	PolicyAttachments(namespace string) PolicyAttachmentNamespaceLister
	PolicyAttachmentListerExpansion
}

// policyAttachmentLister implements the PolicyAttachmentLister interface.
type policyAttachmentLister struct {
	indexer cache.Indexer
}

// NewPolicyAttachmentLister returns a new PolicyAttachmentLister.
func NewPolicyAttachmentLister(indexer cache.Indexer) PolicyAttachmentLister {
	return &policyAttachmentLister{indexer: indexer}
}

// List lists all PolicyAttachments in the indexer.
func (s *policyAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyAttachment))
	})
	return ret, err
}

// PolicyAttachments returns an object that can list and get PolicyAttachments.
func (s *policyAttachmentLister) PolicyAttachments(namespace string) PolicyAttachmentNamespaceLister {
	return policyAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicyAttachmentNamespaceLister helps list and get PolicyAttachments.
// All objects returned here must be treated as read-only.
type PolicyAttachmentNamespaceLister interface {
	// List lists all PolicyAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyAttachment, err error)
	// Get retrieves the PolicyAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PolicyAttachment, error)
	PolicyAttachmentNamespaceListerExpansion
}

// policyAttachmentNamespaceLister implements the PolicyAttachmentNamespaceLister
// interface.
type policyAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicyAttachments in the indexer for a given namespace.
func (s policyAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyAttachment))
	})
	return ret, err
}

// Get retrieves the PolicyAttachment from the indexer for a given namespace and name.
func (s policyAttachmentNamespaceLister) Get(name string) (*v1alpha1.PolicyAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("policyattachment"), name)
	}
	return obj.(*v1alpha1.PolicyAttachment), nil
}
