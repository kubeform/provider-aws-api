/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ThingPrincipalAttachmentLister helps list ThingPrincipalAttachments.
// All objects returned here must be treated as read-only.
type ThingPrincipalAttachmentLister interface {
	// List lists all ThingPrincipalAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ThingPrincipalAttachment, err error)
	// ThingPrincipalAttachments returns an object that can list and get ThingPrincipalAttachments.
	ThingPrincipalAttachments(namespace string) ThingPrincipalAttachmentNamespaceLister
	ThingPrincipalAttachmentListerExpansion
}

// thingPrincipalAttachmentLister implements the ThingPrincipalAttachmentLister interface.
type thingPrincipalAttachmentLister struct {
	indexer cache.Indexer
}

// NewThingPrincipalAttachmentLister returns a new ThingPrincipalAttachmentLister.
func NewThingPrincipalAttachmentLister(indexer cache.Indexer) ThingPrincipalAttachmentLister {
	return &thingPrincipalAttachmentLister{indexer: indexer}
}

// List lists all ThingPrincipalAttachments in the indexer.
func (s *thingPrincipalAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.ThingPrincipalAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThingPrincipalAttachment))
	})
	return ret, err
}

// ThingPrincipalAttachments returns an object that can list and get ThingPrincipalAttachments.
func (s *thingPrincipalAttachmentLister) ThingPrincipalAttachments(namespace string) ThingPrincipalAttachmentNamespaceLister {
	return thingPrincipalAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ThingPrincipalAttachmentNamespaceLister helps list and get ThingPrincipalAttachments.
// All objects returned here must be treated as read-only.
type ThingPrincipalAttachmentNamespaceLister interface {
	// List lists all ThingPrincipalAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ThingPrincipalAttachment, err error)
	// Get retrieves the ThingPrincipalAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ThingPrincipalAttachment, error)
	ThingPrincipalAttachmentNamespaceListerExpansion
}

// thingPrincipalAttachmentNamespaceLister implements the ThingPrincipalAttachmentNamespaceLister
// interface.
type thingPrincipalAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ThingPrincipalAttachments in the indexer for a given namespace.
func (s thingPrincipalAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ThingPrincipalAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThingPrincipalAttachment))
	})
	return ret, err
}

// Get retrieves the ThingPrincipalAttachment from the indexer for a given namespace and name.
func (s thingPrincipalAttachmentNamespaceLister) Get(name string) (*v1alpha1.ThingPrincipalAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("thingprincipalattachment"), name)
	}
	return obj.(*v1alpha1.ThingPrincipalAttachment), nil
}
