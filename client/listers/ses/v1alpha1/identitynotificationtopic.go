/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ses/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IdentityNotificationTopicLister helps list IdentityNotificationTopics.
// All objects returned here must be treated as read-only.
type IdentityNotificationTopicLister interface {
	// List lists all IdentityNotificationTopics in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityNotificationTopic, err error)
	// IdentityNotificationTopics returns an object that can list and get IdentityNotificationTopics.
	IdentityNotificationTopics(namespace string) IdentityNotificationTopicNamespaceLister
	IdentityNotificationTopicListerExpansion
}

// identityNotificationTopicLister implements the IdentityNotificationTopicLister interface.
type identityNotificationTopicLister struct {
	indexer cache.Indexer
}

// NewIdentityNotificationTopicLister returns a new IdentityNotificationTopicLister.
func NewIdentityNotificationTopicLister(indexer cache.Indexer) IdentityNotificationTopicLister {
	return &identityNotificationTopicLister{indexer: indexer}
}

// List lists all IdentityNotificationTopics in the indexer.
func (s *identityNotificationTopicLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityNotificationTopic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityNotificationTopic))
	})
	return ret, err
}

// IdentityNotificationTopics returns an object that can list and get IdentityNotificationTopics.
func (s *identityNotificationTopicLister) IdentityNotificationTopics(namespace string) IdentityNotificationTopicNamespaceLister {
	return identityNotificationTopicNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IdentityNotificationTopicNamespaceLister helps list and get IdentityNotificationTopics.
// All objects returned here must be treated as read-only.
type IdentityNotificationTopicNamespaceLister interface {
	// List lists all IdentityNotificationTopics in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityNotificationTopic, err error)
	// Get retrieves the IdentityNotificationTopic from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IdentityNotificationTopic, error)
	IdentityNotificationTopicNamespaceListerExpansion
}

// identityNotificationTopicNamespaceLister implements the IdentityNotificationTopicNamespaceLister
// interface.
type identityNotificationTopicNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IdentityNotificationTopics in the indexer for a given namespace.
func (s identityNotificationTopicNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityNotificationTopic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityNotificationTopic))
	})
	return ret, err
}

// Get retrieves the IdentityNotificationTopic from the indexer for a given namespace and name.
func (s identityNotificationTopicNamespaceLister) Get(name string) (*v1alpha1.IdentityNotificationTopic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("identitynotificationtopic"), name)
	}
	return obj.(*v1alpha1.IdentityNotificationTopic), nil
}
