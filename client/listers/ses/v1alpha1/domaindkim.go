/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ses/v1alpha1"
)

// DomainDkimLister helps list DomainDkims.
// All objects returned here must be treated as read-only.
type DomainDkimLister interface {
	// List lists all DomainDkims in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainDkim, err error)
	// DomainDkims returns an object that can list and get DomainDkims.
	DomainDkims(namespace string) DomainDkimNamespaceLister
	DomainDkimListerExpansion
}

// domainDkimLister implements the DomainDkimLister interface.
type domainDkimLister struct {
	indexer cache.Indexer
}

// NewDomainDkimLister returns a new DomainDkimLister.
func NewDomainDkimLister(indexer cache.Indexer) DomainDkimLister {
	return &domainDkimLister{indexer: indexer}
}

// List lists all DomainDkims in the indexer.
func (s *domainDkimLister) List(selector labels.Selector) (ret []*v1alpha1.DomainDkim, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainDkim))
	})
	return ret, err
}

// DomainDkims returns an object that can list and get DomainDkims.
func (s *domainDkimLister) DomainDkims(namespace string) DomainDkimNamespaceLister {
	return domainDkimNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DomainDkimNamespaceLister helps list and get DomainDkims.
// All objects returned here must be treated as read-only.
type DomainDkimNamespaceLister interface {
	// List lists all DomainDkims in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainDkim, err error)
	// Get retrieves the DomainDkim from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DomainDkim, error)
	DomainDkimNamespaceListerExpansion
}

// domainDkimNamespaceLister implements the DomainDkimNamespaceLister
// interface.
type domainDkimNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DomainDkims in the indexer for a given namespace.
func (s domainDkimNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DomainDkim, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainDkim))
	})
	return ret, err
}

// Get retrieves the DomainDkim from the indexer for a given namespace and name.
func (s domainDkimNamespaceLister) Get(name string) (*v1alpha1.DomainDkim, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("domaindkim"), name)
	}
	return obj.(*v1alpha1.DomainDkim), nil
}
