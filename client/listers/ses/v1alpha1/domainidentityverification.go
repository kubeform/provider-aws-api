/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ses/v1alpha1"
)

// DomainIdentityVerificationLister helps list DomainIdentityVerifications.
// All objects returned here must be treated as read-only.
type DomainIdentityVerificationLister interface {
	// List lists all DomainIdentityVerifications in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainIdentityVerification, err error)
	// DomainIdentityVerifications returns an object that can list and get DomainIdentityVerifications.
	DomainIdentityVerifications(namespace string) DomainIdentityVerificationNamespaceLister
	DomainIdentityVerificationListerExpansion
}

// domainIdentityVerificationLister implements the DomainIdentityVerificationLister interface.
type domainIdentityVerificationLister struct {
	indexer cache.Indexer
}

// NewDomainIdentityVerificationLister returns a new DomainIdentityVerificationLister.
func NewDomainIdentityVerificationLister(indexer cache.Indexer) DomainIdentityVerificationLister {
	return &domainIdentityVerificationLister{indexer: indexer}
}

// List lists all DomainIdentityVerifications in the indexer.
func (s *domainIdentityVerificationLister) List(selector labels.Selector) (ret []*v1alpha1.DomainIdentityVerification, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainIdentityVerification))
	})
	return ret, err
}

// DomainIdentityVerifications returns an object that can list and get DomainIdentityVerifications.
func (s *domainIdentityVerificationLister) DomainIdentityVerifications(namespace string) DomainIdentityVerificationNamespaceLister {
	return domainIdentityVerificationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DomainIdentityVerificationNamespaceLister helps list and get DomainIdentityVerifications.
// All objects returned here must be treated as read-only.
type DomainIdentityVerificationNamespaceLister interface {
	// List lists all DomainIdentityVerifications in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainIdentityVerification, err error)
	// Get retrieves the DomainIdentityVerification from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DomainIdentityVerification, error)
	DomainIdentityVerificationNamespaceListerExpansion
}

// domainIdentityVerificationNamespaceLister implements the DomainIdentityVerificationNamespaceLister
// interface.
type domainIdentityVerificationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DomainIdentityVerifications in the indexer for a given namespace.
func (s domainIdentityVerificationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DomainIdentityVerification, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainIdentityVerification))
	})
	return ret, err
}

// Get retrieves the DomainIdentityVerification from the indexer for a given namespace and name.
func (s domainIdentityVerificationNamespaceLister) Get(name string) (*v1alpha1.DomainIdentityVerification, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("domainidentityverification"), name)
	}
	return obj.(*v1alpha1.DomainIdentityVerification), nil
}
