/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/elasticsearchdomain/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ElasticsearchDomainLister helps list ElasticsearchDomains.
// All objects returned here must be treated as read-only.
type ElasticsearchDomainLister interface {
	// List lists all ElasticsearchDomains in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticsearchDomain, err error)
	// ElasticsearchDomains returns an object that can list and get ElasticsearchDomains.
	ElasticsearchDomains(namespace string) ElasticsearchDomainNamespaceLister
	ElasticsearchDomainListerExpansion
}

// elasticsearchDomainLister implements the ElasticsearchDomainLister interface.
type elasticsearchDomainLister struct {
	indexer cache.Indexer
}

// NewElasticsearchDomainLister returns a new ElasticsearchDomainLister.
func NewElasticsearchDomainLister(indexer cache.Indexer) ElasticsearchDomainLister {
	return &elasticsearchDomainLister{indexer: indexer}
}

// List lists all ElasticsearchDomains in the indexer.
func (s *elasticsearchDomainLister) List(selector labels.Selector) (ret []*v1alpha1.ElasticsearchDomain, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticsearchDomain))
	})
	return ret, err
}

// ElasticsearchDomains returns an object that can list and get ElasticsearchDomains.
func (s *elasticsearchDomainLister) ElasticsearchDomains(namespace string) ElasticsearchDomainNamespaceLister {
	return elasticsearchDomainNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ElasticsearchDomainNamespaceLister helps list and get ElasticsearchDomains.
// All objects returned here must be treated as read-only.
type ElasticsearchDomainNamespaceLister interface {
	// List lists all ElasticsearchDomains in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticsearchDomain, err error)
	// Get retrieves the ElasticsearchDomain from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ElasticsearchDomain, error)
	ElasticsearchDomainNamespaceListerExpansion
}

// elasticsearchDomainNamespaceLister implements the ElasticsearchDomainNamespaceLister
// interface.
type elasticsearchDomainNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ElasticsearchDomains in the indexer for a given namespace.
func (s elasticsearchDomainNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ElasticsearchDomain, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticsearchDomain))
	})
	return ret, err
}

// Get retrieves the ElasticsearchDomain from the indexer for a given namespace and name.
func (s elasticsearchDomainNamespaceLister) Get(name string) (*v1alpha1.ElasticsearchDomain, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("elasticsearchdomain"), name)
	}
	return obj.(*v1alpha1.ElasticsearchDomain), nil
}
