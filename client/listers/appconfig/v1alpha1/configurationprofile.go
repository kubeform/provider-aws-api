/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/appconfig/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigurationProfileLister helps list ConfigurationProfiles.
// All objects returned here must be treated as read-only.
type ConfigurationProfileLister interface {
	// List lists all ConfigurationProfiles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationProfile, err error)
	// ConfigurationProfiles returns an object that can list and get ConfigurationProfiles.
	ConfigurationProfiles(namespace string) ConfigurationProfileNamespaceLister
	ConfigurationProfileListerExpansion
}

// configurationProfileLister implements the ConfigurationProfileLister interface.
type configurationProfileLister struct {
	indexer cache.Indexer
}

// NewConfigurationProfileLister returns a new ConfigurationProfileLister.
func NewConfigurationProfileLister(indexer cache.Indexer) ConfigurationProfileLister {
	return &configurationProfileLister{indexer: indexer}
}

// List lists all ConfigurationProfiles in the indexer.
func (s *configurationProfileLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationProfile))
	})
	return ret, err
}

// ConfigurationProfiles returns an object that can list and get ConfigurationProfiles.
func (s *configurationProfileLister) ConfigurationProfiles(namespace string) ConfigurationProfileNamespaceLister {
	return configurationProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigurationProfileNamespaceLister helps list and get ConfigurationProfiles.
// All objects returned here must be treated as read-only.
type ConfigurationProfileNamespaceLister interface {
	// List lists all ConfigurationProfiles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationProfile, err error)
	// Get retrieves the ConfigurationProfile from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfigurationProfile, error)
	ConfigurationProfileNamespaceListerExpansion
}

// configurationProfileNamespaceLister implements the ConfigurationProfileNamespaceLister
// interface.
type configurationProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigurationProfiles in the indexer for a given namespace.
func (s configurationProfileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationProfile))
	})
	return ret, err
}

// Get retrieves the ConfigurationProfile from the indexer for a given namespace and name.
func (s configurationProfileNamespaceLister) Get(name string) (*v1alpha1.ConfigurationProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configurationprofile"), name)
	}
	return obj.(*v1alpha1.ConfigurationProfile), nil
}
