/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/appconfig/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeploymentStrategyLister helps list DeploymentStrategies.
// All objects returned here must be treated as read-only.
type DeploymentStrategyLister interface {
	// List lists all DeploymentStrategies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeploymentStrategy, err error)
	// DeploymentStrategies returns an object that can list and get DeploymentStrategies.
	DeploymentStrategies(namespace string) DeploymentStrategyNamespaceLister
	DeploymentStrategyListerExpansion
}

// deploymentStrategyLister implements the DeploymentStrategyLister interface.
type deploymentStrategyLister struct {
	indexer cache.Indexer
}

// NewDeploymentStrategyLister returns a new DeploymentStrategyLister.
func NewDeploymentStrategyLister(indexer cache.Indexer) DeploymentStrategyLister {
	return &deploymentStrategyLister{indexer: indexer}
}

// List lists all DeploymentStrategies in the indexer.
func (s *deploymentStrategyLister) List(selector labels.Selector) (ret []*v1alpha1.DeploymentStrategy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeploymentStrategy))
	})
	return ret, err
}

// DeploymentStrategies returns an object that can list and get DeploymentStrategies.
func (s *deploymentStrategyLister) DeploymentStrategies(namespace string) DeploymentStrategyNamespaceLister {
	return deploymentStrategyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeploymentStrategyNamespaceLister helps list and get DeploymentStrategies.
// All objects returned here must be treated as read-only.
type DeploymentStrategyNamespaceLister interface {
	// List lists all DeploymentStrategies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeploymentStrategy, err error)
	// Get retrieves the DeploymentStrategy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DeploymentStrategy, error)
	DeploymentStrategyNamespaceListerExpansion
}

// deploymentStrategyNamespaceLister implements the DeploymentStrategyNamespaceLister
// interface.
type deploymentStrategyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeploymentStrategies in the indexer for a given namespace.
func (s deploymentStrategyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeploymentStrategy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeploymentStrategy))
	})
	return ret, err
}

// Get retrieves the DeploymentStrategy from the indexer for a given namespace and name.
func (s deploymentStrategyNamespaceLister) Get(name string) (*v1alpha1.DeploymentStrategy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("deploymentstrategy"), name)
	}
	return obj.(*v1alpha1.DeploymentStrategy), nil
}
