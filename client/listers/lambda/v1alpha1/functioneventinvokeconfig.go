/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/lambda/v1alpha1"
)

// FunctionEventInvokeConfigLister helps list FunctionEventInvokeConfigs.
// All objects returned here must be treated as read-only.
type FunctionEventInvokeConfigLister interface {
	// List lists all FunctionEventInvokeConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FunctionEventInvokeConfig, err error)
	// FunctionEventInvokeConfigs returns an object that can list and get FunctionEventInvokeConfigs.
	FunctionEventInvokeConfigs(namespace string) FunctionEventInvokeConfigNamespaceLister
	FunctionEventInvokeConfigListerExpansion
}

// functionEventInvokeConfigLister implements the FunctionEventInvokeConfigLister interface.
type functionEventInvokeConfigLister struct {
	indexer cache.Indexer
}

// NewFunctionEventInvokeConfigLister returns a new FunctionEventInvokeConfigLister.
func NewFunctionEventInvokeConfigLister(indexer cache.Indexer) FunctionEventInvokeConfigLister {
	return &functionEventInvokeConfigLister{indexer: indexer}
}

// List lists all FunctionEventInvokeConfigs in the indexer.
func (s *functionEventInvokeConfigLister) List(selector labels.Selector) (ret []*v1alpha1.FunctionEventInvokeConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FunctionEventInvokeConfig))
	})
	return ret, err
}

// FunctionEventInvokeConfigs returns an object that can list and get FunctionEventInvokeConfigs.
func (s *functionEventInvokeConfigLister) FunctionEventInvokeConfigs(namespace string) FunctionEventInvokeConfigNamespaceLister {
	return functionEventInvokeConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FunctionEventInvokeConfigNamespaceLister helps list and get FunctionEventInvokeConfigs.
// All objects returned here must be treated as read-only.
type FunctionEventInvokeConfigNamespaceLister interface {
	// List lists all FunctionEventInvokeConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FunctionEventInvokeConfig, err error)
	// Get retrieves the FunctionEventInvokeConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FunctionEventInvokeConfig, error)
	FunctionEventInvokeConfigNamespaceListerExpansion
}

// functionEventInvokeConfigNamespaceLister implements the FunctionEventInvokeConfigNamespaceLister
// interface.
type functionEventInvokeConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FunctionEventInvokeConfigs in the indexer for a given namespace.
func (s functionEventInvokeConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FunctionEventInvokeConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FunctionEventInvokeConfig))
	})
	return ret, err
}

// Get retrieves the FunctionEventInvokeConfig from the indexer for a given namespace and name.
func (s functionEventInvokeConfigNamespaceLister) Get(name string) (*v1alpha1.FunctionEventInvokeConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("functioneventinvokeconfig"), name)
	}
	return obj.(*v1alpha1.FunctionEventInvokeConfig), nil
}
