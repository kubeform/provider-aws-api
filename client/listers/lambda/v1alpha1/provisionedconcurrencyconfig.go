/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/lambda/v1alpha1"
)

// ProvisionedConcurrencyConfigLister helps list ProvisionedConcurrencyConfigs.
// All objects returned here must be treated as read-only.
type ProvisionedConcurrencyConfigLister interface {
	// List lists all ProvisionedConcurrencyConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProvisionedConcurrencyConfig, err error)
	// ProvisionedConcurrencyConfigs returns an object that can list and get ProvisionedConcurrencyConfigs.
	ProvisionedConcurrencyConfigs(namespace string) ProvisionedConcurrencyConfigNamespaceLister
	ProvisionedConcurrencyConfigListerExpansion
}

// provisionedConcurrencyConfigLister implements the ProvisionedConcurrencyConfigLister interface.
type provisionedConcurrencyConfigLister struct {
	indexer cache.Indexer
}

// NewProvisionedConcurrencyConfigLister returns a new ProvisionedConcurrencyConfigLister.
func NewProvisionedConcurrencyConfigLister(indexer cache.Indexer) ProvisionedConcurrencyConfigLister {
	return &provisionedConcurrencyConfigLister{indexer: indexer}
}

// List lists all ProvisionedConcurrencyConfigs in the indexer.
func (s *provisionedConcurrencyConfigLister) List(selector labels.Selector) (ret []*v1alpha1.ProvisionedConcurrencyConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProvisionedConcurrencyConfig))
	})
	return ret, err
}

// ProvisionedConcurrencyConfigs returns an object that can list and get ProvisionedConcurrencyConfigs.
func (s *provisionedConcurrencyConfigLister) ProvisionedConcurrencyConfigs(namespace string) ProvisionedConcurrencyConfigNamespaceLister {
	return provisionedConcurrencyConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProvisionedConcurrencyConfigNamespaceLister helps list and get ProvisionedConcurrencyConfigs.
// All objects returned here must be treated as read-only.
type ProvisionedConcurrencyConfigNamespaceLister interface {
	// List lists all ProvisionedConcurrencyConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProvisionedConcurrencyConfig, err error)
	// Get retrieves the ProvisionedConcurrencyConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProvisionedConcurrencyConfig, error)
	ProvisionedConcurrencyConfigNamespaceListerExpansion
}

// provisionedConcurrencyConfigNamespaceLister implements the ProvisionedConcurrencyConfigNamespaceLister
// interface.
type provisionedConcurrencyConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProvisionedConcurrencyConfigs in the indexer for a given namespace.
func (s provisionedConcurrencyConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProvisionedConcurrencyConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProvisionedConcurrencyConfig))
	})
	return ret, err
}

// Get retrieves the ProvisionedConcurrencyConfig from the indexer for a given namespace and name.
func (s provisionedConcurrencyConfigNamespaceLister) Get(name string) (*v1alpha1.ProvisionedConcurrencyConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("provisionedconcurrencyconfig"), name)
	}
	return obj.(*v1alpha1.ProvisionedConcurrencyConfig), nil
}
