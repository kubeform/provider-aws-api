/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/lambda/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CodeSigningConfigLister helps list CodeSigningConfigs.
// All objects returned here must be treated as read-only.
type CodeSigningConfigLister interface {
	// List lists all CodeSigningConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CodeSigningConfig, err error)
	// CodeSigningConfigs returns an object that can list and get CodeSigningConfigs.
	CodeSigningConfigs(namespace string) CodeSigningConfigNamespaceLister
	CodeSigningConfigListerExpansion
}

// codeSigningConfigLister implements the CodeSigningConfigLister interface.
type codeSigningConfigLister struct {
	indexer cache.Indexer
}

// NewCodeSigningConfigLister returns a new CodeSigningConfigLister.
func NewCodeSigningConfigLister(indexer cache.Indexer) CodeSigningConfigLister {
	return &codeSigningConfigLister{indexer: indexer}
}

// List lists all CodeSigningConfigs in the indexer.
func (s *codeSigningConfigLister) List(selector labels.Selector) (ret []*v1alpha1.CodeSigningConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CodeSigningConfig))
	})
	return ret, err
}

// CodeSigningConfigs returns an object that can list and get CodeSigningConfigs.
func (s *codeSigningConfigLister) CodeSigningConfigs(namespace string) CodeSigningConfigNamespaceLister {
	return codeSigningConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CodeSigningConfigNamespaceLister helps list and get CodeSigningConfigs.
// All objects returned here must be treated as read-only.
type CodeSigningConfigNamespaceLister interface {
	// List lists all CodeSigningConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CodeSigningConfig, err error)
	// Get retrieves the CodeSigningConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CodeSigningConfig, error)
	CodeSigningConfigNamespaceListerExpansion
}

// codeSigningConfigNamespaceLister implements the CodeSigningConfigNamespaceLister
// interface.
type codeSigningConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CodeSigningConfigs in the indexer for a given namespace.
func (s codeSigningConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CodeSigningConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CodeSigningConfig))
	})
	return ret, err
}

// Get retrieves the CodeSigningConfig from the indexer for a given namespace and name.
func (s codeSigningConfigNamespaceLister) Get(name string) (*v1alpha1.CodeSigningConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("codesigningconfig"), name)
	}
	return obj.(*v1alpha1.CodeSigningConfig), nil
}
