/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/codedeploy/v1alpha1"
)

// DeploymentGroupLister helps list DeploymentGroups.
// All objects returned here must be treated as read-only.
type DeploymentGroupLister interface {
	// List lists all DeploymentGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeploymentGroup, err error)
	// DeploymentGroups returns an object that can list and get DeploymentGroups.
	DeploymentGroups(namespace string) DeploymentGroupNamespaceLister
	DeploymentGroupListerExpansion
}

// deploymentGroupLister implements the DeploymentGroupLister interface.
type deploymentGroupLister struct {
	indexer cache.Indexer
}

// NewDeploymentGroupLister returns a new DeploymentGroupLister.
func NewDeploymentGroupLister(indexer cache.Indexer) DeploymentGroupLister {
	return &deploymentGroupLister{indexer: indexer}
}

// List lists all DeploymentGroups in the indexer.
func (s *deploymentGroupLister) List(selector labels.Selector) (ret []*v1alpha1.DeploymentGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeploymentGroup))
	})
	return ret, err
}

// DeploymentGroups returns an object that can list and get DeploymentGroups.
func (s *deploymentGroupLister) DeploymentGroups(namespace string) DeploymentGroupNamespaceLister {
	return deploymentGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeploymentGroupNamespaceLister helps list and get DeploymentGroups.
// All objects returned here must be treated as read-only.
type DeploymentGroupNamespaceLister interface {
	// List lists all DeploymentGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeploymentGroup, err error)
	// Get retrieves the DeploymentGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DeploymentGroup, error)
	DeploymentGroupNamespaceListerExpansion
}

// deploymentGroupNamespaceLister implements the DeploymentGroupNamespaceLister
// interface.
type deploymentGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeploymentGroups in the indexer for a given namespace.
func (s deploymentGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeploymentGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeploymentGroup))
	})
	return ret, err
}

// Get retrieves the DeploymentGroup from the indexer for a given namespace and name.
func (s deploymentGroupNamespaceLister) Get(name string) (*v1alpha1.DeploymentGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("deploymentgroup"), name)
	}
	return obj.(*v1alpha1.DeploymentGroup), nil
}
