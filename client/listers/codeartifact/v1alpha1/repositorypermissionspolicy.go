/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/codeartifact/v1alpha1"
)

// RepositoryPermissionsPolicyLister helps list RepositoryPermissionsPolicies.
// All objects returned here must be treated as read-only.
type RepositoryPermissionsPolicyLister interface {
	// List lists all RepositoryPermissionsPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RepositoryPermissionsPolicy, err error)
	// RepositoryPermissionsPolicies returns an object that can list and get RepositoryPermissionsPolicies.
	RepositoryPermissionsPolicies(namespace string) RepositoryPermissionsPolicyNamespaceLister
	RepositoryPermissionsPolicyListerExpansion
}

// repositoryPermissionsPolicyLister implements the RepositoryPermissionsPolicyLister interface.
type repositoryPermissionsPolicyLister struct {
	indexer cache.Indexer
}

// NewRepositoryPermissionsPolicyLister returns a new RepositoryPermissionsPolicyLister.
func NewRepositoryPermissionsPolicyLister(indexer cache.Indexer) RepositoryPermissionsPolicyLister {
	return &repositoryPermissionsPolicyLister{indexer: indexer}
}

// List lists all RepositoryPermissionsPolicies in the indexer.
func (s *repositoryPermissionsPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.RepositoryPermissionsPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RepositoryPermissionsPolicy))
	})
	return ret, err
}

// RepositoryPermissionsPolicies returns an object that can list and get RepositoryPermissionsPolicies.
func (s *repositoryPermissionsPolicyLister) RepositoryPermissionsPolicies(namespace string) RepositoryPermissionsPolicyNamespaceLister {
	return repositoryPermissionsPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RepositoryPermissionsPolicyNamespaceLister helps list and get RepositoryPermissionsPolicies.
// All objects returned here must be treated as read-only.
type RepositoryPermissionsPolicyNamespaceLister interface {
	// List lists all RepositoryPermissionsPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RepositoryPermissionsPolicy, err error)
	// Get retrieves the RepositoryPermissionsPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RepositoryPermissionsPolicy, error)
	RepositoryPermissionsPolicyNamespaceListerExpansion
}

// repositoryPermissionsPolicyNamespaceLister implements the RepositoryPermissionsPolicyNamespaceLister
// interface.
type repositoryPermissionsPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RepositoryPermissionsPolicies in the indexer for a given namespace.
func (s repositoryPermissionsPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RepositoryPermissionsPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RepositoryPermissionsPolicy))
	})
	return ret, err
}

// Get retrieves the RepositoryPermissionsPolicy from the indexer for a given namespace and name.
func (s repositoryPermissionsPolicyNamespaceLister) Get(name string) (*v1alpha1.RepositoryPermissionsPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("repositorypermissionspolicy"), name)
	}
	return obj.(*v1alpha1.RepositoryPermissionsPolicy), nil
}
