/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/codeartifact/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DomainPermissionsPolicyLister helps list DomainPermissionsPolicies.
// All objects returned here must be treated as read-only.
type DomainPermissionsPolicyLister interface {
	// List lists all DomainPermissionsPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainPermissionsPolicy, err error)
	// DomainPermissionsPolicies returns an object that can list and get DomainPermissionsPolicies.
	DomainPermissionsPolicies(namespace string) DomainPermissionsPolicyNamespaceLister
	DomainPermissionsPolicyListerExpansion
}

// domainPermissionsPolicyLister implements the DomainPermissionsPolicyLister interface.
type domainPermissionsPolicyLister struct {
	indexer cache.Indexer
}

// NewDomainPermissionsPolicyLister returns a new DomainPermissionsPolicyLister.
func NewDomainPermissionsPolicyLister(indexer cache.Indexer) DomainPermissionsPolicyLister {
	return &domainPermissionsPolicyLister{indexer: indexer}
}

// List lists all DomainPermissionsPolicies in the indexer.
func (s *domainPermissionsPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.DomainPermissionsPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainPermissionsPolicy))
	})
	return ret, err
}

// DomainPermissionsPolicies returns an object that can list and get DomainPermissionsPolicies.
func (s *domainPermissionsPolicyLister) DomainPermissionsPolicies(namespace string) DomainPermissionsPolicyNamespaceLister {
	return domainPermissionsPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DomainPermissionsPolicyNamespaceLister helps list and get DomainPermissionsPolicies.
// All objects returned here must be treated as read-only.
type DomainPermissionsPolicyNamespaceLister interface {
	// List lists all DomainPermissionsPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainPermissionsPolicy, err error)
	// Get retrieves the DomainPermissionsPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DomainPermissionsPolicy, error)
	DomainPermissionsPolicyNamespaceListerExpansion
}

// domainPermissionsPolicyNamespaceLister implements the DomainPermissionsPolicyNamespaceLister
// interface.
type domainPermissionsPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DomainPermissionsPolicies in the indexer for a given namespace.
func (s domainPermissionsPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DomainPermissionsPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainPermissionsPolicy))
	})
	return ret, err
}

// Get retrieves the DomainPermissionsPolicy from the indexer for a given namespace and name.
func (s domainPermissionsPolicyNamespaceLister) Get(name string) (*v1alpha1.DomainPermissionsPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("domainpermissionspolicy"), name)
	}
	return obj.(*v1alpha1.DomainPermissionsPolicy), nil
}
