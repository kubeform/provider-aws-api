/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/lakeformation/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataLakeSettingsLister helps list DataLakeSettingses.
// All objects returned here must be treated as read-only.
type DataLakeSettingsLister interface {
	// List lists all DataLakeSettingses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataLakeSettings, err error)
	// DataLakeSettingses returns an object that can list and get DataLakeSettingses.
	DataLakeSettingses(namespace string) DataLakeSettingsNamespaceLister
	DataLakeSettingsListerExpansion
}

// dataLakeSettingsLister implements the DataLakeSettingsLister interface.
type dataLakeSettingsLister struct {
	indexer cache.Indexer
}

// NewDataLakeSettingsLister returns a new DataLakeSettingsLister.
func NewDataLakeSettingsLister(indexer cache.Indexer) DataLakeSettingsLister {
	return &dataLakeSettingsLister{indexer: indexer}
}

// List lists all DataLakeSettingses in the indexer.
func (s *dataLakeSettingsLister) List(selector labels.Selector) (ret []*v1alpha1.DataLakeSettings, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataLakeSettings))
	})
	return ret, err
}

// DataLakeSettingses returns an object that can list and get DataLakeSettingses.
func (s *dataLakeSettingsLister) DataLakeSettingses(namespace string) DataLakeSettingsNamespaceLister {
	return dataLakeSettingsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataLakeSettingsNamespaceLister helps list and get DataLakeSettingses.
// All objects returned here must be treated as read-only.
type DataLakeSettingsNamespaceLister interface {
	// List lists all DataLakeSettingses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataLakeSettings, err error)
	// Get retrieves the DataLakeSettings from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DataLakeSettings, error)
	DataLakeSettingsNamespaceListerExpansion
}

// dataLakeSettingsNamespaceLister implements the DataLakeSettingsNamespaceLister
// interface.
type dataLakeSettingsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataLakeSettingses in the indexer for a given namespace.
func (s dataLakeSettingsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataLakeSettings, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataLakeSettings))
	})
	return ret, err
}

// Get retrieves the DataLakeSettings from the indexer for a given namespace and name.
func (s dataLakeSettingsNamespaceLister) Get(name string) (*v1alpha1.DataLakeSettings, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datalakesettings"), name)
	}
	return obj.(*v1alpha1.DataLakeSettings), nil
}
