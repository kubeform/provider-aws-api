/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/sagemaker/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ModelPackageGroupPolicyLister helps list ModelPackageGroupPolicies.
// All objects returned here must be treated as read-only.
type ModelPackageGroupPolicyLister interface {
	// List lists all ModelPackageGroupPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ModelPackageGroupPolicy, err error)
	// ModelPackageGroupPolicies returns an object that can list and get ModelPackageGroupPolicies.
	ModelPackageGroupPolicies(namespace string) ModelPackageGroupPolicyNamespaceLister
	ModelPackageGroupPolicyListerExpansion
}

// modelPackageGroupPolicyLister implements the ModelPackageGroupPolicyLister interface.
type modelPackageGroupPolicyLister struct {
	indexer cache.Indexer
}

// NewModelPackageGroupPolicyLister returns a new ModelPackageGroupPolicyLister.
func NewModelPackageGroupPolicyLister(indexer cache.Indexer) ModelPackageGroupPolicyLister {
	return &modelPackageGroupPolicyLister{indexer: indexer}
}

// List lists all ModelPackageGroupPolicies in the indexer.
func (s *modelPackageGroupPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ModelPackageGroupPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ModelPackageGroupPolicy))
	})
	return ret, err
}

// ModelPackageGroupPolicies returns an object that can list and get ModelPackageGroupPolicies.
func (s *modelPackageGroupPolicyLister) ModelPackageGroupPolicies(namespace string) ModelPackageGroupPolicyNamespaceLister {
	return modelPackageGroupPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ModelPackageGroupPolicyNamespaceLister helps list and get ModelPackageGroupPolicies.
// All objects returned here must be treated as read-only.
type ModelPackageGroupPolicyNamespaceLister interface {
	// List lists all ModelPackageGroupPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ModelPackageGroupPolicy, err error)
	// Get retrieves the ModelPackageGroupPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ModelPackageGroupPolicy, error)
	ModelPackageGroupPolicyNamespaceListerExpansion
}

// modelPackageGroupPolicyNamespaceLister implements the ModelPackageGroupPolicyNamespaceLister
// interface.
type modelPackageGroupPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ModelPackageGroupPolicies in the indexer for a given namespace.
func (s modelPackageGroupPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ModelPackageGroupPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ModelPackageGroupPolicy))
	})
	return ret, err
}

// Get retrieves the ModelPackageGroupPolicy from the indexer for a given namespace and name.
func (s modelPackageGroupPolicyNamespaceLister) Get(name string) (*v1alpha1.ModelPackageGroupPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("modelpackagegrouppolicy"), name)
	}
	return obj.(*v1alpha1.ModelPackageGroupPolicy), nil
}
