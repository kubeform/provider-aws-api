/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/sagemaker/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StudioLifecycleConfigLister helps list StudioLifecycleConfigs.
// All objects returned here must be treated as read-only.
type StudioLifecycleConfigLister interface {
	// List lists all StudioLifecycleConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StudioLifecycleConfig, err error)
	// StudioLifecycleConfigs returns an object that can list and get StudioLifecycleConfigs.
	StudioLifecycleConfigs(namespace string) StudioLifecycleConfigNamespaceLister
	StudioLifecycleConfigListerExpansion
}

// studioLifecycleConfigLister implements the StudioLifecycleConfigLister interface.
type studioLifecycleConfigLister struct {
	indexer cache.Indexer
}

// NewStudioLifecycleConfigLister returns a new StudioLifecycleConfigLister.
func NewStudioLifecycleConfigLister(indexer cache.Indexer) StudioLifecycleConfigLister {
	return &studioLifecycleConfigLister{indexer: indexer}
}

// List lists all StudioLifecycleConfigs in the indexer.
func (s *studioLifecycleConfigLister) List(selector labels.Selector) (ret []*v1alpha1.StudioLifecycleConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StudioLifecycleConfig))
	})
	return ret, err
}

// StudioLifecycleConfigs returns an object that can list and get StudioLifecycleConfigs.
func (s *studioLifecycleConfigLister) StudioLifecycleConfigs(namespace string) StudioLifecycleConfigNamespaceLister {
	return studioLifecycleConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StudioLifecycleConfigNamespaceLister helps list and get StudioLifecycleConfigs.
// All objects returned here must be treated as read-only.
type StudioLifecycleConfigNamespaceLister interface {
	// List lists all StudioLifecycleConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StudioLifecycleConfig, err error)
	// Get retrieves the StudioLifecycleConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StudioLifecycleConfig, error)
	StudioLifecycleConfigNamespaceListerExpansion
}

// studioLifecycleConfigNamespaceLister implements the StudioLifecycleConfigNamespaceLister
// interface.
type studioLifecycleConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StudioLifecycleConfigs in the indexer for a given namespace.
func (s studioLifecycleConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StudioLifecycleConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StudioLifecycleConfig))
	})
	return ret, err
}

// Get retrieves the StudioLifecycleConfig from the indexer for a given namespace and name.
func (s studioLifecycleConfigNamespaceLister) Get(name string) (*v1alpha1.StudioLifecycleConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("studiolifecycleconfig"), name)
	}
	return obj.(*v1alpha1.StudioLifecycleConfig), nil
}
