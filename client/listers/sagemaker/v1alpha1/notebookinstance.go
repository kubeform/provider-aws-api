/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/sagemaker/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NotebookInstanceLister helps list NotebookInstances.
// All objects returned here must be treated as read-only.
type NotebookInstanceLister interface {
	// List lists all NotebookInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NotebookInstance, err error)
	// NotebookInstances returns an object that can list and get NotebookInstances.
	NotebookInstances(namespace string) NotebookInstanceNamespaceLister
	NotebookInstanceListerExpansion
}

// notebookInstanceLister implements the NotebookInstanceLister interface.
type notebookInstanceLister struct {
	indexer cache.Indexer
}

// NewNotebookInstanceLister returns a new NotebookInstanceLister.
func NewNotebookInstanceLister(indexer cache.Indexer) NotebookInstanceLister {
	return &notebookInstanceLister{indexer: indexer}
}

// List lists all NotebookInstances in the indexer.
func (s *notebookInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.NotebookInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotebookInstance))
	})
	return ret, err
}

// NotebookInstances returns an object that can list and get NotebookInstances.
func (s *notebookInstanceLister) NotebookInstances(namespace string) NotebookInstanceNamespaceLister {
	return notebookInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NotebookInstanceNamespaceLister helps list and get NotebookInstances.
// All objects returned here must be treated as read-only.
type NotebookInstanceNamespaceLister interface {
	// List lists all NotebookInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NotebookInstance, err error)
	// Get retrieves the NotebookInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NotebookInstance, error)
	NotebookInstanceNamespaceListerExpansion
}

// notebookInstanceNamespaceLister implements the NotebookInstanceNamespaceLister
// interface.
type notebookInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NotebookInstances in the indexer for a given namespace.
func (s notebookInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NotebookInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotebookInstance))
	})
	return ret, err
}

// Get retrieves the NotebookInstance from the indexer for a given namespace and name.
func (s notebookInstanceNamespaceLister) Get(name string) (*v1alpha1.NotebookInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("notebookinstance"), name)
	}
	return obj.(*v1alpha1.NotebookInstance), nil
}
