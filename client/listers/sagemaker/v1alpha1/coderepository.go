/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/sagemaker/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CodeRepositoryLister helps list CodeRepositories.
// All objects returned here must be treated as read-only.
type CodeRepositoryLister interface {
	// List lists all CodeRepositories in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CodeRepository, err error)
	// CodeRepositories returns an object that can list and get CodeRepositories.
	CodeRepositories(namespace string) CodeRepositoryNamespaceLister
	CodeRepositoryListerExpansion
}

// codeRepositoryLister implements the CodeRepositoryLister interface.
type codeRepositoryLister struct {
	indexer cache.Indexer
}

// NewCodeRepositoryLister returns a new CodeRepositoryLister.
func NewCodeRepositoryLister(indexer cache.Indexer) CodeRepositoryLister {
	return &codeRepositoryLister{indexer: indexer}
}

// List lists all CodeRepositories in the indexer.
func (s *codeRepositoryLister) List(selector labels.Selector) (ret []*v1alpha1.CodeRepository, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CodeRepository))
	})
	return ret, err
}

// CodeRepositories returns an object that can list and get CodeRepositories.
func (s *codeRepositoryLister) CodeRepositories(namespace string) CodeRepositoryNamespaceLister {
	return codeRepositoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CodeRepositoryNamespaceLister helps list and get CodeRepositories.
// All objects returned here must be treated as read-only.
type CodeRepositoryNamespaceLister interface {
	// List lists all CodeRepositories in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CodeRepository, err error)
	// Get retrieves the CodeRepository from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CodeRepository, error)
	CodeRepositoryNamespaceListerExpansion
}

// codeRepositoryNamespaceLister implements the CodeRepositoryNamespaceLister
// interface.
type codeRepositoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CodeRepositories in the indexer for a given namespace.
func (s codeRepositoryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CodeRepository, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CodeRepository))
	})
	return ret, err
}

// Get retrieves the CodeRepository from the indexer for a given namespace and name.
func (s codeRepositoryNamespaceLister) Get(name string) (*v1alpha1.CodeRepository, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("coderepository"), name)
	}
	return obj.(*v1alpha1.CodeRepository), nil
}
