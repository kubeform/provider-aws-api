/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/sagemaker/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkforceLister helps list Workforces.
// All objects returned here must be treated as read-only.
type WorkforceLister interface {
	// List lists all Workforces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Workforce, err error)
	// Workforces returns an object that can list and get Workforces.
	Workforces(namespace string) WorkforceNamespaceLister
	WorkforceListerExpansion
}

// workforceLister implements the WorkforceLister interface.
type workforceLister struct {
	indexer cache.Indexer
}

// NewWorkforceLister returns a new WorkforceLister.
func NewWorkforceLister(indexer cache.Indexer) WorkforceLister {
	return &workforceLister{indexer: indexer}
}

// List lists all Workforces in the indexer.
func (s *workforceLister) List(selector labels.Selector) (ret []*v1alpha1.Workforce, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Workforce))
	})
	return ret, err
}

// Workforces returns an object that can list and get Workforces.
func (s *workforceLister) Workforces(namespace string) WorkforceNamespaceLister {
	return workforceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkforceNamespaceLister helps list and get Workforces.
// All objects returned here must be treated as read-only.
type WorkforceNamespaceLister interface {
	// List lists all Workforces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Workforce, err error)
	// Get retrieves the Workforce from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Workforce, error)
	WorkforceNamespaceListerExpansion
}

// workforceNamespaceLister implements the WorkforceNamespaceLister
// interface.
type workforceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Workforces in the indexer for a given namespace.
func (s workforceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Workforce, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Workforce))
	})
	return ret, err
}

// Get retrieves the Workforce from the indexer for a given namespace and name.
func (s workforceNamespaceLister) Get(name string) (*v1alpha1.Workforce, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("workforce"), name)
	}
	return obj.(*v1alpha1.Workforce), nil
}
