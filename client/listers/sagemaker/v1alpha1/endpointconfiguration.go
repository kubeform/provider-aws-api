/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/sagemaker/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EndpointConfigurationLister helps list EndpointConfigurations.
// All objects returned here must be treated as read-only.
type EndpointConfigurationLister interface {
	// List lists all EndpointConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointConfiguration, err error)
	// EndpointConfigurations returns an object that can list and get EndpointConfigurations.
	EndpointConfigurations(namespace string) EndpointConfigurationNamespaceLister
	EndpointConfigurationListerExpansion
}

// endpointConfigurationLister implements the EndpointConfigurationLister interface.
type endpointConfigurationLister struct {
	indexer cache.Indexer
}

// NewEndpointConfigurationLister returns a new EndpointConfigurationLister.
func NewEndpointConfigurationLister(indexer cache.Indexer) EndpointConfigurationLister {
	return &endpointConfigurationLister{indexer: indexer}
}

// List lists all EndpointConfigurations in the indexer.
func (s *endpointConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointConfiguration))
	})
	return ret, err
}

// EndpointConfigurations returns an object that can list and get EndpointConfigurations.
func (s *endpointConfigurationLister) EndpointConfigurations(namespace string) EndpointConfigurationNamespaceLister {
	return endpointConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EndpointConfigurationNamespaceLister helps list and get EndpointConfigurations.
// All objects returned here must be treated as read-only.
type EndpointConfigurationNamespaceLister interface {
	// List lists all EndpointConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointConfiguration, err error)
	// Get retrieves the EndpointConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EndpointConfiguration, error)
	EndpointConfigurationNamespaceListerExpansion
}

// endpointConfigurationNamespaceLister implements the EndpointConfigurationNamespaceLister
// interface.
type endpointConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EndpointConfigurations in the indexer for a given namespace.
func (s endpointConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointConfiguration))
	})
	return ret, err
}

// Get retrieves the EndpointConfiguration from the indexer for a given namespace and name.
func (s endpointConfigurationNamespaceLister) Get(name string) (*v1alpha1.EndpointConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("endpointconfiguration"), name)
	}
	return obj.(*v1alpha1.EndpointConfiguration), nil
}
