/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/elasticache/v1alpha1"
)

// GlobalReplicationGroupLister helps list GlobalReplicationGroups.
// All objects returned here must be treated as read-only.
type GlobalReplicationGroupLister interface {
	// List lists all GlobalReplicationGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GlobalReplicationGroup, err error)
	// GlobalReplicationGroups returns an object that can list and get GlobalReplicationGroups.
	GlobalReplicationGroups(namespace string) GlobalReplicationGroupNamespaceLister
	GlobalReplicationGroupListerExpansion
}

// globalReplicationGroupLister implements the GlobalReplicationGroupLister interface.
type globalReplicationGroupLister struct {
	indexer cache.Indexer
}

// NewGlobalReplicationGroupLister returns a new GlobalReplicationGroupLister.
func NewGlobalReplicationGroupLister(indexer cache.Indexer) GlobalReplicationGroupLister {
	return &globalReplicationGroupLister{indexer: indexer}
}

// List lists all GlobalReplicationGroups in the indexer.
func (s *globalReplicationGroupLister) List(selector labels.Selector) (ret []*v1alpha1.GlobalReplicationGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlobalReplicationGroup))
	})
	return ret, err
}

// GlobalReplicationGroups returns an object that can list and get GlobalReplicationGroups.
func (s *globalReplicationGroupLister) GlobalReplicationGroups(namespace string) GlobalReplicationGroupNamespaceLister {
	return globalReplicationGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GlobalReplicationGroupNamespaceLister helps list and get GlobalReplicationGroups.
// All objects returned here must be treated as read-only.
type GlobalReplicationGroupNamespaceLister interface {
	// List lists all GlobalReplicationGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GlobalReplicationGroup, err error)
	// Get retrieves the GlobalReplicationGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GlobalReplicationGroup, error)
	GlobalReplicationGroupNamespaceListerExpansion
}

// globalReplicationGroupNamespaceLister implements the GlobalReplicationGroupNamespaceLister
// interface.
type globalReplicationGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GlobalReplicationGroups in the indexer for a given namespace.
func (s globalReplicationGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GlobalReplicationGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlobalReplicationGroup))
	})
	return ret, err
}

// Get retrieves the GlobalReplicationGroup from the indexer for a given namespace and name.
func (s globalReplicationGroupNamespaceLister) Get(name string) (*v1alpha1.GlobalReplicationGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("globalreplicationgroup"), name)
	}
	return obj.(*v1alpha1.GlobalReplicationGroup), nil
}
