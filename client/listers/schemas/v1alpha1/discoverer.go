/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/schemas/v1alpha1"
)

// DiscovererLister helps list Discoverers.
// All objects returned here must be treated as read-only.
type DiscovererLister interface {
	// List lists all Discoverers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Discoverer, err error)
	// Discoverers returns an object that can list and get Discoverers.
	Discoverers(namespace string) DiscovererNamespaceLister
	DiscovererListerExpansion
}

// discovererLister implements the DiscovererLister interface.
type discovererLister struct {
	indexer cache.Indexer
}

// NewDiscovererLister returns a new DiscovererLister.
func NewDiscovererLister(indexer cache.Indexer) DiscovererLister {
	return &discovererLister{indexer: indexer}
}

// List lists all Discoverers in the indexer.
func (s *discovererLister) List(selector labels.Selector) (ret []*v1alpha1.Discoverer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Discoverer))
	})
	return ret, err
}

// Discoverers returns an object that can list and get Discoverers.
func (s *discovererLister) Discoverers(namespace string) DiscovererNamespaceLister {
	return discovererNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DiscovererNamespaceLister helps list and get Discoverers.
// All objects returned here must be treated as read-only.
type DiscovererNamespaceLister interface {
	// List lists all Discoverers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Discoverer, err error)
	// Get retrieves the Discoverer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Discoverer, error)
	DiscovererNamespaceListerExpansion
}

// discovererNamespaceLister implements the DiscovererNamespaceLister
// interface.
type discovererNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Discoverers in the indexer for a given namespace.
func (s discovererNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Discoverer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Discoverer))
	})
	return ret, err
}

// Get retrieves the Discoverer from the indexer for a given namespace and name.
func (s discovererNamespaceLister) Get(name string) (*v1alpha1.Discoverer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("discoverer"), name)
	}
	return obj.(*v1alpha1.Discoverer), nil
}
