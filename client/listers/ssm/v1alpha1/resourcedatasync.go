/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ssm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceDataSyncLister helps list ResourceDataSyncs.
// All objects returned here must be treated as read-only.
type ResourceDataSyncLister interface {
	// List lists all ResourceDataSyncs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceDataSync, err error)
	// ResourceDataSyncs returns an object that can list and get ResourceDataSyncs.
	ResourceDataSyncs(namespace string) ResourceDataSyncNamespaceLister
	ResourceDataSyncListerExpansion
}

// resourceDataSyncLister implements the ResourceDataSyncLister interface.
type resourceDataSyncLister struct {
	indexer cache.Indexer
}

// NewResourceDataSyncLister returns a new ResourceDataSyncLister.
func NewResourceDataSyncLister(indexer cache.Indexer) ResourceDataSyncLister {
	return &resourceDataSyncLister{indexer: indexer}
}

// List lists all ResourceDataSyncs in the indexer.
func (s *resourceDataSyncLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceDataSync, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceDataSync))
	})
	return ret, err
}

// ResourceDataSyncs returns an object that can list and get ResourceDataSyncs.
func (s *resourceDataSyncLister) ResourceDataSyncs(namespace string) ResourceDataSyncNamespaceLister {
	return resourceDataSyncNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceDataSyncNamespaceLister helps list and get ResourceDataSyncs.
// All objects returned here must be treated as read-only.
type ResourceDataSyncNamespaceLister interface {
	// List lists all ResourceDataSyncs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceDataSync, err error)
	// Get retrieves the ResourceDataSync from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResourceDataSync, error)
	ResourceDataSyncNamespaceListerExpansion
}

// resourceDataSyncNamespaceLister implements the ResourceDataSyncNamespaceLister
// interface.
type resourceDataSyncNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceDataSyncs in the indexer for a given namespace.
func (s resourceDataSyncNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceDataSync, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceDataSync))
	})
	return ret, err
}

// Get retrieves the ResourceDataSync from the indexer for a given namespace and name.
func (s resourceDataSyncNamespaceLister) Get(name string) (*v1alpha1.ResourceDataSync, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resourcedatasync"), name)
	}
	return obj.(*v1alpha1.ResourceDataSync), nil
}
