/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ssm/v1alpha1"
)

// ActivationLister helps list Activations.
// All objects returned here must be treated as read-only.
type ActivationLister interface {
	// List lists all Activations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Activation, err error)
	// Activations returns an object that can list and get Activations.
	Activations(namespace string) ActivationNamespaceLister
	ActivationListerExpansion
}

// activationLister implements the ActivationLister interface.
type activationLister struct {
	indexer cache.Indexer
}

// NewActivationLister returns a new ActivationLister.
func NewActivationLister(indexer cache.Indexer) ActivationLister {
	return &activationLister{indexer: indexer}
}

// List lists all Activations in the indexer.
func (s *activationLister) List(selector labels.Selector) (ret []*v1alpha1.Activation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Activation))
	})
	return ret, err
}

// Activations returns an object that can list and get Activations.
func (s *activationLister) Activations(namespace string) ActivationNamespaceLister {
	return activationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ActivationNamespaceLister helps list and get Activations.
// All objects returned here must be treated as read-only.
type ActivationNamespaceLister interface {
	// List lists all Activations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Activation, err error)
	// Get retrieves the Activation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Activation, error)
	ActivationNamespaceListerExpansion
}

// activationNamespaceLister implements the ActivationNamespaceLister
// interface.
type activationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Activations in the indexer for a given namespace.
func (s activationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Activation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Activation))
	})
	return ret, err
}

// Get retrieves the Activation from the indexer for a given namespace and name.
func (s activationNamespaceLister) Get(name string) (*v1alpha1.Activation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("activation"), name)
	}
	return obj.(*v1alpha1.Activation), nil
}
