/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ssm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PatchBaselineLister helps list PatchBaselines.
// All objects returned here must be treated as read-only.
type PatchBaselineLister interface {
	// List lists all PatchBaselines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PatchBaseline, err error)
	// PatchBaselines returns an object that can list and get PatchBaselines.
	PatchBaselines(namespace string) PatchBaselineNamespaceLister
	PatchBaselineListerExpansion
}

// patchBaselineLister implements the PatchBaselineLister interface.
type patchBaselineLister struct {
	indexer cache.Indexer
}

// NewPatchBaselineLister returns a new PatchBaselineLister.
func NewPatchBaselineLister(indexer cache.Indexer) PatchBaselineLister {
	return &patchBaselineLister{indexer: indexer}
}

// List lists all PatchBaselines in the indexer.
func (s *patchBaselineLister) List(selector labels.Selector) (ret []*v1alpha1.PatchBaseline, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PatchBaseline))
	})
	return ret, err
}

// PatchBaselines returns an object that can list and get PatchBaselines.
func (s *patchBaselineLister) PatchBaselines(namespace string) PatchBaselineNamespaceLister {
	return patchBaselineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PatchBaselineNamespaceLister helps list and get PatchBaselines.
// All objects returned here must be treated as read-only.
type PatchBaselineNamespaceLister interface {
	// List lists all PatchBaselines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PatchBaseline, err error)
	// Get retrieves the PatchBaseline from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PatchBaseline, error)
	PatchBaselineNamespaceListerExpansion
}

// patchBaselineNamespaceLister implements the PatchBaselineNamespaceLister
// interface.
type patchBaselineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PatchBaselines in the indexer for a given namespace.
func (s patchBaselineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PatchBaseline, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PatchBaseline))
	})
	return ret, err
}

// Get retrieves the PatchBaseline from the indexer for a given namespace and name.
func (s patchBaselineNamespaceLister) Get(name string) (*v1alpha1.PatchBaseline, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("patchbaseline"), name)
	}
	return obj.(*v1alpha1.PatchBaseline), nil
}
