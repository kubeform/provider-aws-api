/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ssm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MaintenanceWindowTaskLister helps list MaintenanceWindowTasks.
// All objects returned here must be treated as read-only.
type MaintenanceWindowTaskLister interface {
	// List lists all MaintenanceWindowTasks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MaintenanceWindowTask, err error)
	// MaintenanceWindowTasks returns an object that can list and get MaintenanceWindowTasks.
	MaintenanceWindowTasks(namespace string) MaintenanceWindowTaskNamespaceLister
	MaintenanceWindowTaskListerExpansion
}

// maintenanceWindowTaskLister implements the MaintenanceWindowTaskLister interface.
type maintenanceWindowTaskLister struct {
	indexer cache.Indexer
}

// NewMaintenanceWindowTaskLister returns a new MaintenanceWindowTaskLister.
func NewMaintenanceWindowTaskLister(indexer cache.Indexer) MaintenanceWindowTaskLister {
	return &maintenanceWindowTaskLister{indexer: indexer}
}

// List lists all MaintenanceWindowTasks in the indexer.
func (s *maintenanceWindowTaskLister) List(selector labels.Selector) (ret []*v1alpha1.MaintenanceWindowTask, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MaintenanceWindowTask))
	})
	return ret, err
}

// MaintenanceWindowTasks returns an object that can list and get MaintenanceWindowTasks.
func (s *maintenanceWindowTaskLister) MaintenanceWindowTasks(namespace string) MaintenanceWindowTaskNamespaceLister {
	return maintenanceWindowTaskNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MaintenanceWindowTaskNamespaceLister helps list and get MaintenanceWindowTasks.
// All objects returned here must be treated as read-only.
type MaintenanceWindowTaskNamespaceLister interface {
	// List lists all MaintenanceWindowTasks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MaintenanceWindowTask, err error)
	// Get retrieves the MaintenanceWindowTask from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MaintenanceWindowTask, error)
	MaintenanceWindowTaskNamespaceListerExpansion
}

// maintenanceWindowTaskNamespaceLister implements the MaintenanceWindowTaskNamespaceLister
// interface.
type maintenanceWindowTaskNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MaintenanceWindowTasks in the indexer for a given namespace.
func (s maintenanceWindowTaskNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MaintenanceWindowTask, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MaintenanceWindowTask))
	})
	return ret, err
}

// Get retrieves the MaintenanceWindowTask from the indexer for a given namespace and name.
func (s maintenanceWindowTaskNamespaceLister) Get(name string) (*v1alpha1.MaintenanceWindowTask, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("maintenancewindowtask"), name)
	}
	return obj.(*v1alpha1.MaintenanceWindowTask), nil
}
