/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ssm/v1alpha1"
)

// MaintenanceWindowTargetLister helps list MaintenanceWindowTargets.
// All objects returned here must be treated as read-only.
type MaintenanceWindowTargetLister interface {
	// List lists all MaintenanceWindowTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MaintenanceWindowTarget, err error)
	// MaintenanceWindowTargets returns an object that can list and get MaintenanceWindowTargets.
	MaintenanceWindowTargets(namespace string) MaintenanceWindowTargetNamespaceLister
	MaintenanceWindowTargetListerExpansion
}

// maintenanceWindowTargetLister implements the MaintenanceWindowTargetLister interface.
type maintenanceWindowTargetLister struct {
	indexer cache.Indexer
}

// NewMaintenanceWindowTargetLister returns a new MaintenanceWindowTargetLister.
func NewMaintenanceWindowTargetLister(indexer cache.Indexer) MaintenanceWindowTargetLister {
	return &maintenanceWindowTargetLister{indexer: indexer}
}

// List lists all MaintenanceWindowTargets in the indexer.
func (s *maintenanceWindowTargetLister) List(selector labels.Selector) (ret []*v1alpha1.MaintenanceWindowTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MaintenanceWindowTarget))
	})
	return ret, err
}

// MaintenanceWindowTargets returns an object that can list and get MaintenanceWindowTargets.
func (s *maintenanceWindowTargetLister) MaintenanceWindowTargets(namespace string) MaintenanceWindowTargetNamespaceLister {
	return maintenanceWindowTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MaintenanceWindowTargetNamespaceLister helps list and get MaintenanceWindowTargets.
// All objects returned here must be treated as read-only.
type MaintenanceWindowTargetNamespaceLister interface {
	// List lists all MaintenanceWindowTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MaintenanceWindowTarget, err error)
	// Get retrieves the MaintenanceWindowTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MaintenanceWindowTarget, error)
	MaintenanceWindowTargetNamespaceListerExpansion
}

// maintenanceWindowTargetNamespaceLister implements the MaintenanceWindowTargetNamespaceLister
// interface.
type maintenanceWindowTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MaintenanceWindowTargets in the indexer for a given namespace.
func (s maintenanceWindowTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MaintenanceWindowTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MaintenanceWindowTarget))
	})
	return ret, err
}

// Get retrieves the MaintenanceWindowTarget from the indexer for a given namespace and name.
func (s maintenanceWindowTargetNamespaceLister) Get(name string) (*v1alpha1.MaintenanceWindowTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("maintenancewindowtarget"), name)
	}
	return obj.(*v1alpha1.MaintenanceWindowTarget), nil
}
