/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/route53recoverycontrolconfig/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SafetyRuleLister helps list SafetyRules.
// All objects returned here must be treated as read-only.
type SafetyRuleLister interface {
	// List lists all SafetyRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SafetyRule, err error)
	// SafetyRules returns an object that can list and get SafetyRules.
	SafetyRules(namespace string) SafetyRuleNamespaceLister
	SafetyRuleListerExpansion
}

// safetyRuleLister implements the SafetyRuleLister interface.
type safetyRuleLister struct {
	indexer cache.Indexer
}

// NewSafetyRuleLister returns a new SafetyRuleLister.
func NewSafetyRuleLister(indexer cache.Indexer) SafetyRuleLister {
	return &safetyRuleLister{indexer: indexer}
}

// List lists all SafetyRules in the indexer.
func (s *safetyRuleLister) List(selector labels.Selector) (ret []*v1alpha1.SafetyRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SafetyRule))
	})
	return ret, err
}

// SafetyRules returns an object that can list and get SafetyRules.
func (s *safetyRuleLister) SafetyRules(namespace string) SafetyRuleNamespaceLister {
	return safetyRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SafetyRuleNamespaceLister helps list and get SafetyRules.
// All objects returned here must be treated as read-only.
type SafetyRuleNamespaceLister interface {
	// List lists all SafetyRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SafetyRule, err error)
	// Get retrieves the SafetyRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SafetyRule, error)
	SafetyRuleNamespaceListerExpansion
}

// safetyRuleNamespaceLister implements the SafetyRuleNamespaceLister
// interface.
type safetyRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SafetyRules in the indexer for a given namespace.
func (s safetyRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SafetyRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SafetyRule))
	})
	return ret, err
}

// Get retrieves the SafetyRule from the indexer for a given namespace and name.
func (s safetyRuleNamespaceLister) Get(name string) (*v1alpha1.SafetyRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("safetyrule"), name)
	}
	return obj.(*v1alpha1.SafetyRule), nil
}
