/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/route53recoverycontrolconfig/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RoutingControlLister helps list RoutingControls.
// All objects returned here must be treated as read-only.
type RoutingControlLister interface {
	// List lists all RoutingControls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RoutingControl, err error)
	// RoutingControls returns an object that can list and get RoutingControls.
	RoutingControls(namespace string) RoutingControlNamespaceLister
	RoutingControlListerExpansion
}

// routingControlLister implements the RoutingControlLister interface.
type routingControlLister struct {
	indexer cache.Indexer
}

// NewRoutingControlLister returns a new RoutingControlLister.
func NewRoutingControlLister(indexer cache.Indexer) RoutingControlLister {
	return &routingControlLister{indexer: indexer}
}

// List lists all RoutingControls in the indexer.
func (s *routingControlLister) List(selector labels.Selector) (ret []*v1alpha1.RoutingControl, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RoutingControl))
	})
	return ret, err
}

// RoutingControls returns an object that can list and get RoutingControls.
func (s *routingControlLister) RoutingControls(namespace string) RoutingControlNamespaceLister {
	return routingControlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RoutingControlNamespaceLister helps list and get RoutingControls.
// All objects returned here must be treated as read-only.
type RoutingControlNamespaceLister interface {
	// List lists all RoutingControls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RoutingControl, err error)
	// Get retrieves the RoutingControl from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RoutingControl, error)
	RoutingControlNamespaceListerExpansion
}

// routingControlNamespaceLister implements the RoutingControlNamespaceLister
// interface.
type routingControlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RoutingControls in the indexer for a given namespace.
func (s routingControlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RoutingControl, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RoutingControl))
	})
	return ret, err
}

// Get retrieves the RoutingControl from the indexer for a given namespace and name.
func (s routingControlNamespaceLister) Get(name string) (*v1alpha1.RoutingControl, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("routingcontrol"), name)
	}
	return obj.(*v1alpha1.RoutingControl), nil
}
