/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/route53recoverycontrolconfig/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ControlPanelLister helps list ControlPanels.
// All objects returned here must be treated as read-only.
type ControlPanelLister interface {
	// List lists all ControlPanels in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ControlPanel, err error)
	// ControlPanels returns an object that can list and get ControlPanels.
	ControlPanels(namespace string) ControlPanelNamespaceLister
	ControlPanelListerExpansion
}

// controlPanelLister implements the ControlPanelLister interface.
type controlPanelLister struct {
	indexer cache.Indexer
}

// NewControlPanelLister returns a new ControlPanelLister.
func NewControlPanelLister(indexer cache.Indexer) ControlPanelLister {
	return &controlPanelLister{indexer: indexer}
}

// List lists all ControlPanels in the indexer.
func (s *controlPanelLister) List(selector labels.Selector) (ret []*v1alpha1.ControlPanel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ControlPanel))
	})
	return ret, err
}

// ControlPanels returns an object that can list and get ControlPanels.
func (s *controlPanelLister) ControlPanels(namespace string) ControlPanelNamespaceLister {
	return controlPanelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ControlPanelNamespaceLister helps list and get ControlPanels.
// All objects returned here must be treated as read-only.
type ControlPanelNamespaceLister interface {
	// List lists all ControlPanels in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ControlPanel, err error)
	// Get retrieves the ControlPanel from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ControlPanel, error)
	ControlPanelNamespaceListerExpansion
}

// controlPanelNamespaceLister implements the ControlPanelNamespaceLister
// interface.
type controlPanelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ControlPanels in the indexer for a given namespace.
func (s controlPanelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ControlPanel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ControlPanel))
	})
	return ret, err
}

// Get retrieves the ControlPanel from the indexer for a given namespace and name.
func (s controlPanelNamespaceLister) Get(name string) (*v1alpha1.ControlPanel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("controlpanel"), name)
	}
	return obj.(*v1alpha1.ControlPanel), nil
}
