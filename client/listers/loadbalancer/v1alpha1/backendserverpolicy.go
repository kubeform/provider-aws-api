/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/loadbalancer/v1alpha1"
)

// BackendServerPolicyLister helps list BackendServerPolicies.
// All objects returned here must be treated as read-only.
type BackendServerPolicyLister interface {
	// List lists all BackendServerPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackendServerPolicy, err error)
	// BackendServerPolicies returns an object that can list and get BackendServerPolicies.
	BackendServerPolicies(namespace string) BackendServerPolicyNamespaceLister
	BackendServerPolicyListerExpansion
}

// backendServerPolicyLister implements the BackendServerPolicyLister interface.
type backendServerPolicyLister struct {
	indexer cache.Indexer
}

// NewBackendServerPolicyLister returns a new BackendServerPolicyLister.
func NewBackendServerPolicyLister(indexer cache.Indexer) BackendServerPolicyLister {
	return &backendServerPolicyLister{indexer: indexer}
}

// List lists all BackendServerPolicies in the indexer.
func (s *backendServerPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.BackendServerPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackendServerPolicy))
	})
	return ret, err
}

// BackendServerPolicies returns an object that can list and get BackendServerPolicies.
func (s *backendServerPolicyLister) BackendServerPolicies(namespace string) BackendServerPolicyNamespaceLister {
	return backendServerPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackendServerPolicyNamespaceLister helps list and get BackendServerPolicies.
// All objects returned here must be treated as read-only.
type BackendServerPolicyNamespaceLister interface {
	// List lists all BackendServerPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackendServerPolicy, err error)
	// Get retrieves the BackendServerPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BackendServerPolicy, error)
	BackendServerPolicyNamespaceListerExpansion
}

// backendServerPolicyNamespaceLister implements the BackendServerPolicyNamespaceLister
// interface.
type backendServerPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackendServerPolicies in the indexer for a given namespace.
func (s backendServerPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackendServerPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackendServerPolicy))
	})
	return ret, err
}

// Get retrieves the BackendServerPolicy from the indexer for a given namespace and name.
func (s backendServerPolicyNamespaceLister) Get(name string) (*v1alpha1.BackendServerPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backendserverpolicy"), name)
	}
	return obj.(*v1alpha1.BackendServerPolicy), nil
}
