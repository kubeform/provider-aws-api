/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/loadbalancer/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ListenerPolicyLister helps list ListenerPolicies.
// All objects returned here must be treated as read-only.
type ListenerPolicyLister interface {
	// List lists all ListenerPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ListenerPolicy, err error)
	// ListenerPolicies returns an object that can list and get ListenerPolicies.
	ListenerPolicies(namespace string) ListenerPolicyNamespaceLister
	ListenerPolicyListerExpansion
}

// listenerPolicyLister implements the ListenerPolicyLister interface.
type listenerPolicyLister struct {
	indexer cache.Indexer
}

// NewListenerPolicyLister returns a new ListenerPolicyLister.
func NewListenerPolicyLister(indexer cache.Indexer) ListenerPolicyLister {
	return &listenerPolicyLister{indexer: indexer}
}

// List lists all ListenerPolicies in the indexer.
func (s *listenerPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ListenerPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ListenerPolicy))
	})
	return ret, err
}

// ListenerPolicies returns an object that can list and get ListenerPolicies.
func (s *listenerPolicyLister) ListenerPolicies(namespace string) ListenerPolicyNamespaceLister {
	return listenerPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ListenerPolicyNamespaceLister helps list and get ListenerPolicies.
// All objects returned here must be treated as read-only.
type ListenerPolicyNamespaceLister interface {
	// List lists all ListenerPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ListenerPolicy, err error)
	// Get retrieves the ListenerPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ListenerPolicy, error)
	ListenerPolicyNamespaceListerExpansion
}

// listenerPolicyNamespaceLister implements the ListenerPolicyNamespaceLister
// interface.
type listenerPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ListenerPolicies in the indexer for a given namespace.
func (s listenerPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ListenerPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ListenerPolicy))
	})
	return ret, err
}

// Get retrieves the ListenerPolicy from the indexer for a given namespace and name.
func (s listenerPolicyNamespaceLister) Get(name string) (*v1alpha1.ListenerPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("listenerpolicy"), name)
	}
	return obj.(*v1alpha1.ListenerPolicy), nil
}
