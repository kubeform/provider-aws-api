/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BucketLoggingLister helps list BucketLoggings.
// All objects returned here must be treated as read-only.
type BucketLoggingLister interface {
	// List lists all BucketLoggings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketLogging, err error)
	// BucketLoggings returns an object that can list and get BucketLoggings.
	BucketLoggings(namespace string) BucketLoggingNamespaceLister
	BucketLoggingListerExpansion
}

// bucketLoggingLister implements the BucketLoggingLister interface.
type bucketLoggingLister struct {
	indexer cache.Indexer
}

// NewBucketLoggingLister returns a new BucketLoggingLister.
func NewBucketLoggingLister(indexer cache.Indexer) BucketLoggingLister {
	return &bucketLoggingLister{indexer: indexer}
}

// List lists all BucketLoggings in the indexer.
func (s *bucketLoggingLister) List(selector labels.Selector) (ret []*v1alpha1.BucketLogging, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketLogging))
	})
	return ret, err
}

// BucketLoggings returns an object that can list and get BucketLoggings.
func (s *bucketLoggingLister) BucketLoggings(namespace string) BucketLoggingNamespaceLister {
	return bucketLoggingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketLoggingNamespaceLister helps list and get BucketLoggings.
// All objects returned here must be treated as read-only.
type BucketLoggingNamespaceLister interface {
	// List lists all BucketLoggings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketLogging, err error)
	// Get retrieves the BucketLogging from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BucketLogging, error)
	BucketLoggingNamespaceListerExpansion
}

// bucketLoggingNamespaceLister implements the BucketLoggingNamespaceLister
// interface.
type bucketLoggingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketLoggings in the indexer for a given namespace.
func (s bucketLoggingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketLogging, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketLogging))
	})
	return ret, err
}

// Get retrieves the BucketLogging from the indexer for a given namespace and name.
func (s bucketLoggingNamespaceLister) Get(name string) (*v1alpha1.BucketLogging, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketlogging"), name)
	}
	return obj.(*v1alpha1.BucketLogging), nil
}
