/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BucketWebsiteConfigurationLister helps list BucketWebsiteConfigurations.
// All objects returned here must be treated as read-only.
type BucketWebsiteConfigurationLister interface {
	// List lists all BucketWebsiteConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketWebsiteConfiguration, err error)
	// BucketWebsiteConfigurations returns an object that can list and get BucketWebsiteConfigurations.
	BucketWebsiteConfigurations(namespace string) BucketWebsiteConfigurationNamespaceLister
	BucketWebsiteConfigurationListerExpansion
}

// bucketWebsiteConfigurationLister implements the BucketWebsiteConfigurationLister interface.
type bucketWebsiteConfigurationLister struct {
	indexer cache.Indexer
}

// NewBucketWebsiteConfigurationLister returns a new BucketWebsiteConfigurationLister.
func NewBucketWebsiteConfigurationLister(indexer cache.Indexer) BucketWebsiteConfigurationLister {
	return &bucketWebsiteConfigurationLister{indexer: indexer}
}

// List lists all BucketWebsiteConfigurations in the indexer.
func (s *bucketWebsiteConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.BucketWebsiteConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketWebsiteConfiguration))
	})
	return ret, err
}

// BucketWebsiteConfigurations returns an object that can list and get BucketWebsiteConfigurations.
func (s *bucketWebsiteConfigurationLister) BucketWebsiteConfigurations(namespace string) BucketWebsiteConfigurationNamespaceLister {
	return bucketWebsiteConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketWebsiteConfigurationNamespaceLister helps list and get BucketWebsiteConfigurations.
// All objects returned here must be treated as read-only.
type BucketWebsiteConfigurationNamespaceLister interface {
	// List lists all BucketWebsiteConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketWebsiteConfiguration, err error)
	// Get retrieves the BucketWebsiteConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BucketWebsiteConfiguration, error)
	BucketWebsiteConfigurationNamespaceListerExpansion
}

// bucketWebsiteConfigurationNamespaceLister implements the BucketWebsiteConfigurationNamespaceLister
// interface.
type bucketWebsiteConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketWebsiteConfigurations in the indexer for a given namespace.
func (s bucketWebsiteConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketWebsiteConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketWebsiteConfiguration))
	})
	return ret, err
}

// Get retrieves the BucketWebsiteConfiguration from the indexer for a given namespace and name.
func (s bucketWebsiteConfigurationNamespaceLister) Get(name string) (*v1alpha1.BucketWebsiteConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketwebsiteconfiguration"), name)
	}
	return obj.(*v1alpha1.BucketWebsiteConfiguration), nil
}
