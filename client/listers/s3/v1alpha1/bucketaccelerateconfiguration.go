/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BucketAccelerateConfigurationLister helps list BucketAccelerateConfigurations.
// All objects returned here must be treated as read-only.
type BucketAccelerateConfigurationLister interface {
	// List lists all BucketAccelerateConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketAccelerateConfiguration, err error)
	// BucketAccelerateConfigurations returns an object that can list and get BucketAccelerateConfigurations.
	BucketAccelerateConfigurations(namespace string) BucketAccelerateConfigurationNamespaceLister
	BucketAccelerateConfigurationListerExpansion
}

// bucketAccelerateConfigurationLister implements the BucketAccelerateConfigurationLister interface.
type bucketAccelerateConfigurationLister struct {
	indexer cache.Indexer
}

// NewBucketAccelerateConfigurationLister returns a new BucketAccelerateConfigurationLister.
func NewBucketAccelerateConfigurationLister(indexer cache.Indexer) BucketAccelerateConfigurationLister {
	return &bucketAccelerateConfigurationLister{indexer: indexer}
}

// List lists all BucketAccelerateConfigurations in the indexer.
func (s *bucketAccelerateConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.BucketAccelerateConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketAccelerateConfiguration))
	})
	return ret, err
}

// BucketAccelerateConfigurations returns an object that can list and get BucketAccelerateConfigurations.
func (s *bucketAccelerateConfigurationLister) BucketAccelerateConfigurations(namespace string) BucketAccelerateConfigurationNamespaceLister {
	return bucketAccelerateConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketAccelerateConfigurationNamespaceLister helps list and get BucketAccelerateConfigurations.
// All objects returned here must be treated as read-only.
type BucketAccelerateConfigurationNamespaceLister interface {
	// List lists all BucketAccelerateConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketAccelerateConfiguration, err error)
	// Get retrieves the BucketAccelerateConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BucketAccelerateConfiguration, error)
	BucketAccelerateConfigurationNamespaceListerExpansion
}

// bucketAccelerateConfigurationNamespaceLister implements the BucketAccelerateConfigurationNamespaceLister
// interface.
type bucketAccelerateConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketAccelerateConfigurations in the indexer for a given namespace.
func (s bucketAccelerateConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketAccelerateConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketAccelerateConfiguration))
	})
	return ret, err
}

// Get retrieves the BucketAccelerateConfiguration from the indexer for a given namespace and name.
func (s bucketAccelerateConfigurationNamespaceLister) Get(name string) (*v1alpha1.BucketAccelerateConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketaccelerateconfiguration"), name)
	}
	return obj.(*v1alpha1.BucketAccelerateConfiguration), nil
}
