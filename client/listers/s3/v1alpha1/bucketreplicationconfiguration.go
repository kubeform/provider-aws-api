/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BucketReplicationConfigurationLister helps list BucketReplicationConfigurations.
// All objects returned here must be treated as read-only.
type BucketReplicationConfigurationLister interface {
	// List lists all BucketReplicationConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketReplicationConfiguration, err error)
	// BucketReplicationConfigurations returns an object that can list and get BucketReplicationConfigurations.
	BucketReplicationConfigurations(namespace string) BucketReplicationConfigurationNamespaceLister
	BucketReplicationConfigurationListerExpansion
}

// bucketReplicationConfigurationLister implements the BucketReplicationConfigurationLister interface.
type bucketReplicationConfigurationLister struct {
	indexer cache.Indexer
}

// NewBucketReplicationConfigurationLister returns a new BucketReplicationConfigurationLister.
func NewBucketReplicationConfigurationLister(indexer cache.Indexer) BucketReplicationConfigurationLister {
	return &bucketReplicationConfigurationLister{indexer: indexer}
}

// List lists all BucketReplicationConfigurations in the indexer.
func (s *bucketReplicationConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.BucketReplicationConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketReplicationConfiguration))
	})
	return ret, err
}

// BucketReplicationConfigurations returns an object that can list and get BucketReplicationConfigurations.
func (s *bucketReplicationConfigurationLister) BucketReplicationConfigurations(namespace string) BucketReplicationConfigurationNamespaceLister {
	return bucketReplicationConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketReplicationConfigurationNamespaceLister helps list and get BucketReplicationConfigurations.
// All objects returned here must be treated as read-only.
type BucketReplicationConfigurationNamespaceLister interface {
	// List lists all BucketReplicationConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketReplicationConfiguration, err error)
	// Get retrieves the BucketReplicationConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BucketReplicationConfiguration, error)
	BucketReplicationConfigurationNamespaceListerExpansion
}

// bucketReplicationConfigurationNamespaceLister implements the BucketReplicationConfigurationNamespaceLister
// interface.
type bucketReplicationConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketReplicationConfigurations in the indexer for a given namespace.
func (s bucketReplicationConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketReplicationConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketReplicationConfiguration))
	})
	return ret, err
}

// Get retrieves the BucketReplicationConfiguration from the indexer for a given namespace and name.
func (s bucketReplicationConfigurationNamespaceLister) Get(name string) (*v1alpha1.BucketReplicationConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketreplicationconfiguration"), name)
	}
	return obj.(*v1alpha1.BucketReplicationConfiguration), nil
}
