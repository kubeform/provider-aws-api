/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BucketInventoryLister helps list BucketInventories.
// All objects returned here must be treated as read-only.
type BucketInventoryLister interface {
	// List lists all BucketInventories in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketInventory, err error)
	// BucketInventories returns an object that can list and get BucketInventories.
	BucketInventories(namespace string) BucketInventoryNamespaceLister
	BucketInventoryListerExpansion
}

// bucketInventoryLister implements the BucketInventoryLister interface.
type bucketInventoryLister struct {
	indexer cache.Indexer
}

// NewBucketInventoryLister returns a new BucketInventoryLister.
func NewBucketInventoryLister(indexer cache.Indexer) BucketInventoryLister {
	return &bucketInventoryLister{indexer: indexer}
}

// List lists all BucketInventories in the indexer.
func (s *bucketInventoryLister) List(selector labels.Selector) (ret []*v1alpha1.BucketInventory, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketInventory))
	})
	return ret, err
}

// BucketInventories returns an object that can list and get BucketInventories.
func (s *bucketInventoryLister) BucketInventories(namespace string) BucketInventoryNamespaceLister {
	return bucketInventoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketInventoryNamespaceLister helps list and get BucketInventories.
// All objects returned here must be treated as read-only.
type BucketInventoryNamespaceLister interface {
	// List lists all BucketInventories in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketInventory, err error)
	// Get retrieves the BucketInventory from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BucketInventory, error)
	BucketInventoryNamespaceListerExpansion
}

// bucketInventoryNamespaceLister implements the BucketInventoryNamespaceLister
// interface.
type bucketInventoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketInventories in the indexer for a given namespace.
func (s bucketInventoryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketInventory, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketInventory))
	})
	return ret, err
}

// Get retrieves the BucketInventory from the indexer for a given namespace and name.
func (s bucketInventoryNamespaceLister) Get(name string) (*v1alpha1.BucketInventory, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketinventory"), name)
	}
	return obj.(*v1alpha1.BucketInventory), nil
}
