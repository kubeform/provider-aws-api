/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BucketNotificationLister helps list BucketNotifications.
// All objects returned here must be treated as read-only.
type BucketNotificationLister interface {
	// List lists all BucketNotifications in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketNotification, err error)
	// BucketNotifications returns an object that can list and get BucketNotifications.
	BucketNotifications(namespace string) BucketNotificationNamespaceLister
	BucketNotificationListerExpansion
}

// bucketNotificationLister implements the BucketNotificationLister interface.
type bucketNotificationLister struct {
	indexer cache.Indexer
}

// NewBucketNotificationLister returns a new BucketNotificationLister.
func NewBucketNotificationLister(indexer cache.Indexer) BucketNotificationLister {
	return &bucketNotificationLister{indexer: indexer}
}

// List lists all BucketNotifications in the indexer.
func (s *bucketNotificationLister) List(selector labels.Selector) (ret []*v1alpha1.BucketNotification, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketNotification))
	})
	return ret, err
}

// BucketNotifications returns an object that can list and get BucketNotifications.
func (s *bucketNotificationLister) BucketNotifications(namespace string) BucketNotificationNamespaceLister {
	return bucketNotificationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketNotificationNamespaceLister helps list and get BucketNotifications.
// All objects returned here must be treated as read-only.
type BucketNotificationNamespaceLister interface {
	// List lists all BucketNotifications in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketNotification, err error)
	// Get retrieves the BucketNotification from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BucketNotification, error)
	BucketNotificationNamespaceListerExpansion
}

// bucketNotificationNamespaceLister implements the BucketNotificationNamespaceLister
// interface.
type bucketNotificationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketNotifications in the indexer for a given namespace.
func (s bucketNotificationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketNotification, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketNotification))
	})
	return ret, err
}

// Get retrieves the BucketNotification from the indexer for a given namespace and name.
func (s bucketNotificationNamespaceLister) Get(name string) (*v1alpha1.BucketNotification, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketnotification"), name)
	}
	return obj.(*v1alpha1.BucketNotification), nil
}
