/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BucketCorsConfigurationLister helps list BucketCorsConfigurations.
// All objects returned here must be treated as read-only.
type BucketCorsConfigurationLister interface {
	// List lists all BucketCorsConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketCorsConfiguration, err error)
	// BucketCorsConfigurations returns an object that can list and get BucketCorsConfigurations.
	BucketCorsConfigurations(namespace string) BucketCorsConfigurationNamespaceLister
	BucketCorsConfigurationListerExpansion
}

// bucketCorsConfigurationLister implements the BucketCorsConfigurationLister interface.
type bucketCorsConfigurationLister struct {
	indexer cache.Indexer
}

// NewBucketCorsConfigurationLister returns a new BucketCorsConfigurationLister.
func NewBucketCorsConfigurationLister(indexer cache.Indexer) BucketCorsConfigurationLister {
	return &bucketCorsConfigurationLister{indexer: indexer}
}

// List lists all BucketCorsConfigurations in the indexer.
func (s *bucketCorsConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.BucketCorsConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketCorsConfiguration))
	})
	return ret, err
}

// BucketCorsConfigurations returns an object that can list and get BucketCorsConfigurations.
func (s *bucketCorsConfigurationLister) BucketCorsConfigurations(namespace string) BucketCorsConfigurationNamespaceLister {
	return bucketCorsConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketCorsConfigurationNamespaceLister helps list and get BucketCorsConfigurations.
// All objects returned here must be treated as read-only.
type BucketCorsConfigurationNamespaceLister interface {
	// List lists all BucketCorsConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketCorsConfiguration, err error)
	// Get retrieves the BucketCorsConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BucketCorsConfiguration, error)
	BucketCorsConfigurationNamespaceListerExpansion
}

// bucketCorsConfigurationNamespaceLister implements the BucketCorsConfigurationNamespaceLister
// interface.
type bucketCorsConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketCorsConfigurations in the indexer for a given namespace.
func (s bucketCorsConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketCorsConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketCorsConfiguration))
	})
	return ret, err
}

// Get retrieves the BucketCorsConfiguration from the indexer for a given namespace and name.
func (s bucketCorsConfigurationNamespaceLister) Get(name string) (*v1alpha1.BucketCorsConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketcorsconfiguration"), name)
	}
	return obj.(*v1alpha1.BucketCorsConfiguration), nil
}
