/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BucketMetricLister helps list BucketMetrics.
// All objects returned here must be treated as read-only.
type BucketMetricLister interface {
	// List lists all BucketMetrics in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketMetric, err error)
	// BucketMetrics returns an object that can list and get BucketMetrics.
	BucketMetrics(namespace string) BucketMetricNamespaceLister
	BucketMetricListerExpansion
}

// bucketMetricLister implements the BucketMetricLister interface.
type bucketMetricLister struct {
	indexer cache.Indexer
}

// NewBucketMetricLister returns a new BucketMetricLister.
func NewBucketMetricLister(indexer cache.Indexer) BucketMetricLister {
	return &bucketMetricLister{indexer: indexer}
}

// List lists all BucketMetrics in the indexer.
func (s *bucketMetricLister) List(selector labels.Selector) (ret []*v1alpha1.BucketMetric, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketMetric))
	})
	return ret, err
}

// BucketMetrics returns an object that can list and get BucketMetrics.
func (s *bucketMetricLister) BucketMetrics(namespace string) BucketMetricNamespaceLister {
	return bucketMetricNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketMetricNamespaceLister helps list and get BucketMetrics.
// All objects returned here must be treated as read-only.
type BucketMetricNamespaceLister interface {
	// List lists all BucketMetrics in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketMetric, err error)
	// Get retrieves the BucketMetric from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BucketMetric, error)
	BucketMetricNamespaceListerExpansion
}

// bucketMetricNamespaceLister implements the BucketMetricNamespaceLister
// interface.
type bucketMetricNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketMetrics in the indexer for a given namespace.
func (s bucketMetricNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketMetric, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketMetric))
	})
	return ret, err
}

// Get retrieves the BucketMetric from the indexer for a given namespace and name.
func (s bucketMetricNamespaceLister) Get(name string) (*v1alpha1.BucketMetric, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketmetric"), name)
	}
	return obj.(*v1alpha1.BucketMetric), nil
}
