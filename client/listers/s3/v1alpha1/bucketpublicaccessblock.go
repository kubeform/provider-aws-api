/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BucketPublicAccessBlockLister helps list BucketPublicAccessBlocks.
// All objects returned here must be treated as read-only.
type BucketPublicAccessBlockLister interface {
	// List lists all BucketPublicAccessBlocks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketPublicAccessBlock, err error)
	// BucketPublicAccessBlocks returns an object that can list and get BucketPublicAccessBlocks.
	BucketPublicAccessBlocks(namespace string) BucketPublicAccessBlockNamespaceLister
	BucketPublicAccessBlockListerExpansion
}

// bucketPublicAccessBlockLister implements the BucketPublicAccessBlockLister interface.
type bucketPublicAccessBlockLister struct {
	indexer cache.Indexer
}

// NewBucketPublicAccessBlockLister returns a new BucketPublicAccessBlockLister.
func NewBucketPublicAccessBlockLister(indexer cache.Indexer) BucketPublicAccessBlockLister {
	return &bucketPublicAccessBlockLister{indexer: indexer}
}

// List lists all BucketPublicAccessBlocks in the indexer.
func (s *bucketPublicAccessBlockLister) List(selector labels.Selector) (ret []*v1alpha1.BucketPublicAccessBlock, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketPublicAccessBlock))
	})
	return ret, err
}

// BucketPublicAccessBlocks returns an object that can list and get BucketPublicAccessBlocks.
func (s *bucketPublicAccessBlockLister) BucketPublicAccessBlocks(namespace string) BucketPublicAccessBlockNamespaceLister {
	return bucketPublicAccessBlockNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketPublicAccessBlockNamespaceLister helps list and get BucketPublicAccessBlocks.
// All objects returned here must be treated as read-only.
type BucketPublicAccessBlockNamespaceLister interface {
	// List lists all BucketPublicAccessBlocks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketPublicAccessBlock, err error)
	// Get retrieves the BucketPublicAccessBlock from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BucketPublicAccessBlock, error)
	BucketPublicAccessBlockNamespaceListerExpansion
}

// bucketPublicAccessBlockNamespaceLister implements the BucketPublicAccessBlockNamespaceLister
// interface.
type bucketPublicAccessBlockNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketPublicAccessBlocks in the indexer for a given namespace.
func (s bucketPublicAccessBlockNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketPublicAccessBlock, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketPublicAccessBlock))
	})
	return ret, err
}

// Get retrieves the BucketPublicAccessBlock from the indexer for a given namespace and name.
func (s bucketPublicAccessBlockNamespaceLister) Get(name string) (*v1alpha1.BucketPublicAccessBlock, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketpublicaccessblock"), name)
	}
	return obj.(*v1alpha1.BucketPublicAccessBlock), nil
}
