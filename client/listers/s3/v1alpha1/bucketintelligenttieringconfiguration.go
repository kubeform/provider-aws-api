/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BucketIntelligentTieringConfigurationLister helps list BucketIntelligentTieringConfigurations.
// All objects returned here must be treated as read-only.
type BucketIntelligentTieringConfigurationLister interface {
	// List lists all BucketIntelligentTieringConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketIntelligentTieringConfiguration, err error)
	// BucketIntelligentTieringConfigurations returns an object that can list and get BucketIntelligentTieringConfigurations.
	BucketIntelligentTieringConfigurations(namespace string) BucketIntelligentTieringConfigurationNamespaceLister
	BucketIntelligentTieringConfigurationListerExpansion
}

// bucketIntelligentTieringConfigurationLister implements the BucketIntelligentTieringConfigurationLister interface.
type bucketIntelligentTieringConfigurationLister struct {
	indexer cache.Indexer
}

// NewBucketIntelligentTieringConfigurationLister returns a new BucketIntelligentTieringConfigurationLister.
func NewBucketIntelligentTieringConfigurationLister(indexer cache.Indexer) BucketIntelligentTieringConfigurationLister {
	return &bucketIntelligentTieringConfigurationLister{indexer: indexer}
}

// List lists all BucketIntelligentTieringConfigurations in the indexer.
func (s *bucketIntelligentTieringConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.BucketIntelligentTieringConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketIntelligentTieringConfiguration))
	})
	return ret, err
}

// BucketIntelligentTieringConfigurations returns an object that can list and get BucketIntelligentTieringConfigurations.
func (s *bucketIntelligentTieringConfigurationLister) BucketIntelligentTieringConfigurations(namespace string) BucketIntelligentTieringConfigurationNamespaceLister {
	return bucketIntelligentTieringConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketIntelligentTieringConfigurationNamespaceLister helps list and get BucketIntelligentTieringConfigurations.
// All objects returned here must be treated as read-only.
type BucketIntelligentTieringConfigurationNamespaceLister interface {
	// List lists all BucketIntelligentTieringConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketIntelligentTieringConfiguration, err error)
	// Get retrieves the BucketIntelligentTieringConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BucketIntelligentTieringConfiguration, error)
	BucketIntelligentTieringConfigurationNamespaceListerExpansion
}

// bucketIntelligentTieringConfigurationNamespaceLister implements the BucketIntelligentTieringConfigurationNamespaceLister
// interface.
type bucketIntelligentTieringConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketIntelligentTieringConfigurations in the indexer for a given namespace.
func (s bucketIntelligentTieringConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketIntelligentTieringConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketIntelligentTieringConfiguration))
	})
	return ret, err
}

// Get retrieves the BucketIntelligentTieringConfiguration from the indexer for a given namespace and name.
func (s bucketIntelligentTieringConfigurationNamespaceLister) Get(name string) (*v1alpha1.BucketIntelligentTieringConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketintelligenttieringconfiguration"), name)
	}
	return obj.(*v1alpha1.BucketIntelligentTieringConfiguration), nil
}
