/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/lightsail/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StaticIPLister helps list StaticIPs.
// All objects returned here must be treated as read-only.
type StaticIPLister interface {
	// List lists all StaticIPs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StaticIP, err error)
	// StaticIPs returns an object that can list and get StaticIPs.
	StaticIPs(namespace string) StaticIPNamespaceLister
	StaticIPListerExpansion
}

// staticIPLister implements the StaticIPLister interface.
type staticIPLister struct {
	indexer cache.Indexer
}

// NewStaticIPLister returns a new StaticIPLister.
func NewStaticIPLister(indexer cache.Indexer) StaticIPLister {
	return &staticIPLister{indexer: indexer}
}

// List lists all StaticIPs in the indexer.
func (s *staticIPLister) List(selector labels.Selector) (ret []*v1alpha1.StaticIP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StaticIP))
	})
	return ret, err
}

// StaticIPs returns an object that can list and get StaticIPs.
func (s *staticIPLister) StaticIPs(namespace string) StaticIPNamespaceLister {
	return staticIPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StaticIPNamespaceLister helps list and get StaticIPs.
// All objects returned here must be treated as read-only.
type StaticIPNamespaceLister interface {
	// List lists all StaticIPs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StaticIP, err error)
	// Get retrieves the StaticIP from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StaticIP, error)
	StaticIPNamespaceListerExpansion
}

// staticIPNamespaceLister implements the StaticIPNamespaceLister
// interface.
type staticIPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StaticIPs in the indexer for a given namespace.
func (s staticIPNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StaticIP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StaticIP))
	})
	return ret, err
}

// Get retrieves the StaticIP from the indexer for a given namespace and name.
func (s staticIPNamespaceLister) Get(name string) (*v1alpha1.StaticIP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("staticip"), name)
	}
	return obj.(*v1alpha1.StaticIP), nil
}
