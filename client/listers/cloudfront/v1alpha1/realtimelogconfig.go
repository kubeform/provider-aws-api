/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudfront/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RealtimeLogConfigLister helps list RealtimeLogConfigs.
// All objects returned here must be treated as read-only.
type RealtimeLogConfigLister interface {
	// List lists all RealtimeLogConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RealtimeLogConfig, err error)
	// RealtimeLogConfigs returns an object that can list and get RealtimeLogConfigs.
	RealtimeLogConfigs(namespace string) RealtimeLogConfigNamespaceLister
	RealtimeLogConfigListerExpansion
}

// realtimeLogConfigLister implements the RealtimeLogConfigLister interface.
type realtimeLogConfigLister struct {
	indexer cache.Indexer
}

// NewRealtimeLogConfigLister returns a new RealtimeLogConfigLister.
func NewRealtimeLogConfigLister(indexer cache.Indexer) RealtimeLogConfigLister {
	return &realtimeLogConfigLister{indexer: indexer}
}

// List lists all RealtimeLogConfigs in the indexer.
func (s *realtimeLogConfigLister) List(selector labels.Selector) (ret []*v1alpha1.RealtimeLogConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RealtimeLogConfig))
	})
	return ret, err
}

// RealtimeLogConfigs returns an object that can list and get RealtimeLogConfigs.
func (s *realtimeLogConfigLister) RealtimeLogConfigs(namespace string) RealtimeLogConfigNamespaceLister {
	return realtimeLogConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RealtimeLogConfigNamespaceLister helps list and get RealtimeLogConfigs.
// All objects returned here must be treated as read-only.
type RealtimeLogConfigNamespaceLister interface {
	// List lists all RealtimeLogConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RealtimeLogConfig, err error)
	// Get retrieves the RealtimeLogConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RealtimeLogConfig, error)
	RealtimeLogConfigNamespaceListerExpansion
}

// realtimeLogConfigNamespaceLister implements the RealtimeLogConfigNamespaceLister
// interface.
type realtimeLogConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RealtimeLogConfigs in the indexer for a given namespace.
func (s realtimeLogConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RealtimeLogConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RealtimeLogConfig))
	})
	return ret, err
}

// Get retrieves the RealtimeLogConfig from the indexer for a given namespace and name.
func (s realtimeLogConfigNamespaceLister) Get(name string) (*v1alpha1.RealtimeLogConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("realtimelogconfig"), name)
	}
	return obj.(*v1alpha1.RealtimeLogConfig), nil
}
