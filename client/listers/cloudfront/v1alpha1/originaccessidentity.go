/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudfront/v1alpha1"
)

// OriginAccessIdentityLister helps list OriginAccessIdentities.
// All objects returned here must be treated as read-only.
type OriginAccessIdentityLister interface {
	// List lists all OriginAccessIdentities in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OriginAccessIdentity, err error)
	// OriginAccessIdentities returns an object that can list and get OriginAccessIdentities.
	OriginAccessIdentities(namespace string) OriginAccessIdentityNamespaceLister
	OriginAccessIdentityListerExpansion
}

// originAccessIdentityLister implements the OriginAccessIdentityLister interface.
type originAccessIdentityLister struct {
	indexer cache.Indexer
}

// NewOriginAccessIdentityLister returns a new OriginAccessIdentityLister.
func NewOriginAccessIdentityLister(indexer cache.Indexer) OriginAccessIdentityLister {
	return &originAccessIdentityLister{indexer: indexer}
}

// List lists all OriginAccessIdentities in the indexer.
func (s *originAccessIdentityLister) List(selector labels.Selector) (ret []*v1alpha1.OriginAccessIdentity, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OriginAccessIdentity))
	})
	return ret, err
}

// OriginAccessIdentities returns an object that can list and get OriginAccessIdentities.
func (s *originAccessIdentityLister) OriginAccessIdentities(namespace string) OriginAccessIdentityNamespaceLister {
	return originAccessIdentityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OriginAccessIdentityNamespaceLister helps list and get OriginAccessIdentities.
// All objects returned here must be treated as read-only.
type OriginAccessIdentityNamespaceLister interface {
	// List lists all OriginAccessIdentities in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OriginAccessIdentity, err error)
	// Get retrieves the OriginAccessIdentity from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OriginAccessIdentity, error)
	OriginAccessIdentityNamespaceListerExpansion
}

// originAccessIdentityNamespaceLister implements the OriginAccessIdentityNamespaceLister
// interface.
type originAccessIdentityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OriginAccessIdentities in the indexer for a given namespace.
func (s originAccessIdentityNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OriginAccessIdentity, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OriginAccessIdentity))
	})
	return ret, err
}

// Get retrieves the OriginAccessIdentity from the indexer for a given namespace and name.
func (s originAccessIdentityNamespaceLister) Get(name string) (*v1alpha1.OriginAccessIdentity, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("originaccessidentity"), name)
	}
	return obj.(*v1alpha1.OriginAccessIdentity), nil
}
