/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudfront/v1alpha1"
)

// KeyGroupLister helps list KeyGroups.
// All objects returned here must be treated as read-only.
type KeyGroupLister interface {
	// List lists all KeyGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeyGroup, err error)
	// KeyGroups returns an object that can list and get KeyGroups.
	KeyGroups(namespace string) KeyGroupNamespaceLister
	KeyGroupListerExpansion
}

// keyGroupLister implements the KeyGroupLister interface.
type keyGroupLister struct {
	indexer cache.Indexer
}

// NewKeyGroupLister returns a new KeyGroupLister.
func NewKeyGroupLister(indexer cache.Indexer) KeyGroupLister {
	return &keyGroupLister{indexer: indexer}
}

// List lists all KeyGroups in the indexer.
func (s *keyGroupLister) List(selector labels.Selector) (ret []*v1alpha1.KeyGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyGroup))
	})
	return ret, err
}

// KeyGroups returns an object that can list and get KeyGroups.
func (s *keyGroupLister) KeyGroups(namespace string) KeyGroupNamespaceLister {
	return keyGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeyGroupNamespaceLister helps list and get KeyGroups.
// All objects returned here must be treated as read-only.
type KeyGroupNamespaceLister interface {
	// List lists all KeyGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeyGroup, err error)
	// Get retrieves the KeyGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KeyGroup, error)
	KeyGroupNamespaceListerExpansion
}

// keyGroupNamespaceLister implements the KeyGroupNamespaceLister
// interface.
type keyGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeyGroups in the indexer for a given namespace.
func (s keyGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KeyGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeyGroup))
	})
	return ret, err
}

// Get retrieves the KeyGroup from the indexer for a given namespace and name.
func (s keyGroupNamespaceLister) Get(name string) (*v1alpha1.KeyGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keygroup"), name)
	}
	return obj.(*v1alpha1.KeyGroup), nil
}
