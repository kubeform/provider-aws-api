/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudfront/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MonitoringSubscriptionLister helps list MonitoringSubscriptions.
// All objects returned here must be treated as read-only.
type MonitoringSubscriptionLister interface {
	// List lists all MonitoringSubscriptions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MonitoringSubscription, err error)
	// MonitoringSubscriptions returns an object that can list and get MonitoringSubscriptions.
	MonitoringSubscriptions(namespace string) MonitoringSubscriptionNamespaceLister
	MonitoringSubscriptionListerExpansion
}

// monitoringSubscriptionLister implements the MonitoringSubscriptionLister interface.
type monitoringSubscriptionLister struct {
	indexer cache.Indexer
}

// NewMonitoringSubscriptionLister returns a new MonitoringSubscriptionLister.
func NewMonitoringSubscriptionLister(indexer cache.Indexer) MonitoringSubscriptionLister {
	return &monitoringSubscriptionLister{indexer: indexer}
}

// List lists all MonitoringSubscriptions in the indexer.
func (s *monitoringSubscriptionLister) List(selector labels.Selector) (ret []*v1alpha1.MonitoringSubscription, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitoringSubscription))
	})
	return ret, err
}

// MonitoringSubscriptions returns an object that can list and get MonitoringSubscriptions.
func (s *monitoringSubscriptionLister) MonitoringSubscriptions(namespace string) MonitoringSubscriptionNamespaceLister {
	return monitoringSubscriptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MonitoringSubscriptionNamespaceLister helps list and get MonitoringSubscriptions.
// All objects returned here must be treated as read-only.
type MonitoringSubscriptionNamespaceLister interface {
	// List lists all MonitoringSubscriptions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MonitoringSubscription, err error)
	// Get retrieves the MonitoringSubscription from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MonitoringSubscription, error)
	MonitoringSubscriptionNamespaceListerExpansion
}

// monitoringSubscriptionNamespaceLister implements the MonitoringSubscriptionNamespaceLister
// interface.
type monitoringSubscriptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MonitoringSubscriptions in the indexer for a given namespace.
func (s monitoringSubscriptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MonitoringSubscription, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitoringSubscription))
	})
	return ret, err
}

// Get retrieves the MonitoringSubscription from the indexer for a given namespace and name.
func (s monitoringSubscriptionNamespaceLister) Get(name string) (*v1alpha1.MonitoringSubscription, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("monitoringsubscription"), name)
	}
	return obj.(*v1alpha1.MonitoringSubscription), nil
}
