/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/dx/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConnectionConfirmationLister helps list ConnectionConfirmations.
// All objects returned here must be treated as read-only.
type ConnectionConfirmationLister interface {
	// List lists all ConnectionConfirmations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectionConfirmation, err error)
	// ConnectionConfirmations returns an object that can list and get ConnectionConfirmations.
	ConnectionConfirmations(namespace string) ConnectionConfirmationNamespaceLister
	ConnectionConfirmationListerExpansion
}

// connectionConfirmationLister implements the ConnectionConfirmationLister interface.
type connectionConfirmationLister struct {
	indexer cache.Indexer
}

// NewConnectionConfirmationLister returns a new ConnectionConfirmationLister.
func NewConnectionConfirmationLister(indexer cache.Indexer) ConnectionConfirmationLister {
	return &connectionConfirmationLister{indexer: indexer}
}

// List lists all ConnectionConfirmations in the indexer.
func (s *connectionConfirmationLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectionConfirmation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectionConfirmation))
	})
	return ret, err
}

// ConnectionConfirmations returns an object that can list and get ConnectionConfirmations.
func (s *connectionConfirmationLister) ConnectionConfirmations(namespace string) ConnectionConfirmationNamespaceLister {
	return connectionConfirmationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConnectionConfirmationNamespaceLister helps list and get ConnectionConfirmations.
// All objects returned here must be treated as read-only.
type ConnectionConfirmationNamespaceLister interface {
	// List lists all ConnectionConfirmations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectionConfirmation, err error)
	// Get retrieves the ConnectionConfirmation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConnectionConfirmation, error)
	ConnectionConfirmationNamespaceListerExpansion
}

// connectionConfirmationNamespaceLister implements the ConnectionConfirmationNamespaceLister
// interface.
type connectionConfirmationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConnectionConfirmations in the indexer for a given namespace.
func (s connectionConfirmationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectionConfirmation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectionConfirmation))
	})
	return ret, err
}

// Get retrieves the ConnectionConfirmation from the indexer for a given namespace and name.
func (s connectionConfirmationNamespaceLister) Get(name string) (*v1alpha1.ConnectionConfirmation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("connectionconfirmation"), name)
	}
	return obj.(*v1alpha1.ConnectionConfirmation), nil
}
