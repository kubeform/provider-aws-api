/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/dx/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PublicVirtualInterfaceLister helps list PublicVirtualInterfaces.
// All objects returned here must be treated as read-only.
type PublicVirtualInterfaceLister interface {
	// List lists all PublicVirtualInterfaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PublicVirtualInterface, err error)
	// PublicVirtualInterfaces returns an object that can list and get PublicVirtualInterfaces.
	PublicVirtualInterfaces(namespace string) PublicVirtualInterfaceNamespaceLister
	PublicVirtualInterfaceListerExpansion
}

// publicVirtualInterfaceLister implements the PublicVirtualInterfaceLister interface.
type publicVirtualInterfaceLister struct {
	indexer cache.Indexer
}

// NewPublicVirtualInterfaceLister returns a new PublicVirtualInterfaceLister.
func NewPublicVirtualInterfaceLister(indexer cache.Indexer) PublicVirtualInterfaceLister {
	return &publicVirtualInterfaceLister{indexer: indexer}
}

// List lists all PublicVirtualInterfaces in the indexer.
func (s *publicVirtualInterfaceLister) List(selector labels.Selector) (ret []*v1alpha1.PublicVirtualInterface, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PublicVirtualInterface))
	})
	return ret, err
}

// PublicVirtualInterfaces returns an object that can list and get PublicVirtualInterfaces.
func (s *publicVirtualInterfaceLister) PublicVirtualInterfaces(namespace string) PublicVirtualInterfaceNamespaceLister {
	return publicVirtualInterfaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PublicVirtualInterfaceNamespaceLister helps list and get PublicVirtualInterfaces.
// All objects returned here must be treated as read-only.
type PublicVirtualInterfaceNamespaceLister interface {
	// List lists all PublicVirtualInterfaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PublicVirtualInterface, err error)
	// Get retrieves the PublicVirtualInterface from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PublicVirtualInterface, error)
	PublicVirtualInterfaceNamespaceListerExpansion
}

// publicVirtualInterfaceNamespaceLister implements the PublicVirtualInterfaceNamespaceLister
// interface.
type publicVirtualInterfaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PublicVirtualInterfaces in the indexer for a given namespace.
func (s publicVirtualInterfaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PublicVirtualInterface, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PublicVirtualInterface))
	})
	return ret, err
}

// Get retrieves the PublicVirtualInterface from the indexer for a given namespace and name.
func (s publicVirtualInterfaceNamespaceLister) Get(name string) (*v1alpha1.PublicVirtualInterface, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("publicvirtualinterface"), name)
	}
	return obj.(*v1alpha1.PublicVirtualInterface), nil
}
