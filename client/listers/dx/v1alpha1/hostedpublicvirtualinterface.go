/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/dx/v1alpha1"
)

// HostedPublicVirtualInterfaceLister helps list HostedPublicVirtualInterfaces.
// All objects returned here must be treated as read-only.
type HostedPublicVirtualInterfaceLister interface {
	// List lists all HostedPublicVirtualInterfaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostedPublicVirtualInterface, err error)
	// HostedPublicVirtualInterfaces returns an object that can list and get HostedPublicVirtualInterfaces.
	HostedPublicVirtualInterfaces(namespace string) HostedPublicVirtualInterfaceNamespaceLister
	HostedPublicVirtualInterfaceListerExpansion
}

// hostedPublicVirtualInterfaceLister implements the HostedPublicVirtualInterfaceLister interface.
type hostedPublicVirtualInterfaceLister struct {
	indexer cache.Indexer
}

// NewHostedPublicVirtualInterfaceLister returns a new HostedPublicVirtualInterfaceLister.
func NewHostedPublicVirtualInterfaceLister(indexer cache.Indexer) HostedPublicVirtualInterfaceLister {
	return &hostedPublicVirtualInterfaceLister{indexer: indexer}
}

// List lists all HostedPublicVirtualInterfaces in the indexer.
func (s *hostedPublicVirtualInterfaceLister) List(selector labels.Selector) (ret []*v1alpha1.HostedPublicVirtualInterface, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostedPublicVirtualInterface))
	})
	return ret, err
}

// HostedPublicVirtualInterfaces returns an object that can list and get HostedPublicVirtualInterfaces.
func (s *hostedPublicVirtualInterfaceLister) HostedPublicVirtualInterfaces(namespace string) HostedPublicVirtualInterfaceNamespaceLister {
	return hostedPublicVirtualInterfaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HostedPublicVirtualInterfaceNamespaceLister helps list and get HostedPublicVirtualInterfaces.
// All objects returned here must be treated as read-only.
type HostedPublicVirtualInterfaceNamespaceLister interface {
	// List lists all HostedPublicVirtualInterfaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostedPublicVirtualInterface, err error)
	// Get retrieves the HostedPublicVirtualInterface from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HostedPublicVirtualInterface, error)
	HostedPublicVirtualInterfaceNamespaceListerExpansion
}

// hostedPublicVirtualInterfaceNamespaceLister implements the HostedPublicVirtualInterfaceNamespaceLister
// interface.
type hostedPublicVirtualInterfaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HostedPublicVirtualInterfaces in the indexer for a given namespace.
func (s hostedPublicVirtualInterfaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HostedPublicVirtualInterface, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostedPublicVirtualInterface))
	})
	return ret, err
}

// Get retrieves the HostedPublicVirtualInterface from the indexer for a given namespace and name.
func (s hostedPublicVirtualInterfaceNamespaceLister) Get(name string) (*v1alpha1.HostedPublicVirtualInterface, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hostedpublicvirtualinterface"), name)
	}
	return obj.(*v1alpha1.HostedPublicVirtualInterface), nil
}
