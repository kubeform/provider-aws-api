/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/dx/v1alpha1"
)

// LagLister helps list Lags.
// All objects returned here must be treated as read-only.
type LagLister interface {
	// List lists all Lags in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Lag, err error)
	// Lags returns an object that can list and get Lags.
	Lags(namespace string) LagNamespaceLister
	LagListerExpansion
}

// lagLister implements the LagLister interface.
type lagLister struct {
	indexer cache.Indexer
}

// NewLagLister returns a new LagLister.
func NewLagLister(indexer cache.Indexer) LagLister {
	return &lagLister{indexer: indexer}
}

// List lists all Lags in the indexer.
func (s *lagLister) List(selector labels.Selector) (ret []*v1alpha1.Lag, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Lag))
	})
	return ret, err
}

// Lags returns an object that can list and get Lags.
func (s *lagLister) Lags(namespace string) LagNamespaceLister {
	return lagNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LagNamespaceLister helps list and get Lags.
// All objects returned here must be treated as read-only.
type LagNamespaceLister interface {
	// List lists all Lags in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Lag, err error)
	// Get retrieves the Lag from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Lag, error)
	LagNamespaceListerExpansion
}

// lagNamespaceLister implements the LagNamespaceLister
// interface.
type lagNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Lags in the indexer for a given namespace.
func (s lagNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Lag, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Lag))
	})
	return ret, err
}

// Get retrieves the Lag from the indexer for a given namespace and name.
func (s lagNamespaceLister) Get(name string) (*v1alpha1.Lag, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lag"), name)
	}
	return obj.(*v1alpha1.Lag), nil
}
