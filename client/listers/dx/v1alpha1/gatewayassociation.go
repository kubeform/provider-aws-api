/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/dx/v1alpha1"
)

// GatewayAssociationLister helps list GatewayAssociations.
// All objects returned here must be treated as read-only.
type GatewayAssociationLister interface {
	// List lists all GatewayAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayAssociation, err error)
	// GatewayAssociations returns an object that can list and get GatewayAssociations.
	GatewayAssociations(namespace string) GatewayAssociationNamespaceLister
	GatewayAssociationListerExpansion
}

// gatewayAssociationLister implements the GatewayAssociationLister interface.
type gatewayAssociationLister struct {
	indexer cache.Indexer
}

// NewGatewayAssociationLister returns a new GatewayAssociationLister.
func NewGatewayAssociationLister(indexer cache.Indexer) GatewayAssociationLister {
	return &gatewayAssociationLister{indexer: indexer}
}

// List lists all GatewayAssociations in the indexer.
func (s *gatewayAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayAssociation))
	})
	return ret, err
}

// GatewayAssociations returns an object that can list and get GatewayAssociations.
func (s *gatewayAssociationLister) GatewayAssociations(namespace string) GatewayAssociationNamespaceLister {
	return gatewayAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GatewayAssociationNamespaceLister helps list and get GatewayAssociations.
// All objects returned here must be treated as read-only.
type GatewayAssociationNamespaceLister interface {
	// List lists all GatewayAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayAssociation, err error)
	// Get retrieves the GatewayAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GatewayAssociation, error)
	GatewayAssociationNamespaceListerExpansion
}

// gatewayAssociationNamespaceLister implements the GatewayAssociationNamespaceLister
// interface.
type gatewayAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GatewayAssociations in the indexer for a given namespace.
func (s gatewayAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayAssociation))
	})
	return ret, err
}

// Get retrieves the GatewayAssociation from the indexer for a given namespace and name.
func (s gatewayAssociationNamespaceLister) Get(name string) (*v1alpha1.GatewayAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gatewayassociation"), name)
	}
	return obj.(*v1alpha1.GatewayAssociation), nil
}
