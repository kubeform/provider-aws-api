/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/dx/v1alpha1"
)

// HostedPrivateVirtualInterfaceLister helps list HostedPrivateVirtualInterfaces.
// All objects returned here must be treated as read-only.
type HostedPrivateVirtualInterfaceLister interface {
	// List lists all HostedPrivateVirtualInterfaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostedPrivateVirtualInterface, err error)
	// HostedPrivateVirtualInterfaces returns an object that can list and get HostedPrivateVirtualInterfaces.
	HostedPrivateVirtualInterfaces(namespace string) HostedPrivateVirtualInterfaceNamespaceLister
	HostedPrivateVirtualInterfaceListerExpansion
}

// hostedPrivateVirtualInterfaceLister implements the HostedPrivateVirtualInterfaceLister interface.
type hostedPrivateVirtualInterfaceLister struct {
	indexer cache.Indexer
}

// NewHostedPrivateVirtualInterfaceLister returns a new HostedPrivateVirtualInterfaceLister.
func NewHostedPrivateVirtualInterfaceLister(indexer cache.Indexer) HostedPrivateVirtualInterfaceLister {
	return &hostedPrivateVirtualInterfaceLister{indexer: indexer}
}

// List lists all HostedPrivateVirtualInterfaces in the indexer.
func (s *hostedPrivateVirtualInterfaceLister) List(selector labels.Selector) (ret []*v1alpha1.HostedPrivateVirtualInterface, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostedPrivateVirtualInterface))
	})
	return ret, err
}

// HostedPrivateVirtualInterfaces returns an object that can list and get HostedPrivateVirtualInterfaces.
func (s *hostedPrivateVirtualInterfaceLister) HostedPrivateVirtualInterfaces(namespace string) HostedPrivateVirtualInterfaceNamespaceLister {
	return hostedPrivateVirtualInterfaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HostedPrivateVirtualInterfaceNamespaceLister helps list and get HostedPrivateVirtualInterfaces.
// All objects returned here must be treated as read-only.
type HostedPrivateVirtualInterfaceNamespaceLister interface {
	// List lists all HostedPrivateVirtualInterfaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostedPrivateVirtualInterface, err error)
	// Get retrieves the HostedPrivateVirtualInterface from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HostedPrivateVirtualInterface, error)
	HostedPrivateVirtualInterfaceNamespaceListerExpansion
}

// hostedPrivateVirtualInterfaceNamespaceLister implements the HostedPrivateVirtualInterfaceNamespaceLister
// interface.
type hostedPrivateVirtualInterfaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HostedPrivateVirtualInterfaces in the indexer for a given namespace.
func (s hostedPrivateVirtualInterfaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HostedPrivateVirtualInterface, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostedPrivateVirtualInterface))
	})
	return ret, err
}

// Get retrieves the HostedPrivateVirtualInterface from the indexer for a given namespace and name.
func (s hostedPrivateVirtualInterfaceNamespaceLister) Get(name string) (*v1alpha1.HostedPrivateVirtualInterface, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hostedprivatevirtualinterface"), name)
	}
	return obj.(*v1alpha1.HostedPrivateVirtualInterface), nil
}
