/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/dx/v1alpha1"
)

// GatewayAssociationProposalLister helps list GatewayAssociationProposals.
// All objects returned here must be treated as read-only.
type GatewayAssociationProposalLister interface {
	// List lists all GatewayAssociationProposals in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayAssociationProposal, err error)
	// GatewayAssociationProposals returns an object that can list and get GatewayAssociationProposals.
	GatewayAssociationProposals(namespace string) GatewayAssociationProposalNamespaceLister
	GatewayAssociationProposalListerExpansion
}

// gatewayAssociationProposalLister implements the GatewayAssociationProposalLister interface.
type gatewayAssociationProposalLister struct {
	indexer cache.Indexer
}

// NewGatewayAssociationProposalLister returns a new GatewayAssociationProposalLister.
func NewGatewayAssociationProposalLister(indexer cache.Indexer) GatewayAssociationProposalLister {
	return &gatewayAssociationProposalLister{indexer: indexer}
}

// List lists all GatewayAssociationProposals in the indexer.
func (s *gatewayAssociationProposalLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayAssociationProposal, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayAssociationProposal))
	})
	return ret, err
}

// GatewayAssociationProposals returns an object that can list and get GatewayAssociationProposals.
func (s *gatewayAssociationProposalLister) GatewayAssociationProposals(namespace string) GatewayAssociationProposalNamespaceLister {
	return gatewayAssociationProposalNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GatewayAssociationProposalNamespaceLister helps list and get GatewayAssociationProposals.
// All objects returned here must be treated as read-only.
type GatewayAssociationProposalNamespaceLister interface {
	// List lists all GatewayAssociationProposals in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayAssociationProposal, err error)
	// Get retrieves the GatewayAssociationProposal from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GatewayAssociationProposal, error)
	GatewayAssociationProposalNamespaceListerExpansion
}

// gatewayAssociationProposalNamespaceLister implements the GatewayAssociationProposalNamespaceLister
// interface.
type gatewayAssociationProposalNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GatewayAssociationProposals in the indexer for a given namespace.
func (s gatewayAssociationProposalNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayAssociationProposal, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayAssociationProposal))
	})
	return ret, err
}

// Get retrieves the GatewayAssociationProposal from the indexer for a given namespace and name.
func (s gatewayAssociationProposalNamespaceLister) Get(name string) (*v1alpha1.GatewayAssociationProposal, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gatewayassociationproposal"), name)
	}
	return obj.(*v1alpha1.GatewayAssociationProposal), nil
}
