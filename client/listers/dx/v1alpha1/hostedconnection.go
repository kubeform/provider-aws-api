/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/dx/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HostedConnectionLister helps list HostedConnections.
// All objects returned here must be treated as read-only.
type HostedConnectionLister interface {
	// List lists all HostedConnections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostedConnection, err error)
	// HostedConnections returns an object that can list and get HostedConnections.
	HostedConnections(namespace string) HostedConnectionNamespaceLister
	HostedConnectionListerExpansion
}

// hostedConnectionLister implements the HostedConnectionLister interface.
type hostedConnectionLister struct {
	indexer cache.Indexer
}

// NewHostedConnectionLister returns a new HostedConnectionLister.
func NewHostedConnectionLister(indexer cache.Indexer) HostedConnectionLister {
	return &hostedConnectionLister{indexer: indexer}
}

// List lists all HostedConnections in the indexer.
func (s *hostedConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.HostedConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostedConnection))
	})
	return ret, err
}

// HostedConnections returns an object that can list and get HostedConnections.
func (s *hostedConnectionLister) HostedConnections(namespace string) HostedConnectionNamespaceLister {
	return hostedConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HostedConnectionNamespaceLister helps list and get HostedConnections.
// All objects returned here must be treated as read-only.
type HostedConnectionNamespaceLister interface {
	// List lists all HostedConnections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostedConnection, err error)
	// Get retrieves the HostedConnection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HostedConnection, error)
	HostedConnectionNamespaceListerExpansion
}

// hostedConnectionNamespaceLister implements the HostedConnectionNamespaceLister
// interface.
type hostedConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HostedConnections in the indexer for a given namespace.
func (s hostedConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HostedConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostedConnection))
	})
	return ret, err
}

// Get retrieves the HostedConnection from the indexer for a given namespace and name.
func (s hostedConnectionNamespaceLister) Get(name string) (*v1alpha1.HostedConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hostedconnection"), name)
	}
	return obj.(*v1alpha1.HostedConnection), nil
}
