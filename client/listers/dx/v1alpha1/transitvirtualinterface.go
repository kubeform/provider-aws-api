/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/dx/v1alpha1"
)

// TransitVirtualInterfaceLister helps list TransitVirtualInterfaces.
// All objects returned here must be treated as read-only.
type TransitVirtualInterfaceLister interface {
	// List lists all TransitVirtualInterfaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TransitVirtualInterface, err error)
	// TransitVirtualInterfaces returns an object that can list and get TransitVirtualInterfaces.
	TransitVirtualInterfaces(namespace string) TransitVirtualInterfaceNamespaceLister
	TransitVirtualInterfaceListerExpansion
}

// transitVirtualInterfaceLister implements the TransitVirtualInterfaceLister interface.
type transitVirtualInterfaceLister struct {
	indexer cache.Indexer
}

// NewTransitVirtualInterfaceLister returns a new TransitVirtualInterfaceLister.
func NewTransitVirtualInterfaceLister(indexer cache.Indexer) TransitVirtualInterfaceLister {
	return &transitVirtualInterfaceLister{indexer: indexer}
}

// List lists all TransitVirtualInterfaces in the indexer.
func (s *transitVirtualInterfaceLister) List(selector labels.Selector) (ret []*v1alpha1.TransitVirtualInterface, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransitVirtualInterface))
	})
	return ret, err
}

// TransitVirtualInterfaces returns an object that can list and get TransitVirtualInterfaces.
func (s *transitVirtualInterfaceLister) TransitVirtualInterfaces(namespace string) TransitVirtualInterfaceNamespaceLister {
	return transitVirtualInterfaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TransitVirtualInterfaceNamespaceLister helps list and get TransitVirtualInterfaces.
// All objects returned here must be treated as read-only.
type TransitVirtualInterfaceNamespaceLister interface {
	// List lists all TransitVirtualInterfaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TransitVirtualInterface, err error)
	// Get retrieves the TransitVirtualInterface from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TransitVirtualInterface, error)
	TransitVirtualInterfaceNamespaceListerExpansion
}

// transitVirtualInterfaceNamespaceLister implements the TransitVirtualInterfaceNamespaceLister
// interface.
type transitVirtualInterfaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TransitVirtualInterfaces in the indexer for a given namespace.
func (s transitVirtualInterfaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TransitVirtualInterface, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TransitVirtualInterface))
	})
	return ret, err
}

// Get retrieves the TransitVirtualInterface from the indexer for a given namespace and name.
func (s transitVirtualInterfaceNamespaceLister) Get(name string) (*v1alpha1.TransitVirtualInterface, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("transitvirtualinterface"), name)
	}
	return obj.(*v1alpha1.TransitVirtualInterface), nil
}
