/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloud9/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EnvironmentMembershipLister helps list EnvironmentMemberships.
// All objects returned here must be treated as read-only.
type EnvironmentMembershipLister interface {
	// List lists all EnvironmentMemberships in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnvironmentMembership, err error)
	// EnvironmentMemberships returns an object that can list and get EnvironmentMemberships.
	EnvironmentMemberships(namespace string) EnvironmentMembershipNamespaceLister
	EnvironmentMembershipListerExpansion
}

// environmentMembershipLister implements the EnvironmentMembershipLister interface.
type environmentMembershipLister struct {
	indexer cache.Indexer
}

// NewEnvironmentMembershipLister returns a new EnvironmentMembershipLister.
func NewEnvironmentMembershipLister(indexer cache.Indexer) EnvironmentMembershipLister {
	return &environmentMembershipLister{indexer: indexer}
}

// List lists all EnvironmentMemberships in the indexer.
func (s *environmentMembershipLister) List(selector labels.Selector) (ret []*v1alpha1.EnvironmentMembership, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnvironmentMembership))
	})
	return ret, err
}

// EnvironmentMemberships returns an object that can list and get EnvironmentMemberships.
func (s *environmentMembershipLister) EnvironmentMemberships(namespace string) EnvironmentMembershipNamespaceLister {
	return environmentMembershipNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EnvironmentMembershipNamespaceLister helps list and get EnvironmentMemberships.
// All objects returned here must be treated as read-only.
type EnvironmentMembershipNamespaceLister interface {
	// List lists all EnvironmentMemberships in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnvironmentMembership, err error)
	// Get retrieves the EnvironmentMembership from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EnvironmentMembership, error)
	EnvironmentMembershipNamespaceListerExpansion
}

// environmentMembershipNamespaceLister implements the EnvironmentMembershipNamespaceLister
// interface.
type environmentMembershipNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EnvironmentMemberships in the indexer for a given namespace.
func (s environmentMembershipNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EnvironmentMembership, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnvironmentMembership))
	})
	return ret, err
}

// Get retrieves the EnvironmentMembership from the indexer for a given namespace and name.
func (s environmentMembershipNamespaceLister) Get(name string) (*v1alpha1.EnvironmentMembership, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("environmentmembership"), name)
	}
	return obj.(*v1alpha1.EnvironmentMembership), nil
}
