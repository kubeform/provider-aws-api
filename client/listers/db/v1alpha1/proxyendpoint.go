/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/db/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProxyEndpointLister helps list ProxyEndpoints.
// All objects returned here must be treated as read-only.
type ProxyEndpointLister interface {
	// List lists all ProxyEndpoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProxyEndpoint, err error)
	// ProxyEndpoints returns an object that can list and get ProxyEndpoints.
	ProxyEndpoints(namespace string) ProxyEndpointNamespaceLister
	ProxyEndpointListerExpansion
}

// proxyEndpointLister implements the ProxyEndpointLister interface.
type proxyEndpointLister struct {
	indexer cache.Indexer
}

// NewProxyEndpointLister returns a new ProxyEndpointLister.
func NewProxyEndpointLister(indexer cache.Indexer) ProxyEndpointLister {
	return &proxyEndpointLister{indexer: indexer}
}

// List lists all ProxyEndpoints in the indexer.
func (s *proxyEndpointLister) List(selector labels.Selector) (ret []*v1alpha1.ProxyEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProxyEndpoint))
	})
	return ret, err
}

// ProxyEndpoints returns an object that can list and get ProxyEndpoints.
func (s *proxyEndpointLister) ProxyEndpoints(namespace string) ProxyEndpointNamespaceLister {
	return proxyEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProxyEndpointNamespaceLister helps list and get ProxyEndpoints.
// All objects returned here must be treated as read-only.
type ProxyEndpointNamespaceLister interface {
	// List lists all ProxyEndpoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProxyEndpoint, err error)
	// Get retrieves the ProxyEndpoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProxyEndpoint, error)
	ProxyEndpointNamespaceListerExpansion
}

// proxyEndpointNamespaceLister implements the ProxyEndpointNamespaceLister
// interface.
type proxyEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProxyEndpoints in the indexer for a given namespace.
func (s proxyEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProxyEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProxyEndpoint))
	})
	return ret, err
}

// Get retrieves the ProxyEndpoint from the indexer for a given namespace and name.
func (s proxyEndpointNamespaceLister) Get(name string) (*v1alpha1.ProxyEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("proxyendpoint"), name)
	}
	return obj.(*v1alpha1.ProxyEndpoint), nil
}
