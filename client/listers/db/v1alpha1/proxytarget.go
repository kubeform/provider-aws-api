/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/db/v1alpha1"
)

// ProxyTargetLister helps list ProxyTargets.
// All objects returned here must be treated as read-only.
type ProxyTargetLister interface {
	// List lists all ProxyTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProxyTarget, err error)
	// ProxyTargets returns an object that can list and get ProxyTargets.
	ProxyTargets(namespace string) ProxyTargetNamespaceLister
	ProxyTargetListerExpansion
}

// proxyTargetLister implements the ProxyTargetLister interface.
type proxyTargetLister struct {
	indexer cache.Indexer
}

// NewProxyTargetLister returns a new ProxyTargetLister.
func NewProxyTargetLister(indexer cache.Indexer) ProxyTargetLister {
	return &proxyTargetLister{indexer: indexer}
}

// List lists all ProxyTargets in the indexer.
func (s *proxyTargetLister) List(selector labels.Selector) (ret []*v1alpha1.ProxyTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProxyTarget))
	})
	return ret, err
}

// ProxyTargets returns an object that can list and get ProxyTargets.
func (s *proxyTargetLister) ProxyTargets(namespace string) ProxyTargetNamespaceLister {
	return proxyTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProxyTargetNamespaceLister helps list and get ProxyTargets.
// All objects returned here must be treated as read-only.
type ProxyTargetNamespaceLister interface {
	// List lists all ProxyTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProxyTarget, err error)
	// Get retrieves the ProxyTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProxyTarget, error)
	ProxyTargetNamespaceListerExpansion
}

// proxyTargetNamespaceLister implements the ProxyTargetNamespaceLister
// interface.
type proxyTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProxyTargets in the indexer for a given namespace.
func (s proxyTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProxyTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProxyTarget))
	})
	return ret, err
}

// Get retrieves the ProxyTarget from the indexer for a given namespace and name.
func (s proxyTargetNamespaceLister) Get(name string) (*v1alpha1.ProxyTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("proxytarget"), name)
	}
	return obj.(*v1alpha1.ProxyTarget), nil
}
