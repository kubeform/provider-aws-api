/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/macie/v1alpha1"
)

// MemberAccountAssociationLister helps list MemberAccountAssociations.
// All objects returned here must be treated as read-only.
type MemberAccountAssociationLister interface {
	// List lists all MemberAccountAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MemberAccountAssociation, err error)
	// MemberAccountAssociations returns an object that can list and get MemberAccountAssociations.
	MemberAccountAssociations(namespace string) MemberAccountAssociationNamespaceLister
	MemberAccountAssociationListerExpansion
}

// memberAccountAssociationLister implements the MemberAccountAssociationLister interface.
type memberAccountAssociationLister struct {
	indexer cache.Indexer
}

// NewMemberAccountAssociationLister returns a new MemberAccountAssociationLister.
func NewMemberAccountAssociationLister(indexer cache.Indexer) MemberAccountAssociationLister {
	return &memberAccountAssociationLister{indexer: indexer}
}

// List lists all MemberAccountAssociations in the indexer.
func (s *memberAccountAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.MemberAccountAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MemberAccountAssociation))
	})
	return ret, err
}

// MemberAccountAssociations returns an object that can list and get MemberAccountAssociations.
func (s *memberAccountAssociationLister) MemberAccountAssociations(namespace string) MemberAccountAssociationNamespaceLister {
	return memberAccountAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MemberAccountAssociationNamespaceLister helps list and get MemberAccountAssociations.
// All objects returned here must be treated as read-only.
type MemberAccountAssociationNamespaceLister interface {
	// List lists all MemberAccountAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MemberAccountAssociation, err error)
	// Get retrieves the MemberAccountAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MemberAccountAssociation, error)
	MemberAccountAssociationNamespaceListerExpansion
}

// memberAccountAssociationNamespaceLister implements the MemberAccountAssociationNamespaceLister
// interface.
type memberAccountAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MemberAccountAssociations in the indexer for a given namespace.
func (s memberAccountAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MemberAccountAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MemberAccountAssociation))
	})
	return ret, err
}

// Get retrieves the MemberAccountAssociation from the indexer for a given namespace and name.
func (s memberAccountAssociationNamespaceLister) Get(name string) (*v1alpha1.MemberAccountAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("memberaccountassociation"), name)
	}
	return obj.(*v1alpha1.MemberAccountAssociation), nil
}
