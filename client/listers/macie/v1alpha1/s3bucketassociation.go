/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/macie/v1alpha1"
)

// S3BucketAssociationLister helps list S3BucketAssociations.
// All objects returned here must be treated as read-only.
type S3BucketAssociationLister interface {
	// List lists all S3BucketAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.S3BucketAssociation, err error)
	// S3BucketAssociations returns an object that can list and get S3BucketAssociations.
	S3BucketAssociations(namespace string) S3BucketAssociationNamespaceLister
	S3BucketAssociationListerExpansion
}

// s3BucketAssociationLister implements the S3BucketAssociationLister interface.
type s3BucketAssociationLister struct {
	indexer cache.Indexer
}

// NewS3BucketAssociationLister returns a new S3BucketAssociationLister.
func NewS3BucketAssociationLister(indexer cache.Indexer) S3BucketAssociationLister {
	return &s3BucketAssociationLister{indexer: indexer}
}

// List lists all S3BucketAssociations in the indexer.
func (s *s3BucketAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.S3BucketAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.S3BucketAssociation))
	})
	return ret, err
}

// S3BucketAssociations returns an object that can list and get S3BucketAssociations.
func (s *s3BucketAssociationLister) S3BucketAssociations(namespace string) S3BucketAssociationNamespaceLister {
	return s3BucketAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// S3BucketAssociationNamespaceLister helps list and get S3BucketAssociations.
// All objects returned here must be treated as read-only.
type S3BucketAssociationNamespaceLister interface {
	// List lists all S3BucketAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.S3BucketAssociation, err error)
	// Get retrieves the S3BucketAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.S3BucketAssociation, error)
	S3BucketAssociationNamespaceListerExpansion
}

// s3BucketAssociationNamespaceLister implements the S3BucketAssociationNamespaceLister
// interface.
type s3BucketAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all S3BucketAssociations in the indexer for a given namespace.
func (s s3BucketAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.S3BucketAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.S3BucketAssociation))
	})
	return ret, err
}

// Get retrieves the S3BucketAssociation from the indexer for a given namespace and name.
func (s s3BucketAssociationNamespaceLister) Get(name string) (*v1alpha1.S3BucketAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("s3bucketassociation"), name)
	}
	return obj.(*v1alpha1.S3BucketAssociation), nil
}
