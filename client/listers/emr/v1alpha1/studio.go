/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/emr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StudioLister helps list Studios.
// All objects returned here must be treated as read-only.
type StudioLister interface {
	// List lists all Studios in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Studio, err error)
	// Studios returns an object that can list and get Studios.
	Studios(namespace string) StudioNamespaceLister
	StudioListerExpansion
}

// studioLister implements the StudioLister interface.
type studioLister struct {
	indexer cache.Indexer
}

// NewStudioLister returns a new StudioLister.
func NewStudioLister(indexer cache.Indexer) StudioLister {
	return &studioLister{indexer: indexer}
}

// List lists all Studios in the indexer.
func (s *studioLister) List(selector labels.Selector) (ret []*v1alpha1.Studio, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Studio))
	})
	return ret, err
}

// Studios returns an object that can list and get Studios.
func (s *studioLister) Studios(namespace string) StudioNamespaceLister {
	return studioNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StudioNamespaceLister helps list and get Studios.
// All objects returned here must be treated as read-only.
type StudioNamespaceLister interface {
	// List lists all Studios in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Studio, err error)
	// Get retrieves the Studio from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Studio, error)
	StudioNamespaceListerExpansion
}

// studioNamespaceLister implements the StudioNamespaceLister
// interface.
type studioNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Studios in the indexer for a given namespace.
func (s studioNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Studio, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Studio))
	})
	return ret, err
}

// Get retrieves the Studio from the indexer for a given namespace and name.
func (s studioNamespaceLister) Get(name string) (*v1alpha1.Studio, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("studio"), name)
	}
	return obj.(*v1alpha1.Studio), nil
}
