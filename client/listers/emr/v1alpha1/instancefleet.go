/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/emr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InstanceFleetLister helps list InstanceFleets.
// All objects returned here must be treated as read-only.
type InstanceFleetLister interface {
	// List lists all InstanceFleets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstanceFleet, err error)
	// InstanceFleets returns an object that can list and get InstanceFleets.
	InstanceFleets(namespace string) InstanceFleetNamespaceLister
	InstanceFleetListerExpansion
}

// instanceFleetLister implements the InstanceFleetLister interface.
type instanceFleetLister struct {
	indexer cache.Indexer
}

// NewInstanceFleetLister returns a new InstanceFleetLister.
func NewInstanceFleetLister(indexer cache.Indexer) InstanceFleetLister {
	return &instanceFleetLister{indexer: indexer}
}

// List lists all InstanceFleets in the indexer.
func (s *instanceFleetLister) List(selector labels.Selector) (ret []*v1alpha1.InstanceFleet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstanceFleet))
	})
	return ret, err
}

// InstanceFleets returns an object that can list and get InstanceFleets.
func (s *instanceFleetLister) InstanceFleets(namespace string) InstanceFleetNamespaceLister {
	return instanceFleetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InstanceFleetNamespaceLister helps list and get InstanceFleets.
// All objects returned here must be treated as read-only.
type InstanceFleetNamespaceLister interface {
	// List lists all InstanceFleets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstanceFleet, err error)
	// Get retrieves the InstanceFleet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InstanceFleet, error)
	InstanceFleetNamespaceListerExpansion
}

// instanceFleetNamespaceLister implements the InstanceFleetNamespaceLister
// interface.
type instanceFleetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InstanceFleets in the indexer for a given namespace.
func (s instanceFleetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InstanceFleet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstanceFleet))
	})
	return ret, err
}

// Get retrieves the InstanceFleet from the indexer for a given namespace and name.
func (s instanceFleetNamespaceLister) Get(name string) (*v1alpha1.InstanceFleet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("instancefleet"), name)
	}
	return obj.(*v1alpha1.InstanceFleet), nil
}
