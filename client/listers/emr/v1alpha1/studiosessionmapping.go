/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/emr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StudioSessionMappingLister helps list StudioSessionMappings.
// All objects returned here must be treated as read-only.
type StudioSessionMappingLister interface {
	// List lists all StudioSessionMappings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StudioSessionMapping, err error)
	// StudioSessionMappings returns an object that can list and get StudioSessionMappings.
	StudioSessionMappings(namespace string) StudioSessionMappingNamespaceLister
	StudioSessionMappingListerExpansion
}

// studioSessionMappingLister implements the StudioSessionMappingLister interface.
type studioSessionMappingLister struct {
	indexer cache.Indexer
}

// NewStudioSessionMappingLister returns a new StudioSessionMappingLister.
func NewStudioSessionMappingLister(indexer cache.Indexer) StudioSessionMappingLister {
	return &studioSessionMappingLister{indexer: indexer}
}

// List lists all StudioSessionMappings in the indexer.
func (s *studioSessionMappingLister) List(selector labels.Selector) (ret []*v1alpha1.StudioSessionMapping, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StudioSessionMapping))
	})
	return ret, err
}

// StudioSessionMappings returns an object that can list and get StudioSessionMappings.
func (s *studioSessionMappingLister) StudioSessionMappings(namespace string) StudioSessionMappingNamespaceLister {
	return studioSessionMappingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StudioSessionMappingNamespaceLister helps list and get StudioSessionMappings.
// All objects returned here must be treated as read-only.
type StudioSessionMappingNamespaceLister interface {
	// List lists all StudioSessionMappings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StudioSessionMapping, err error)
	// Get retrieves the StudioSessionMapping from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StudioSessionMapping, error)
	StudioSessionMappingNamespaceListerExpansion
}

// studioSessionMappingNamespaceLister implements the StudioSessionMappingNamespaceLister
// interface.
type studioSessionMappingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StudioSessionMappings in the indexer for a given namespace.
func (s studioSessionMappingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StudioSessionMapping, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StudioSessionMapping))
	})
	return ret, err
}

// Get retrieves the StudioSessionMapping from the indexer for a given namespace and name.
func (s studioSessionMappingNamespaceLister) Get(name string) (*v1alpha1.StudioSessionMapping, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("studiosessionmapping"), name)
	}
	return obj.(*v1alpha1.StudioSessionMapping), nil
}
