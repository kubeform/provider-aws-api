/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/emr/v1alpha1"
)

// ManagedScalingPolicyLister helps list ManagedScalingPolicies.
// All objects returned here must be treated as read-only.
type ManagedScalingPolicyLister interface {
	// List lists all ManagedScalingPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedScalingPolicy, err error)
	// ManagedScalingPolicies returns an object that can list and get ManagedScalingPolicies.
	ManagedScalingPolicies(namespace string) ManagedScalingPolicyNamespaceLister
	ManagedScalingPolicyListerExpansion
}

// managedScalingPolicyLister implements the ManagedScalingPolicyLister interface.
type managedScalingPolicyLister struct {
	indexer cache.Indexer
}

// NewManagedScalingPolicyLister returns a new ManagedScalingPolicyLister.
func NewManagedScalingPolicyLister(indexer cache.Indexer) ManagedScalingPolicyLister {
	return &managedScalingPolicyLister{indexer: indexer}
}

// List lists all ManagedScalingPolicies in the indexer.
func (s *managedScalingPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedScalingPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedScalingPolicy))
	})
	return ret, err
}

// ManagedScalingPolicies returns an object that can list and get ManagedScalingPolicies.
func (s *managedScalingPolicyLister) ManagedScalingPolicies(namespace string) ManagedScalingPolicyNamespaceLister {
	return managedScalingPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagedScalingPolicyNamespaceLister helps list and get ManagedScalingPolicies.
// All objects returned here must be treated as read-only.
type ManagedScalingPolicyNamespaceLister interface {
	// List lists all ManagedScalingPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedScalingPolicy, err error)
	// Get retrieves the ManagedScalingPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagedScalingPolicy, error)
	ManagedScalingPolicyNamespaceListerExpansion
}

// managedScalingPolicyNamespaceLister implements the ManagedScalingPolicyNamespaceLister
// interface.
type managedScalingPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagedScalingPolicies in the indexer for a given namespace.
func (s managedScalingPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedScalingPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedScalingPolicy))
	})
	return ret, err
}

// Get retrieves the ManagedScalingPolicy from the indexer for a given namespace and name.
func (s managedScalingPolicyNamespaceLister) Get(name string) (*v1alpha1.ManagedScalingPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managedscalingpolicy"), name)
	}
	return obj.(*v1alpha1.ManagedScalingPolicy), nil
}
