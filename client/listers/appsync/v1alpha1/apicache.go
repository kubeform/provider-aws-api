/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/appsync/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiCacheLister helps list ApiCaches.
// All objects returned here must be treated as read-only.
type ApiCacheLister interface {
	// List lists all ApiCaches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiCache, err error)
	// ApiCaches returns an object that can list and get ApiCaches.
	ApiCaches(namespace string) ApiCacheNamespaceLister
	ApiCacheListerExpansion
}

// apiCacheLister implements the ApiCacheLister interface.
type apiCacheLister struct {
	indexer cache.Indexer
}

// NewApiCacheLister returns a new ApiCacheLister.
func NewApiCacheLister(indexer cache.Indexer) ApiCacheLister {
	return &apiCacheLister{indexer: indexer}
}

// List lists all ApiCaches in the indexer.
func (s *apiCacheLister) List(selector labels.Selector) (ret []*v1alpha1.ApiCache, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiCache))
	})
	return ret, err
}

// ApiCaches returns an object that can list and get ApiCaches.
func (s *apiCacheLister) ApiCaches(namespace string) ApiCacheNamespaceLister {
	return apiCacheNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiCacheNamespaceLister helps list and get ApiCaches.
// All objects returned here must be treated as read-only.
type ApiCacheNamespaceLister interface {
	// List lists all ApiCaches in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiCache, err error)
	// Get retrieves the ApiCache from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApiCache, error)
	ApiCacheNamespaceListerExpansion
}

// apiCacheNamespaceLister implements the ApiCacheNamespaceLister
// interface.
type apiCacheNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiCaches in the indexer for a given namespace.
func (s apiCacheNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiCache, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiCache))
	})
	return ret, err
}

// Get retrieves the ApiCache from the indexer for a given namespace and name.
func (s apiCacheNamespaceLister) Get(name string) (*v1alpha1.ApiCache, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apicache"), name)
	}
	return obj.(*v1alpha1.ApiCache), nil
}
