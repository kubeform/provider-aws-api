/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/appsync/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DomainNameAPIAssociationLister helps list DomainNameAPIAssociations.
// All objects returned here must be treated as read-only.
type DomainNameAPIAssociationLister interface {
	// List lists all DomainNameAPIAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainNameAPIAssociation, err error)
	// DomainNameAPIAssociations returns an object that can list and get DomainNameAPIAssociations.
	DomainNameAPIAssociations(namespace string) DomainNameAPIAssociationNamespaceLister
	DomainNameAPIAssociationListerExpansion
}

// domainNameAPIAssociationLister implements the DomainNameAPIAssociationLister interface.
type domainNameAPIAssociationLister struct {
	indexer cache.Indexer
}

// NewDomainNameAPIAssociationLister returns a new DomainNameAPIAssociationLister.
func NewDomainNameAPIAssociationLister(indexer cache.Indexer) DomainNameAPIAssociationLister {
	return &domainNameAPIAssociationLister{indexer: indexer}
}

// List lists all DomainNameAPIAssociations in the indexer.
func (s *domainNameAPIAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.DomainNameAPIAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainNameAPIAssociation))
	})
	return ret, err
}

// DomainNameAPIAssociations returns an object that can list and get DomainNameAPIAssociations.
func (s *domainNameAPIAssociationLister) DomainNameAPIAssociations(namespace string) DomainNameAPIAssociationNamespaceLister {
	return domainNameAPIAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DomainNameAPIAssociationNamespaceLister helps list and get DomainNameAPIAssociations.
// All objects returned here must be treated as read-only.
type DomainNameAPIAssociationNamespaceLister interface {
	// List lists all DomainNameAPIAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainNameAPIAssociation, err error)
	// Get retrieves the DomainNameAPIAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DomainNameAPIAssociation, error)
	DomainNameAPIAssociationNamespaceListerExpansion
}

// domainNameAPIAssociationNamespaceLister implements the DomainNameAPIAssociationNamespaceLister
// interface.
type domainNameAPIAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DomainNameAPIAssociations in the indexer for a given namespace.
func (s domainNameAPIAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DomainNameAPIAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainNameAPIAssociation))
	})
	return ret, err
}

// Get retrieves the DomainNameAPIAssociation from the indexer for a given namespace and name.
func (s domainNameAPIAssociationNamespaceLister) Get(name string) (*v1alpha1.DomainNameAPIAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("domainnameapiassociation"), name)
	}
	return obj.(*v1alpha1.DomainNameAPIAssociation), nil
}
