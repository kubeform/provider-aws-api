/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudtrail/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EventDataStoreLister helps list EventDataStores.
// All objects returned here must be treated as read-only.
type EventDataStoreLister interface {
	// List lists all EventDataStores in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EventDataStore, err error)
	// EventDataStores returns an object that can list and get EventDataStores.
	EventDataStores(namespace string) EventDataStoreNamespaceLister
	EventDataStoreListerExpansion
}

// eventDataStoreLister implements the EventDataStoreLister interface.
type eventDataStoreLister struct {
	indexer cache.Indexer
}

// NewEventDataStoreLister returns a new EventDataStoreLister.
func NewEventDataStoreLister(indexer cache.Indexer) EventDataStoreLister {
	return &eventDataStoreLister{indexer: indexer}
}

// List lists all EventDataStores in the indexer.
func (s *eventDataStoreLister) List(selector labels.Selector) (ret []*v1alpha1.EventDataStore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventDataStore))
	})
	return ret, err
}

// EventDataStores returns an object that can list and get EventDataStores.
func (s *eventDataStoreLister) EventDataStores(namespace string) EventDataStoreNamespaceLister {
	return eventDataStoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventDataStoreNamespaceLister helps list and get EventDataStores.
// All objects returned here must be treated as read-only.
type EventDataStoreNamespaceLister interface {
	// List lists all EventDataStores in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EventDataStore, err error)
	// Get retrieves the EventDataStore from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EventDataStore, error)
	EventDataStoreNamespaceListerExpansion
}

// eventDataStoreNamespaceLister implements the EventDataStoreNamespaceLister
// interface.
type eventDataStoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EventDataStores in the indexer for a given namespace.
func (s eventDataStoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EventDataStore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventDataStore))
	})
	return ret, err
}

// Get retrieves the EventDataStore from the indexer for a given namespace and name.
func (s eventDataStoreNamespaceLister) Get(name string) (*v1alpha1.EventDataStore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eventdatastore"), name)
	}
	return obj.(*v1alpha1.EventDataStore), nil
}
