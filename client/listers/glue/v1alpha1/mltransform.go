/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/glue/v1alpha1"
)

// MlTransformLister helps list MlTransforms.
// All objects returned here must be treated as read-only.
type MlTransformLister interface {
	// List lists all MlTransforms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MlTransform, err error)
	// MlTransforms returns an object that can list and get MlTransforms.
	MlTransforms(namespace string) MlTransformNamespaceLister
	MlTransformListerExpansion
}

// mlTransformLister implements the MlTransformLister interface.
type mlTransformLister struct {
	indexer cache.Indexer
}

// NewMlTransformLister returns a new MlTransformLister.
func NewMlTransformLister(indexer cache.Indexer) MlTransformLister {
	return &mlTransformLister{indexer: indexer}
}

// List lists all MlTransforms in the indexer.
func (s *mlTransformLister) List(selector labels.Selector) (ret []*v1alpha1.MlTransform, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MlTransform))
	})
	return ret, err
}

// MlTransforms returns an object that can list and get MlTransforms.
func (s *mlTransformLister) MlTransforms(namespace string) MlTransformNamespaceLister {
	return mlTransformNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MlTransformNamespaceLister helps list and get MlTransforms.
// All objects returned here must be treated as read-only.
type MlTransformNamespaceLister interface {
	// List lists all MlTransforms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MlTransform, err error)
	// Get retrieves the MlTransform from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MlTransform, error)
	MlTransformNamespaceListerExpansion
}

// mlTransformNamespaceLister implements the MlTransformNamespaceLister
// interface.
type mlTransformNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MlTransforms in the indexer for a given namespace.
func (s mlTransformNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MlTransform, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MlTransform))
	})
	return ret, err
}

// Get retrieves the MlTransform from the indexer for a given namespace and name.
func (s mlTransformNamespaceLister) Get(name string) (*v1alpha1.MlTransform, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mltransform"), name)
	}
	return obj.(*v1alpha1.MlTransform), nil
}
