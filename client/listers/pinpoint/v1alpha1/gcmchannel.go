/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/pinpoint/v1alpha1"
)

// GcmChannelLister helps list GcmChannels.
// All objects returned here must be treated as read-only.
type GcmChannelLister interface {
	// List lists all GcmChannels in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GcmChannel, err error)
	// GcmChannels returns an object that can list and get GcmChannels.
	GcmChannels(namespace string) GcmChannelNamespaceLister
	GcmChannelListerExpansion
}

// gcmChannelLister implements the GcmChannelLister interface.
type gcmChannelLister struct {
	indexer cache.Indexer
}

// NewGcmChannelLister returns a new GcmChannelLister.
func NewGcmChannelLister(indexer cache.Indexer) GcmChannelLister {
	return &gcmChannelLister{indexer: indexer}
}

// List lists all GcmChannels in the indexer.
func (s *gcmChannelLister) List(selector labels.Selector) (ret []*v1alpha1.GcmChannel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GcmChannel))
	})
	return ret, err
}

// GcmChannels returns an object that can list and get GcmChannels.
func (s *gcmChannelLister) GcmChannels(namespace string) GcmChannelNamespaceLister {
	return gcmChannelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GcmChannelNamespaceLister helps list and get GcmChannels.
// All objects returned here must be treated as read-only.
type GcmChannelNamespaceLister interface {
	// List lists all GcmChannels in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GcmChannel, err error)
	// Get retrieves the GcmChannel from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GcmChannel, error)
	GcmChannelNamespaceListerExpansion
}

// gcmChannelNamespaceLister implements the GcmChannelNamespaceLister
// interface.
type gcmChannelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GcmChannels in the indexer for a given namespace.
func (s gcmChannelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GcmChannel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GcmChannel))
	})
	return ret, err
}

// Get retrieves the GcmChannel from the indexer for a given namespace and name.
func (s gcmChannelNamespaceLister) Get(name string) (*v1alpha1.GcmChannel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gcmchannel"), name)
	}
	return obj.(*v1alpha1.GcmChannel), nil
}
