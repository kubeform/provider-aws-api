/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/amplify/v1alpha1"
)

// BackendEnvironmentLister helps list BackendEnvironments.
// All objects returned here must be treated as read-only.
type BackendEnvironmentLister interface {
	// List lists all BackendEnvironments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackendEnvironment, err error)
	// BackendEnvironments returns an object that can list and get BackendEnvironments.
	BackendEnvironments(namespace string) BackendEnvironmentNamespaceLister
	BackendEnvironmentListerExpansion
}

// backendEnvironmentLister implements the BackendEnvironmentLister interface.
type backendEnvironmentLister struct {
	indexer cache.Indexer
}

// NewBackendEnvironmentLister returns a new BackendEnvironmentLister.
func NewBackendEnvironmentLister(indexer cache.Indexer) BackendEnvironmentLister {
	return &backendEnvironmentLister{indexer: indexer}
}

// List lists all BackendEnvironments in the indexer.
func (s *backendEnvironmentLister) List(selector labels.Selector) (ret []*v1alpha1.BackendEnvironment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackendEnvironment))
	})
	return ret, err
}

// BackendEnvironments returns an object that can list and get BackendEnvironments.
func (s *backendEnvironmentLister) BackendEnvironments(namespace string) BackendEnvironmentNamespaceLister {
	return backendEnvironmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackendEnvironmentNamespaceLister helps list and get BackendEnvironments.
// All objects returned here must be treated as read-only.
type BackendEnvironmentNamespaceLister interface {
	// List lists all BackendEnvironments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackendEnvironment, err error)
	// Get retrieves the BackendEnvironment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BackendEnvironment, error)
	BackendEnvironmentNamespaceListerExpansion
}

// backendEnvironmentNamespaceLister implements the BackendEnvironmentNamespaceLister
// interface.
type backendEnvironmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackendEnvironments in the indexer for a given namespace.
func (s backendEnvironmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackendEnvironment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackendEnvironment))
	})
	return ret, err
}

// Get retrieves the BackendEnvironment from the indexer for a given namespace and name.
func (s backendEnvironmentNamespaceLister) Get(name string) (*v1alpha1.BackendEnvironment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backendenvironment"), name)
	}
	return obj.(*v1alpha1.BackendEnvironment), nil
}
