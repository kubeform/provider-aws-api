/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/securityhub/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OrganizationConfigurationLister helps list OrganizationConfigurations.
// All objects returned here must be treated as read-only.
type OrganizationConfigurationLister interface {
	// List lists all OrganizationConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OrganizationConfiguration, err error)
	// OrganizationConfigurations returns an object that can list and get OrganizationConfigurations.
	OrganizationConfigurations(namespace string) OrganizationConfigurationNamespaceLister
	OrganizationConfigurationListerExpansion
}

// organizationConfigurationLister implements the OrganizationConfigurationLister interface.
type organizationConfigurationLister struct {
	indexer cache.Indexer
}

// NewOrganizationConfigurationLister returns a new OrganizationConfigurationLister.
func NewOrganizationConfigurationLister(indexer cache.Indexer) OrganizationConfigurationLister {
	return &organizationConfigurationLister{indexer: indexer}
}

// List lists all OrganizationConfigurations in the indexer.
func (s *organizationConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.OrganizationConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OrganizationConfiguration))
	})
	return ret, err
}

// OrganizationConfigurations returns an object that can list and get OrganizationConfigurations.
func (s *organizationConfigurationLister) OrganizationConfigurations(namespace string) OrganizationConfigurationNamespaceLister {
	return organizationConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OrganizationConfigurationNamespaceLister helps list and get OrganizationConfigurations.
// All objects returned here must be treated as read-only.
type OrganizationConfigurationNamespaceLister interface {
	// List lists all OrganizationConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OrganizationConfiguration, err error)
	// Get retrieves the OrganizationConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OrganizationConfiguration, error)
	OrganizationConfigurationNamespaceListerExpansion
}

// organizationConfigurationNamespaceLister implements the OrganizationConfigurationNamespaceLister
// interface.
type organizationConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OrganizationConfigurations in the indexer for a given namespace.
func (s organizationConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OrganizationConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OrganizationConfiguration))
	})
	return ret, err
}

// Get retrieves the OrganizationConfiguration from the indexer for a given namespace and name.
func (s organizationConfigurationNamespaceLister) Get(name string) (*v1alpha1.OrganizationConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("organizationconfiguration"), name)
	}
	return obj.(*v1alpha1.OrganizationConfiguration), nil
}
