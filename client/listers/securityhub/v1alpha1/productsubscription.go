/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/securityhub/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProductSubscriptionLister helps list ProductSubscriptions.
// All objects returned here must be treated as read-only.
type ProductSubscriptionLister interface {
	// List lists all ProductSubscriptions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProductSubscription, err error)
	// ProductSubscriptions returns an object that can list and get ProductSubscriptions.
	ProductSubscriptions(namespace string) ProductSubscriptionNamespaceLister
	ProductSubscriptionListerExpansion
}

// productSubscriptionLister implements the ProductSubscriptionLister interface.
type productSubscriptionLister struct {
	indexer cache.Indexer
}

// NewProductSubscriptionLister returns a new ProductSubscriptionLister.
func NewProductSubscriptionLister(indexer cache.Indexer) ProductSubscriptionLister {
	return &productSubscriptionLister{indexer: indexer}
}

// List lists all ProductSubscriptions in the indexer.
func (s *productSubscriptionLister) List(selector labels.Selector) (ret []*v1alpha1.ProductSubscription, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProductSubscription))
	})
	return ret, err
}

// ProductSubscriptions returns an object that can list and get ProductSubscriptions.
func (s *productSubscriptionLister) ProductSubscriptions(namespace string) ProductSubscriptionNamespaceLister {
	return productSubscriptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProductSubscriptionNamespaceLister helps list and get ProductSubscriptions.
// All objects returned here must be treated as read-only.
type ProductSubscriptionNamespaceLister interface {
	// List lists all ProductSubscriptions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProductSubscription, err error)
	// Get retrieves the ProductSubscription from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProductSubscription, error)
	ProductSubscriptionNamespaceListerExpansion
}

// productSubscriptionNamespaceLister implements the ProductSubscriptionNamespaceLister
// interface.
type productSubscriptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProductSubscriptions in the indexer for a given namespace.
func (s productSubscriptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProductSubscription, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProductSubscription))
	})
	return ret, err
}

// Get retrieves the ProductSubscription from the indexer for a given namespace and name.
func (s productSubscriptionNamespaceLister) Get(name string) (*v1alpha1.ProductSubscription, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("productsubscription"), name)
	}
	return obj.(*v1alpha1.ProductSubscription), nil
}
