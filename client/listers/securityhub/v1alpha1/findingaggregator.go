/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/securityhub/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FindingAggregatorLister helps list FindingAggregators.
// All objects returned here must be treated as read-only.
type FindingAggregatorLister interface {
	// List lists all FindingAggregators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FindingAggregator, err error)
	// FindingAggregators returns an object that can list and get FindingAggregators.
	FindingAggregators(namespace string) FindingAggregatorNamespaceLister
	FindingAggregatorListerExpansion
}

// findingAggregatorLister implements the FindingAggregatorLister interface.
type findingAggregatorLister struct {
	indexer cache.Indexer
}

// NewFindingAggregatorLister returns a new FindingAggregatorLister.
func NewFindingAggregatorLister(indexer cache.Indexer) FindingAggregatorLister {
	return &findingAggregatorLister{indexer: indexer}
}

// List lists all FindingAggregators in the indexer.
func (s *findingAggregatorLister) List(selector labels.Selector) (ret []*v1alpha1.FindingAggregator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FindingAggregator))
	})
	return ret, err
}

// FindingAggregators returns an object that can list and get FindingAggregators.
func (s *findingAggregatorLister) FindingAggregators(namespace string) FindingAggregatorNamespaceLister {
	return findingAggregatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FindingAggregatorNamespaceLister helps list and get FindingAggregators.
// All objects returned here must be treated as read-only.
type FindingAggregatorNamespaceLister interface {
	// List lists all FindingAggregators in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FindingAggregator, err error)
	// Get retrieves the FindingAggregator from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FindingAggregator, error)
	FindingAggregatorNamespaceListerExpansion
}

// findingAggregatorNamespaceLister implements the FindingAggregatorNamespaceLister
// interface.
type findingAggregatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FindingAggregators in the indexer for a given namespace.
func (s findingAggregatorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FindingAggregator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FindingAggregator))
	})
	return ret, err
}

// Get retrieves the FindingAggregator from the indexer for a given namespace and name.
func (s findingAggregatorNamespaceLister) Get(name string) (*v1alpha1.FindingAggregator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("findingaggregator"), name)
	}
	return obj.(*v1alpha1.FindingAggregator), nil
}
