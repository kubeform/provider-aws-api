/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/securityhub/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StandardsControlLister helps list StandardsControls.
// All objects returned here must be treated as read-only.
type StandardsControlLister interface {
	// List lists all StandardsControls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StandardsControl, err error)
	// StandardsControls returns an object that can list and get StandardsControls.
	StandardsControls(namespace string) StandardsControlNamespaceLister
	StandardsControlListerExpansion
}

// standardsControlLister implements the StandardsControlLister interface.
type standardsControlLister struct {
	indexer cache.Indexer
}

// NewStandardsControlLister returns a new StandardsControlLister.
func NewStandardsControlLister(indexer cache.Indexer) StandardsControlLister {
	return &standardsControlLister{indexer: indexer}
}

// List lists all StandardsControls in the indexer.
func (s *standardsControlLister) List(selector labels.Selector) (ret []*v1alpha1.StandardsControl, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StandardsControl))
	})
	return ret, err
}

// StandardsControls returns an object that can list and get StandardsControls.
func (s *standardsControlLister) StandardsControls(namespace string) StandardsControlNamespaceLister {
	return standardsControlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StandardsControlNamespaceLister helps list and get StandardsControls.
// All objects returned here must be treated as read-only.
type StandardsControlNamespaceLister interface {
	// List lists all StandardsControls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StandardsControl, err error)
	// Get retrieves the StandardsControl from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StandardsControl, error)
	StandardsControlNamespaceListerExpansion
}

// standardsControlNamespaceLister implements the StandardsControlNamespaceLister
// interface.
type standardsControlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StandardsControls in the indexer for a given namespace.
func (s standardsControlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StandardsControl, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StandardsControl))
	})
	return ret, err
}

// Get retrieves the StandardsControl from the indexer for a given namespace and name.
func (s standardsControlNamespaceLister) Get(name string) (*v1alpha1.StandardsControl, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("standardscontrol"), name)
	}
	return obj.(*v1alpha1.StandardsControl), nil
}
