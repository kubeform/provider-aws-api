/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/securityhub/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ActionTargetLister helps list ActionTargets.
// All objects returned here must be treated as read-only.
type ActionTargetLister interface {
	// List lists all ActionTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ActionTarget, err error)
	// ActionTargets returns an object that can list and get ActionTargets.
	ActionTargets(namespace string) ActionTargetNamespaceLister
	ActionTargetListerExpansion
}

// actionTargetLister implements the ActionTargetLister interface.
type actionTargetLister struct {
	indexer cache.Indexer
}

// NewActionTargetLister returns a new ActionTargetLister.
func NewActionTargetLister(indexer cache.Indexer) ActionTargetLister {
	return &actionTargetLister{indexer: indexer}
}

// List lists all ActionTargets in the indexer.
func (s *actionTargetLister) List(selector labels.Selector) (ret []*v1alpha1.ActionTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActionTarget))
	})
	return ret, err
}

// ActionTargets returns an object that can list and get ActionTargets.
func (s *actionTargetLister) ActionTargets(namespace string) ActionTargetNamespaceLister {
	return actionTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ActionTargetNamespaceLister helps list and get ActionTargets.
// All objects returned here must be treated as read-only.
type ActionTargetNamespaceLister interface {
	// List lists all ActionTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ActionTarget, err error)
	// Get retrieves the ActionTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ActionTarget, error)
	ActionTargetNamespaceListerExpansion
}

// actionTargetNamespaceLister implements the ActionTargetNamespaceLister
// interface.
type actionTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ActionTargets in the indexer for a given namespace.
func (s actionTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ActionTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActionTarget))
	})
	return ret, err
}

// Get retrieves the ActionTarget from the indexer for a given namespace and name.
func (s actionTargetNamespaceLister) Get(name string) (*v1alpha1.ActionTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("actiontarget"), name)
	}
	return obj.(*v1alpha1.ActionTarget), nil
}
