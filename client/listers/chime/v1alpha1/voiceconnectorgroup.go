/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/chime/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VoiceConnectorGroupLister helps list VoiceConnectorGroups.
// All objects returned here must be treated as read-only.
type VoiceConnectorGroupLister interface {
	// List lists all VoiceConnectorGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorGroup, err error)
	// VoiceConnectorGroups returns an object that can list and get VoiceConnectorGroups.
	VoiceConnectorGroups(namespace string) VoiceConnectorGroupNamespaceLister
	VoiceConnectorGroupListerExpansion
}

// voiceConnectorGroupLister implements the VoiceConnectorGroupLister interface.
type voiceConnectorGroupLister struct {
	indexer cache.Indexer
}

// NewVoiceConnectorGroupLister returns a new VoiceConnectorGroupLister.
func NewVoiceConnectorGroupLister(indexer cache.Indexer) VoiceConnectorGroupLister {
	return &voiceConnectorGroupLister{indexer: indexer}
}

// List lists all VoiceConnectorGroups in the indexer.
func (s *voiceConnectorGroupLister) List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VoiceConnectorGroup))
	})
	return ret, err
}

// VoiceConnectorGroups returns an object that can list and get VoiceConnectorGroups.
func (s *voiceConnectorGroupLister) VoiceConnectorGroups(namespace string) VoiceConnectorGroupNamespaceLister {
	return voiceConnectorGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VoiceConnectorGroupNamespaceLister helps list and get VoiceConnectorGroups.
// All objects returned here must be treated as read-only.
type VoiceConnectorGroupNamespaceLister interface {
	// List lists all VoiceConnectorGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorGroup, err error)
	// Get retrieves the VoiceConnectorGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VoiceConnectorGroup, error)
	VoiceConnectorGroupNamespaceListerExpansion
}

// voiceConnectorGroupNamespaceLister implements the VoiceConnectorGroupNamespaceLister
// interface.
type voiceConnectorGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VoiceConnectorGroups in the indexer for a given namespace.
func (s voiceConnectorGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VoiceConnectorGroup))
	})
	return ret, err
}

// Get retrieves the VoiceConnectorGroup from the indexer for a given namespace and name.
func (s voiceConnectorGroupNamespaceLister) Get(name string) (*v1alpha1.VoiceConnectorGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("voiceconnectorgroup"), name)
	}
	return obj.(*v1alpha1.VoiceConnectorGroup), nil
}
