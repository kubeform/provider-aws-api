/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/chime/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VoiceConnectorTerminationLister helps list VoiceConnectorTerminations.
// All objects returned here must be treated as read-only.
type VoiceConnectorTerminationLister interface {
	// List lists all VoiceConnectorTerminations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorTermination, err error)
	// VoiceConnectorTerminations returns an object that can list and get VoiceConnectorTerminations.
	VoiceConnectorTerminations(namespace string) VoiceConnectorTerminationNamespaceLister
	VoiceConnectorTerminationListerExpansion
}

// voiceConnectorTerminationLister implements the VoiceConnectorTerminationLister interface.
type voiceConnectorTerminationLister struct {
	indexer cache.Indexer
}

// NewVoiceConnectorTerminationLister returns a new VoiceConnectorTerminationLister.
func NewVoiceConnectorTerminationLister(indexer cache.Indexer) VoiceConnectorTerminationLister {
	return &voiceConnectorTerminationLister{indexer: indexer}
}

// List lists all VoiceConnectorTerminations in the indexer.
func (s *voiceConnectorTerminationLister) List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorTermination, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VoiceConnectorTermination))
	})
	return ret, err
}

// VoiceConnectorTerminations returns an object that can list and get VoiceConnectorTerminations.
func (s *voiceConnectorTerminationLister) VoiceConnectorTerminations(namespace string) VoiceConnectorTerminationNamespaceLister {
	return voiceConnectorTerminationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VoiceConnectorTerminationNamespaceLister helps list and get VoiceConnectorTerminations.
// All objects returned here must be treated as read-only.
type VoiceConnectorTerminationNamespaceLister interface {
	// List lists all VoiceConnectorTerminations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorTermination, err error)
	// Get retrieves the VoiceConnectorTermination from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VoiceConnectorTermination, error)
	VoiceConnectorTerminationNamespaceListerExpansion
}

// voiceConnectorTerminationNamespaceLister implements the VoiceConnectorTerminationNamespaceLister
// interface.
type voiceConnectorTerminationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VoiceConnectorTerminations in the indexer for a given namespace.
func (s voiceConnectorTerminationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorTermination, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VoiceConnectorTermination))
	})
	return ret, err
}

// Get retrieves the VoiceConnectorTermination from the indexer for a given namespace and name.
func (s voiceConnectorTerminationNamespaceLister) Get(name string) (*v1alpha1.VoiceConnectorTermination, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("voiceconnectortermination"), name)
	}
	return obj.(*v1alpha1.VoiceConnectorTermination), nil
}
