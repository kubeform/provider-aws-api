/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/chime/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VoiceConnectorLoggingLister helps list VoiceConnectorLoggings.
// All objects returned here must be treated as read-only.
type VoiceConnectorLoggingLister interface {
	// List lists all VoiceConnectorLoggings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorLogging, err error)
	// VoiceConnectorLoggings returns an object that can list and get VoiceConnectorLoggings.
	VoiceConnectorLoggings(namespace string) VoiceConnectorLoggingNamespaceLister
	VoiceConnectorLoggingListerExpansion
}

// voiceConnectorLoggingLister implements the VoiceConnectorLoggingLister interface.
type voiceConnectorLoggingLister struct {
	indexer cache.Indexer
}

// NewVoiceConnectorLoggingLister returns a new VoiceConnectorLoggingLister.
func NewVoiceConnectorLoggingLister(indexer cache.Indexer) VoiceConnectorLoggingLister {
	return &voiceConnectorLoggingLister{indexer: indexer}
}

// List lists all VoiceConnectorLoggings in the indexer.
func (s *voiceConnectorLoggingLister) List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorLogging, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VoiceConnectorLogging))
	})
	return ret, err
}

// VoiceConnectorLoggings returns an object that can list and get VoiceConnectorLoggings.
func (s *voiceConnectorLoggingLister) VoiceConnectorLoggings(namespace string) VoiceConnectorLoggingNamespaceLister {
	return voiceConnectorLoggingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VoiceConnectorLoggingNamespaceLister helps list and get VoiceConnectorLoggings.
// All objects returned here must be treated as read-only.
type VoiceConnectorLoggingNamespaceLister interface {
	// List lists all VoiceConnectorLoggings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorLogging, err error)
	// Get retrieves the VoiceConnectorLogging from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VoiceConnectorLogging, error)
	VoiceConnectorLoggingNamespaceListerExpansion
}

// voiceConnectorLoggingNamespaceLister implements the VoiceConnectorLoggingNamespaceLister
// interface.
type voiceConnectorLoggingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VoiceConnectorLoggings in the indexer for a given namespace.
func (s voiceConnectorLoggingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorLogging, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VoiceConnectorLogging))
	})
	return ret, err
}

// Get retrieves the VoiceConnectorLogging from the indexer for a given namespace and name.
func (s voiceConnectorLoggingNamespaceLister) Get(name string) (*v1alpha1.VoiceConnectorLogging, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("voiceconnectorlogging"), name)
	}
	return obj.(*v1alpha1.VoiceConnectorLogging), nil
}
