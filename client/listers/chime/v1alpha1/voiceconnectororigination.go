/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/chime/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VoiceConnectorOriginationLister helps list VoiceConnectorOriginations.
// All objects returned here must be treated as read-only.
type VoiceConnectorOriginationLister interface {
	// List lists all VoiceConnectorOriginations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorOrigination, err error)
	// VoiceConnectorOriginations returns an object that can list and get VoiceConnectorOriginations.
	VoiceConnectorOriginations(namespace string) VoiceConnectorOriginationNamespaceLister
	VoiceConnectorOriginationListerExpansion
}

// voiceConnectorOriginationLister implements the VoiceConnectorOriginationLister interface.
type voiceConnectorOriginationLister struct {
	indexer cache.Indexer
}

// NewVoiceConnectorOriginationLister returns a new VoiceConnectorOriginationLister.
func NewVoiceConnectorOriginationLister(indexer cache.Indexer) VoiceConnectorOriginationLister {
	return &voiceConnectorOriginationLister{indexer: indexer}
}

// List lists all VoiceConnectorOriginations in the indexer.
func (s *voiceConnectorOriginationLister) List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorOrigination, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VoiceConnectorOrigination))
	})
	return ret, err
}

// VoiceConnectorOriginations returns an object that can list and get VoiceConnectorOriginations.
func (s *voiceConnectorOriginationLister) VoiceConnectorOriginations(namespace string) VoiceConnectorOriginationNamespaceLister {
	return voiceConnectorOriginationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VoiceConnectorOriginationNamespaceLister helps list and get VoiceConnectorOriginations.
// All objects returned here must be treated as read-only.
type VoiceConnectorOriginationNamespaceLister interface {
	// List lists all VoiceConnectorOriginations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorOrigination, err error)
	// Get retrieves the VoiceConnectorOrigination from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VoiceConnectorOrigination, error)
	VoiceConnectorOriginationNamespaceListerExpansion
}

// voiceConnectorOriginationNamespaceLister implements the VoiceConnectorOriginationNamespaceLister
// interface.
type voiceConnectorOriginationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VoiceConnectorOriginations in the indexer for a given namespace.
func (s voiceConnectorOriginationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VoiceConnectorOrigination, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VoiceConnectorOrigination))
	})
	return ret, err
}

// Get retrieves the VoiceConnectorOrigination from the indexer for a given namespace and name.
func (s voiceConnectorOriginationNamespaceLister) Get(name string) (*v1alpha1.VoiceConnectorOrigination, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("voiceconnectororigination"), name)
	}
	return obj.(*v1alpha1.VoiceConnectorOrigination), nil
}
