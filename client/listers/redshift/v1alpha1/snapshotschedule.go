/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/redshift/v1alpha1"
)

// SnapshotScheduleLister helps list SnapshotSchedules.
// All objects returned here must be treated as read-only.
type SnapshotScheduleLister interface {
	// List lists all SnapshotSchedules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SnapshotSchedule, err error)
	// SnapshotSchedules returns an object that can list and get SnapshotSchedules.
	SnapshotSchedules(namespace string) SnapshotScheduleNamespaceLister
	SnapshotScheduleListerExpansion
}

// snapshotScheduleLister implements the SnapshotScheduleLister interface.
type snapshotScheduleLister struct {
	indexer cache.Indexer
}

// NewSnapshotScheduleLister returns a new SnapshotScheduleLister.
func NewSnapshotScheduleLister(indexer cache.Indexer) SnapshotScheduleLister {
	return &snapshotScheduleLister{indexer: indexer}
}

// List lists all SnapshotSchedules in the indexer.
func (s *snapshotScheduleLister) List(selector labels.Selector) (ret []*v1alpha1.SnapshotSchedule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SnapshotSchedule))
	})
	return ret, err
}

// SnapshotSchedules returns an object that can list and get SnapshotSchedules.
func (s *snapshotScheduleLister) SnapshotSchedules(namespace string) SnapshotScheduleNamespaceLister {
	return snapshotScheduleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SnapshotScheduleNamespaceLister helps list and get SnapshotSchedules.
// All objects returned here must be treated as read-only.
type SnapshotScheduleNamespaceLister interface {
	// List lists all SnapshotSchedules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SnapshotSchedule, err error)
	// Get retrieves the SnapshotSchedule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SnapshotSchedule, error)
	SnapshotScheduleNamespaceListerExpansion
}

// snapshotScheduleNamespaceLister implements the SnapshotScheduleNamespaceLister
// interface.
type snapshotScheduleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SnapshotSchedules in the indexer for a given namespace.
func (s snapshotScheduleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SnapshotSchedule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SnapshotSchedule))
	})
	return ret, err
}

// Get retrieves the SnapshotSchedule from the indexer for a given namespace and name.
func (s snapshotScheduleNamespaceLister) Get(name string) (*v1alpha1.SnapshotSchedule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("snapshotschedule"), name)
	}
	return obj.(*v1alpha1.SnapshotSchedule), nil
}
