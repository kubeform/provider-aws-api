/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/redshift/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SnapshotScheduleAssociationLister helps list SnapshotScheduleAssociations.
// All objects returned here must be treated as read-only.
type SnapshotScheduleAssociationLister interface {
	// List lists all SnapshotScheduleAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SnapshotScheduleAssociation, err error)
	// SnapshotScheduleAssociations returns an object that can list and get SnapshotScheduleAssociations.
	SnapshotScheduleAssociations(namespace string) SnapshotScheduleAssociationNamespaceLister
	SnapshotScheduleAssociationListerExpansion
}

// snapshotScheduleAssociationLister implements the SnapshotScheduleAssociationLister interface.
type snapshotScheduleAssociationLister struct {
	indexer cache.Indexer
}

// NewSnapshotScheduleAssociationLister returns a new SnapshotScheduleAssociationLister.
func NewSnapshotScheduleAssociationLister(indexer cache.Indexer) SnapshotScheduleAssociationLister {
	return &snapshotScheduleAssociationLister{indexer: indexer}
}

// List lists all SnapshotScheduleAssociations in the indexer.
func (s *snapshotScheduleAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.SnapshotScheduleAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SnapshotScheduleAssociation))
	})
	return ret, err
}

// SnapshotScheduleAssociations returns an object that can list and get SnapshotScheduleAssociations.
func (s *snapshotScheduleAssociationLister) SnapshotScheduleAssociations(namespace string) SnapshotScheduleAssociationNamespaceLister {
	return snapshotScheduleAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SnapshotScheduleAssociationNamespaceLister helps list and get SnapshotScheduleAssociations.
// All objects returned here must be treated as read-only.
type SnapshotScheduleAssociationNamespaceLister interface {
	// List lists all SnapshotScheduleAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SnapshotScheduleAssociation, err error)
	// Get retrieves the SnapshotScheduleAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SnapshotScheduleAssociation, error)
	SnapshotScheduleAssociationNamespaceListerExpansion
}

// snapshotScheduleAssociationNamespaceLister implements the SnapshotScheduleAssociationNamespaceLister
// interface.
type snapshotScheduleAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SnapshotScheduleAssociations in the indexer for a given namespace.
func (s snapshotScheduleAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SnapshotScheduleAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SnapshotScheduleAssociation))
	})
	return ret, err
}

// Get retrieves the SnapshotScheduleAssociation from the indexer for a given namespace and name.
func (s snapshotScheduleAssociationNamespaceLister) Get(name string) (*v1alpha1.SnapshotScheduleAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("snapshotscheduleassociation"), name)
	}
	return obj.(*v1alpha1.SnapshotScheduleAssociation), nil
}
