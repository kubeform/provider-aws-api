/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ami/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FromInstanceLister helps list FromInstances.
// All objects returned here must be treated as read-only.
type FromInstanceLister interface {
	// List lists all FromInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FromInstance, err error)
	// FromInstances returns an object that can list and get FromInstances.
	FromInstances(namespace string) FromInstanceNamespaceLister
	FromInstanceListerExpansion
}

// fromInstanceLister implements the FromInstanceLister interface.
type fromInstanceLister struct {
	indexer cache.Indexer
}

// NewFromInstanceLister returns a new FromInstanceLister.
func NewFromInstanceLister(indexer cache.Indexer) FromInstanceLister {
	return &fromInstanceLister{indexer: indexer}
}

// List lists all FromInstances in the indexer.
func (s *fromInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.FromInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FromInstance))
	})
	return ret, err
}

// FromInstances returns an object that can list and get FromInstances.
func (s *fromInstanceLister) FromInstances(namespace string) FromInstanceNamespaceLister {
	return fromInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FromInstanceNamespaceLister helps list and get FromInstances.
// All objects returned here must be treated as read-only.
type FromInstanceNamespaceLister interface {
	// List lists all FromInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FromInstance, err error)
	// Get retrieves the FromInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FromInstance, error)
	FromInstanceNamespaceListerExpansion
}

// fromInstanceNamespaceLister implements the FromInstanceNamespaceLister
// interface.
type fromInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FromInstances in the indexer for a given namespace.
func (s fromInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FromInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FromInstance))
	})
	return ret, err
}

// Get retrieves the FromInstance from the indexer for a given namespace and name.
func (s fromInstanceNamespaceLister) Get(name string) (*v1alpha1.FromInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("frominstance"), name)
	}
	return obj.(*v1alpha1.FromInstance), nil
}
