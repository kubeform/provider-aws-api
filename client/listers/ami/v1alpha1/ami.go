/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ami/v1alpha1"
)

// AmiLister helps list Amis.
// All objects returned here must be treated as read-only.
type AmiLister interface {
	// List lists all Amis in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ami, err error)
	// Amis returns an object that can list and get Amis.
	Amis(namespace string) AmiNamespaceLister
	AmiListerExpansion
}

// amiLister implements the AmiLister interface.
type amiLister struct {
	indexer cache.Indexer
}

// NewAmiLister returns a new AmiLister.
func NewAmiLister(indexer cache.Indexer) AmiLister {
	return &amiLister{indexer: indexer}
}

// List lists all Amis in the indexer.
func (s *amiLister) List(selector labels.Selector) (ret []*v1alpha1.Ami, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ami))
	})
	return ret, err
}

// Amis returns an object that can list and get Amis.
func (s *amiLister) Amis(namespace string) AmiNamespaceLister {
	return amiNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AmiNamespaceLister helps list and get Amis.
// All objects returned here must be treated as read-only.
type AmiNamespaceLister interface {
	// List lists all Amis in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ami, err error)
	// Get retrieves the Ami from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Ami, error)
	AmiNamespaceListerExpansion
}

// amiNamespaceLister implements the AmiNamespaceLister
// interface.
type amiNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Amis in the indexer for a given namespace.
func (s amiNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ami, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ami))
	})
	return ret, err
}

// Get retrieves the Ami from the indexer for a given namespace and name.
func (s amiNamespaceLister) Get(name string) (*v1alpha1.Ami, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ami"), name)
	}
	return obj.(*v1alpha1.Ami), nil
}
