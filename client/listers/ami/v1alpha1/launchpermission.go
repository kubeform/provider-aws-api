/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ami/v1alpha1"
)

// LaunchPermissionLister helps list LaunchPermissions.
// All objects returned here must be treated as read-only.
type LaunchPermissionLister interface {
	// List lists all LaunchPermissions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LaunchPermission, err error)
	// LaunchPermissions returns an object that can list and get LaunchPermissions.
	LaunchPermissions(namespace string) LaunchPermissionNamespaceLister
	LaunchPermissionListerExpansion
}

// launchPermissionLister implements the LaunchPermissionLister interface.
type launchPermissionLister struct {
	indexer cache.Indexer
}

// NewLaunchPermissionLister returns a new LaunchPermissionLister.
func NewLaunchPermissionLister(indexer cache.Indexer) LaunchPermissionLister {
	return &launchPermissionLister{indexer: indexer}
}

// List lists all LaunchPermissions in the indexer.
func (s *launchPermissionLister) List(selector labels.Selector) (ret []*v1alpha1.LaunchPermission, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LaunchPermission))
	})
	return ret, err
}

// LaunchPermissions returns an object that can list and get LaunchPermissions.
func (s *launchPermissionLister) LaunchPermissions(namespace string) LaunchPermissionNamespaceLister {
	return launchPermissionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LaunchPermissionNamespaceLister helps list and get LaunchPermissions.
// All objects returned here must be treated as read-only.
type LaunchPermissionNamespaceLister interface {
	// List lists all LaunchPermissions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LaunchPermission, err error)
	// Get retrieves the LaunchPermission from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LaunchPermission, error)
	LaunchPermissionNamespaceListerExpansion
}

// launchPermissionNamespaceLister implements the LaunchPermissionNamespaceLister
// interface.
type launchPermissionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LaunchPermissions in the indexer for a given namespace.
func (s launchPermissionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LaunchPermission, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LaunchPermission))
	})
	return ret, err
}

// Get retrieves the LaunchPermission from the indexer for a given namespace and name.
func (s launchPermissionNamespaceLister) Get(name string) (*v1alpha1.LaunchPermission, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("launchpermission"), name)
	}
	return obj.(*v1alpha1.LaunchPermission), nil
}
