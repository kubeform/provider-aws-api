/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/config/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RemediationConfigurationLister helps list RemediationConfigurations.
// All objects returned here must be treated as read-only.
type RemediationConfigurationLister interface {
	// List lists all RemediationConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RemediationConfiguration, err error)
	// RemediationConfigurations returns an object that can list and get RemediationConfigurations.
	RemediationConfigurations(namespace string) RemediationConfigurationNamespaceLister
	RemediationConfigurationListerExpansion
}

// remediationConfigurationLister implements the RemediationConfigurationLister interface.
type remediationConfigurationLister struct {
	indexer cache.Indexer
}

// NewRemediationConfigurationLister returns a new RemediationConfigurationLister.
func NewRemediationConfigurationLister(indexer cache.Indexer) RemediationConfigurationLister {
	return &remediationConfigurationLister{indexer: indexer}
}

// List lists all RemediationConfigurations in the indexer.
func (s *remediationConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.RemediationConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RemediationConfiguration))
	})
	return ret, err
}

// RemediationConfigurations returns an object that can list and get RemediationConfigurations.
func (s *remediationConfigurationLister) RemediationConfigurations(namespace string) RemediationConfigurationNamespaceLister {
	return remediationConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RemediationConfigurationNamespaceLister helps list and get RemediationConfigurations.
// All objects returned here must be treated as read-only.
type RemediationConfigurationNamespaceLister interface {
	// List lists all RemediationConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RemediationConfiguration, err error)
	// Get retrieves the RemediationConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RemediationConfiguration, error)
	RemediationConfigurationNamespaceListerExpansion
}

// remediationConfigurationNamespaceLister implements the RemediationConfigurationNamespaceLister
// interface.
type remediationConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RemediationConfigurations in the indexer for a given namespace.
func (s remediationConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RemediationConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RemediationConfiguration))
	})
	return ret, err
}

// Get retrieves the RemediationConfiguration from the indexer for a given namespace and name.
func (s remediationConfigurationNamespaceLister) Get(name string) (*v1alpha1.RemediationConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("remediationconfiguration"), name)
	}
	return obj.(*v1alpha1.RemediationConfiguration), nil
}
