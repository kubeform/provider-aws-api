/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/config/v1alpha1"
)

// AggregateAuthorizationLister helps list AggregateAuthorizations.
// All objects returned here must be treated as read-only.
type AggregateAuthorizationLister interface {
	// List lists all AggregateAuthorizations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AggregateAuthorization, err error)
	// AggregateAuthorizations returns an object that can list and get AggregateAuthorizations.
	AggregateAuthorizations(namespace string) AggregateAuthorizationNamespaceLister
	AggregateAuthorizationListerExpansion
}

// aggregateAuthorizationLister implements the AggregateAuthorizationLister interface.
type aggregateAuthorizationLister struct {
	indexer cache.Indexer
}

// NewAggregateAuthorizationLister returns a new AggregateAuthorizationLister.
func NewAggregateAuthorizationLister(indexer cache.Indexer) AggregateAuthorizationLister {
	return &aggregateAuthorizationLister{indexer: indexer}
}

// List lists all AggregateAuthorizations in the indexer.
func (s *aggregateAuthorizationLister) List(selector labels.Selector) (ret []*v1alpha1.AggregateAuthorization, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AggregateAuthorization))
	})
	return ret, err
}

// AggregateAuthorizations returns an object that can list and get AggregateAuthorizations.
func (s *aggregateAuthorizationLister) AggregateAuthorizations(namespace string) AggregateAuthorizationNamespaceLister {
	return aggregateAuthorizationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AggregateAuthorizationNamespaceLister helps list and get AggregateAuthorizations.
// All objects returned here must be treated as read-only.
type AggregateAuthorizationNamespaceLister interface {
	// List lists all AggregateAuthorizations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AggregateAuthorization, err error)
	// Get retrieves the AggregateAuthorization from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AggregateAuthorization, error)
	AggregateAuthorizationNamespaceListerExpansion
}

// aggregateAuthorizationNamespaceLister implements the AggregateAuthorizationNamespaceLister
// interface.
type aggregateAuthorizationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AggregateAuthorizations in the indexer for a given namespace.
func (s aggregateAuthorizationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AggregateAuthorization, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AggregateAuthorization))
	})
	return ret, err
}

// Get retrieves the AggregateAuthorization from the indexer for a given namespace and name.
func (s aggregateAuthorizationNamespaceLister) Get(name string) (*v1alpha1.AggregateAuthorization, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aggregateauthorization"), name)
	}
	return obj.(*v1alpha1.AggregateAuthorization), nil
}
