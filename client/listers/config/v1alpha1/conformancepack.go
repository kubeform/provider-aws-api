/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/config/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConformancePackLister helps list ConformancePacks.
// All objects returned here must be treated as read-only.
type ConformancePackLister interface {
	// List lists all ConformancePacks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConformancePack, err error)
	// ConformancePacks returns an object that can list and get ConformancePacks.
	ConformancePacks(namespace string) ConformancePackNamespaceLister
	ConformancePackListerExpansion
}

// conformancePackLister implements the ConformancePackLister interface.
type conformancePackLister struct {
	indexer cache.Indexer
}

// NewConformancePackLister returns a new ConformancePackLister.
func NewConformancePackLister(indexer cache.Indexer) ConformancePackLister {
	return &conformancePackLister{indexer: indexer}
}

// List lists all ConformancePacks in the indexer.
func (s *conformancePackLister) List(selector labels.Selector) (ret []*v1alpha1.ConformancePack, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConformancePack))
	})
	return ret, err
}

// ConformancePacks returns an object that can list and get ConformancePacks.
func (s *conformancePackLister) ConformancePacks(namespace string) ConformancePackNamespaceLister {
	return conformancePackNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConformancePackNamespaceLister helps list and get ConformancePacks.
// All objects returned here must be treated as read-only.
type ConformancePackNamespaceLister interface {
	// List lists all ConformancePacks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConformancePack, err error)
	// Get retrieves the ConformancePack from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConformancePack, error)
	ConformancePackNamespaceListerExpansion
}

// conformancePackNamespaceLister implements the ConformancePackNamespaceLister
// interface.
type conformancePackNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConformancePacks in the indexer for a given namespace.
func (s conformancePackNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConformancePack, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConformancePack))
	})
	return ret, err
}

// Get retrieves the ConformancePack from the indexer for a given namespace and name.
func (s conformancePackNamespaceLister) Get(name string) (*v1alpha1.ConformancePack, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("conformancepack"), name)
	}
	return obj.(*v1alpha1.ConformancePack), nil
}
