/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/config/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigurationRecorderStatus_Lister helps list ConfigurationRecorderStatus_s.
// All objects returned here must be treated as read-only.
type ConfigurationRecorderStatus_Lister interface {
	// List lists all ConfigurationRecorderStatus_s in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationRecorderStatus_, err error)
	// ConfigurationRecorderStatus_s returns an object that can list and get ConfigurationRecorderStatus_s.
	ConfigurationRecorderStatus_s(namespace string) ConfigurationRecorderStatus_NamespaceLister
	ConfigurationRecorderStatus_ListerExpansion
}

// configurationRecorderStatus_Lister implements the ConfigurationRecorderStatus_Lister interface.
type configurationRecorderStatus_Lister struct {
	indexer cache.Indexer
}

// NewConfigurationRecorderStatus_Lister returns a new ConfigurationRecorderStatus_Lister.
func NewConfigurationRecorderStatus_Lister(indexer cache.Indexer) ConfigurationRecorderStatus_Lister {
	return &configurationRecorderStatus_Lister{indexer: indexer}
}

// List lists all ConfigurationRecorderStatus_s in the indexer.
func (s *configurationRecorderStatus_Lister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationRecorderStatus_, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationRecorderStatus_))
	})
	return ret, err
}

// ConfigurationRecorderStatus_s returns an object that can list and get ConfigurationRecorderStatus_s.
func (s *configurationRecorderStatus_Lister) ConfigurationRecorderStatus_s(namespace string) ConfigurationRecorderStatus_NamespaceLister {
	return configurationRecorderStatus_NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigurationRecorderStatus_NamespaceLister helps list and get ConfigurationRecorderStatus_s.
// All objects returned here must be treated as read-only.
type ConfigurationRecorderStatus_NamespaceLister interface {
	// List lists all ConfigurationRecorderStatus_s in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationRecorderStatus_, err error)
	// Get retrieves the ConfigurationRecorderStatus_ from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfigurationRecorderStatus_, error)
	ConfigurationRecorderStatus_NamespaceListerExpansion
}

// configurationRecorderStatus_NamespaceLister implements the ConfigurationRecorderStatus_NamespaceLister
// interface.
type configurationRecorderStatus_NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigurationRecorderStatus_s in the indexer for a given namespace.
func (s configurationRecorderStatus_NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationRecorderStatus_, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationRecorderStatus_))
	})
	return ret, err
}

// Get retrieves the ConfigurationRecorderStatus_ from the indexer for a given namespace and name.
func (s configurationRecorderStatus_NamespaceLister) Get(name string) (*v1alpha1.ConfigurationRecorderStatus_, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configurationrecorderstatus_"), name)
	}
	return obj.(*v1alpha1.ConfigurationRecorderStatus_), nil
}
