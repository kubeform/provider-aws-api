/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/devicefarm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkProfileLister helps list NetworkProfiles.
// All objects returned here must be treated as read-only.
type NetworkProfileLister interface {
	// List lists all NetworkProfiles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkProfile, err error)
	// NetworkProfiles returns an object that can list and get NetworkProfiles.
	NetworkProfiles(namespace string) NetworkProfileNamespaceLister
	NetworkProfileListerExpansion
}

// networkProfileLister implements the NetworkProfileLister interface.
type networkProfileLister struct {
	indexer cache.Indexer
}

// NewNetworkProfileLister returns a new NetworkProfileLister.
func NewNetworkProfileLister(indexer cache.Indexer) NetworkProfileLister {
	return &networkProfileLister{indexer: indexer}
}

// List lists all NetworkProfiles in the indexer.
func (s *networkProfileLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkProfile))
	})
	return ret, err
}

// NetworkProfiles returns an object that can list and get NetworkProfiles.
func (s *networkProfileLister) NetworkProfiles(namespace string) NetworkProfileNamespaceLister {
	return networkProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkProfileNamespaceLister helps list and get NetworkProfiles.
// All objects returned here must be treated as read-only.
type NetworkProfileNamespaceLister interface {
	// List lists all NetworkProfiles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkProfile, err error)
	// Get retrieves the NetworkProfile from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetworkProfile, error)
	NetworkProfileNamespaceListerExpansion
}

// networkProfileNamespaceLister implements the NetworkProfileNamespaceLister
// interface.
type networkProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkProfiles in the indexer for a given namespace.
func (s networkProfileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkProfile))
	})
	return ret, err
}

// Get retrieves the NetworkProfile from the indexer for a given namespace and name.
func (s networkProfileNamespaceLister) Get(name string) (*v1alpha1.NetworkProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkprofile"), name)
	}
	return obj.(*v1alpha1.NetworkProfile), nil
}
