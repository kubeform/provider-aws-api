/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/connect/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RoutingProfileLister helps list RoutingProfiles.
// All objects returned here must be treated as read-only.
type RoutingProfileLister interface {
	// List lists all RoutingProfiles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RoutingProfile, err error)
	// RoutingProfiles returns an object that can list and get RoutingProfiles.
	RoutingProfiles(namespace string) RoutingProfileNamespaceLister
	RoutingProfileListerExpansion
}

// routingProfileLister implements the RoutingProfileLister interface.
type routingProfileLister struct {
	indexer cache.Indexer
}

// NewRoutingProfileLister returns a new RoutingProfileLister.
func NewRoutingProfileLister(indexer cache.Indexer) RoutingProfileLister {
	return &routingProfileLister{indexer: indexer}
}

// List lists all RoutingProfiles in the indexer.
func (s *routingProfileLister) List(selector labels.Selector) (ret []*v1alpha1.RoutingProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RoutingProfile))
	})
	return ret, err
}

// RoutingProfiles returns an object that can list and get RoutingProfiles.
func (s *routingProfileLister) RoutingProfiles(namespace string) RoutingProfileNamespaceLister {
	return routingProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RoutingProfileNamespaceLister helps list and get RoutingProfiles.
// All objects returned here must be treated as read-only.
type RoutingProfileNamespaceLister interface {
	// List lists all RoutingProfiles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RoutingProfile, err error)
	// Get retrieves the RoutingProfile from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RoutingProfile, error)
	RoutingProfileNamespaceListerExpansion
}

// routingProfileNamespaceLister implements the RoutingProfileNamespaceLister
// interface.
type routingProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RoutingProfiles in the indexer for a given namespace.
func (s routingProfileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RoutingProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RoutingProfile))
	})
	return ret, err
}

// Get retrieves the RoutingProfile from the indexer for a given namespace and name.
func (s routingProfileNamespaceLister) Get(name string) (*v1alpha1.RoutingProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("routingprofile"), name)
	}
	return obj.(*v1alpha1.RoutingProfile), nil
}
