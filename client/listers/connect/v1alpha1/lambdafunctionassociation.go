/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/connect/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LambdaFunctionAssociationLister helps list LambdaFunctionAssociations.
// All objects returned here must be treated as read-only.
type LambdaFunctionAssociationLister interface {
	// List lists all LambdaFunctionAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LambdaFunctionAssociation, err error)
	// LambdaFunctionAssociations returns an object that can list and get LambdaFunctionAssociations.
	LambdaFunctionAssociations(namespace string) LambdaFunctionAssociationNamespaceLister
	LambdaFunctionAssociationListerExpansion
}

// lambdaFunctionAssociationLister implements the LambdaFunctionAssociationLister interface.
type lambdaFunctionAssociationLister struct {
	indexer cache.Indexer
}

// NewLambdaFunctionAssociationLister returns a new LambdaFunctionAssociationLister.
func NewLambdaFunctionAssociationLister(indexer cache.Indexer) LambdaFunctionAssociationLister {
	return &lambdaFunctionAssociationLister{indexer: indexer}
}

// List lists all LambdaFunctionAssociations in the indexer.
func (s *lambdaFunctionAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.LambdaFunctionAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LambdaFunctionAssociation))
	})
	return ret, err
}

// LambdaFunctionAssociations returns an object that can list and get LambdaFunctionAssociations.
func (s *lambdaFunctionAssociationLister) LambdaFunctionAssociations(namespace string) LambdaFunctionAssociationNamespaceLister {
	return lambdaFunctionAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LambdaFunctionAssociationNamespaceLister helps list and get LambdaFunctionAssociations.
// All objects returned here must be treated as read-only.
type LambdaFunctionAssociationNamespaceLister interface {
	// List lists all LambdaFunctionAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LambdaFunctionAssociation, err error)
	// Get retrieves the LambdaFunctionAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LambdaFunctionAssociation, error)
	LambdaFunctionAssociationNamespaceListerExpansion
}

// lambdaFunctionAssociationNamespaceLister implements the LambdaFunctionAssociationNamespaceLister
// interface.
type lambdaFunctionAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LambdaFunctionAssociations in the indexer for a given namespace.
func (s lambdaFunctionAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LambdaFunctionAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LambdaFunctionAssociation))
	})
	return ret, err
}

// Get retrieves the LambdaFunctionAssociation from the indexer for a given namespace and name.
func (s lambdaFunctionAssociationNamespaceLister) Get(name string) (*v1alpha1.LambdaFunctionAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lambdafunctionassociation"), name)
	}
	return obj.(*v1alpha1.LambdaFunctionAssociation), nil
}
