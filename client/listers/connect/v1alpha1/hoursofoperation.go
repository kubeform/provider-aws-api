/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/connect/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HoursOfOperationLister helps list HoursOfOperations.
// All objects returned here must be treated as read-only.
type HoursOfOperationLister interface {
	// List lists all HoursOfOperations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HoursOfOperation, err error)
	// HoursOfOperations returns an object that can list and get HoursOfOperations.
	HoursOfOperations(namespace string) HoursOfOperationNamespaceLister
	HoursOfOperationListerExpansion
}

// hoursOfOperationLister implements the HoursOfOperationLister interface.
type hoursOfOperationLister struct {
	indexer cache.Indexer
}

// NewHoursOfOperationLister returns a new HoursOfOperationLister.
func NewHoursOfOperationLister(indexer cache.Indexer) HoursOfOperationLister {
	return &hoursOfOperationLister{indexer: indexer}
}

// List lists all HoursOfOperations in the indexer.
func (s *hoursOfOperationLister) List(selector labels.Selector) (ret []*v1alpha1.HoursOfOperation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HoursOfOperation))
	})
	return ret, err
}

// HoursOfOperations returns an object that can list and get HoursOfOperations.
func (s *hoursOfOperationLister) HoursOfOperations(namespace string) HoursOfOperationNamespaceLister {
	return hoursOfOperationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HoursOfOperationNamespaceLister helps list and get HoursOfOperations.
// All objects returned here must be treated as read-only.
type HoursOfOperationNamespaceLister interface {
	// List lists all HoursOfOperations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HoursOfOperation, err error)
	// Get retrieves the HoursOfOperation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HoursOfOperation, error)
	HoursOfOperationNamespaceListerExpansion
}

// hoursOfOperationNamespaceLister implements the HoursOfOperationNamespaceLister
// interface.
type hoursOfOperationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HoursOfOperations in the indexer for a given namespace.
func (s hoursOfOperationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HoursOfOperation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HoursOfOperation))
	})
	return ret, err
}

// Get retrieves the HoursOfOperation from the indexer for a given namespace and name.
func (s hoursOfOperationNamespaceLister) Get(name string) (*v1alpha1.HoursOfOperation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hoursofoperation"), name)
	}
	return obj.(*v1alpha1.HoursOfOperation), nil
}
