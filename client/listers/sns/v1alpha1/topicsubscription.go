/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/sns/v1alpha1"
)

// TopicSubscriptionLister helps list TopicSubscriptions.
// All objects returned here must be treated as read-only.
type TopicSubscriptionLister interface {
	// List lists all TopicSubscriptions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TopicSubscription, err error)
	// TopicSubscriptions returns an object that can list and get TopicSubscriptions.
	TopicSubscriptions(namespace string) TopicSubscriptionNamespaceLister
	TopicSubscriptionListerExpansion
}

// topicSubscriptionLister implements the TopicSubscriptionLister interface.
type topicSubscriptionLister struct {
	indexer cache.Indexer
}

// NewTopicSubscriptionLister returns a new TopicSubscriptionLister.
func NewTopicSubscriptionLister(indexer cache.Indexer) TopicSubscriptionLister {
	return &topicSubscriptionLister{indexer: indexer}
}

// List lists all TopicSubscriptions in the indexer.
func (s *topicSubscriptionLister) List(selector labels.Selector) (ret []*v1alpha1.TopicSubscription, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopicSubscription))
	})
	return ret, err
}

// TopicSubscriptions returns an object that can list and get TopicSubscriptions.
func (s *topicSubscriptionLister) TopicSubscriptions(namespace string) TopicSubscriptionNamespaceLister {
	return topicSubscriptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TopicSubscriptionNamespaceLister helps list and get TopicSubscriptions.
// All objects returned here must be treated as read-only.
type TopicSubscriptionNamespaceLister interface {
	// List lists all TopicSubscriptions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TopicSubscription, err error)
	// Get retrieves the TopicSubscription from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TopicSubscription, error)
	TopicSubscriptionNamespaceListerExpansion
}

// topicSubscriptionNamespaceLister implements the TopicSubscriptionNamespaceLister
// interface.
type topicSubscriptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TopicSubscriptions in the indexer for a given namespace.
func (s topicSubscriptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TopicSubscription, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopicSubscription))
	})
	return ret, err
}

// Get retrieves the TopicSubscription from the indexer for a given namespace and name.
func (s topicSubscriptionNamespaceLister) Get(name string) (*v1alpha1.TopicSubscription, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("topicsubscription"), name)
	}
	return obj.(*v1alpha1.TopicSubscription), nil
}
