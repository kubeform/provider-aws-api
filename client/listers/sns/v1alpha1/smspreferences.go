/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/sns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SmsPreferencesLister helps list SmsPreferenceses.
// All objects returned here must be treated as read-only.
type SmsPreferencesLister interface {
	// List lists all SmsPreferenceses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SmsPreferences, err error)
	// SmsPreferenceses returns an object that can list and get SmsPreferenceses.
	SmsPreferenceses(namespace string) SmsPreferencesNamespaceLister
	SmsPreferencesListerExpansion
}

// smsPreferencesLister implements the SmsPreferencesLister interface.
type smsPreferencesLister struct {
	indexer cache.Indexer
}

// NewSmsPreferencesLister returns a new SmsPreferencesLister.
func NewSmsPreferencesLister(indexer cache.Indexer) SmsPreferencesLister {
	return &smsPreferencesLister{indexer: indexer}
}

// List lists all SmsPreferenceses in the indexer.
func (s *smsPreferencesLister) List(selector labels.Selector) (ret []*v1alpha1.SmsPreferences, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SmsPreferences))
	})
	return ret, err
}

// SmsPreferenceses returns an object that can list and get SmsPreferenceses.
func (s *smsPreferencesLister) SmsPreferenceses(namespace string) SmsPreferencesNamespaceLister {
	return smsPreferencesNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SmsPreferencesNamespaceLister helps list and get SmsPreferenceses.
// All objects returned here must be treated as read-only.
type SmsPreferencesNamespaceLister interface {
	// List lists all SmsPreferenceses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SmsPreferences, err error)
	// Get retrieves the SmsPreferences from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SmsPreferences, error)
	SmsPreferencesNamespaceListerExpansion
}

// smsPreferencesNamespaceLister implements the SmsPreferencesNamespaceLister
// interface.
type smsPreferencesNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SmsPreferenceses in the indexer for a given namespace.
func (s smsPreferencesNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SmsPreferences, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SmsPreferences))
	})
	return ret, err
}

// Get retrieves the SmsPreferences from the indexer for a given namespace and name.
func (s smsPreferencesNamespaceLister) Get(name string) (*v1alpha1.SmsPreferences, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("smspreferences"), name)
	}
	return obj.(*v1alpha1.SmsPreferences), nil
}
