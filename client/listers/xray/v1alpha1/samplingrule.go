/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/xray/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SamplingRuleLister helps list SamplingRules.
// All objects returned here must be treated as read-only.
type SamplingRuleLister interface {
	// List lists all SamplingRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SamplingRule, err error)
	// SamplingRules returns an object that can list and get SamplingRules.
	SamplingRules(namespace string) SamplingRuleNamespaceLister
	SamplingRuleListerExpansion
}

// samplingRuleLister implements the SamplingRuleLister interface.
type samplingRuleLister struct {
	indexer cache.Indexer
}

// NewSamplingRuleLister returns a new SamplingRuleLister.
func NewSamplingRuleLister(indexer cache.Indexer) SamplingRuleLister {
	return &samplingRuleLister{indexer: indexer}
}

// List lists all SamplingRules in the indexer.
func (s *samplingRuleLister) List(selector labels.Selector) (ret []*v1alpha1.SamplingRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SamplingRule))
	})
	return ret, err
}

// SamplingRules returns an object that can list and get SamplingRules.
func (s *samplingRuleLister) SamplingRules(namespace string) SamplingRuleNamespaceLister {
	return samplingRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SamplingRuleNamespaceLister helps list and get SamplingRules.
// All objects returned here must be treated as read-only.
type SamplingRuleNamespaceLister interface {
	// List lists all SamplingRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SamplingRule, err error)
	// Get retrieves the SamplingRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SamplingRule, error)
	SamplingRuleNamespaceListerExpansion
}

// samplingRuleNamespaceLister implements the SamplingRuleNamespaceLister
// interface.
type samplingRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SamplingRules in the indexer for a given namespace.
func (s samplingRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SamplingRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SamplingRule))
	})
	return ret, err
}

// Get retrieves the SamplingRule from the indexer for a given namespace and name.
func (s samplingRuleNamespaceLister) Get(name string) (*v1alpha1.SamplingRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("samplingrule"), name)
	}
	return obj.(*v1alpha1.SamplingRule), nil
}
