/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/fms/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AdminAccountLister helps list AdminAccounts.
// All objects returned here must be treated as read-only.
type AdminAccountLister interface {
	// List lists all AdminAccounts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AdminAccount, err error)
	// AdminAccounts returns an object that can list and get AdminAccounts.
	AdminAccounts(namespace string) AdminAccountNamespaceLister
	AdminAccountListerExpansion
}

// adminAccountLister implements the AdminAccountLister interface.
type adminAccountLister struct {
	indexer cache.Indexer
}

// NewAdminAccountLister returns a new AdminAccountLister.
func NewAdminAccountLister(indexer cache.Indexer) AdminAccountLister {
	return &adminAccountLister{indexer: indexer}
}

// List lists all AdminAccounts in the indexer.
func (s *adminAccountLister) List(selector labels.Selector) (ret []*v1alpha1.AdminAccount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AdminAccount))
	})
	return ret, err
}

// AdminAccounts returns an object that can list and get AdminAccounts.
func (s *adminAccountLister) AdminAccounts(namespace string) AdminAccountNamespaceLister {
	return adminAccountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AdminAccountNamespaceLister helps list and get AdminAccounts.
// All objects returned here must be treated as read-only.
type AdminAccountNamespaceLister interface {
	// List lists all AdminAccounts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AdminAccount, err error)
	// Get retrieves the AdminAccount from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AdminAccount, error)
	AdminAccountNamespaceListerExpansion
}

// adminAccountNamespaceLister implements the AdminAccountNamespaceLister
// interface.
type adminAccountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AdminAccounts in the indexer for a given namespace.
func (s adminAccountNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AdminAccount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AdminAccount))
	})
	return ret, err
}

// Get retrieves the AdminAccount from the indexer for a given namespace and name.
func (s adminAccountNamespaceLister) Get(name string) (*v1alpha1.AdminAccount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("adminaccount"), name)
	}
	return obj.(*v1alpha1.AdminAccount), nil
}
