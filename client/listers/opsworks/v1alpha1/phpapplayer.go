/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/opsworks/v1alpha1"
)

// PhpAppLayerLister helps list PhpAppLayers.
// All objects returned here must be treated as read-only.
type PhpAppLayerLister interface {
	// List lists all PhpAppLayers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PhpAppLayer, err error)
	// PhpAppLayers returns an object that can list and get PhpAppLayers.
	PhpAppLayers(namespace string) PhpAppLayerNamespaceLister
	PhpAppLayerListerExpansion
}

// phpAppLayerLister implements the PhpAppLayerLister interface.
type phpAppLayerLister struct {
	indexer cache.Indexer
}

// NewPhpAppLayerLister returns a new PhpAppLayerLister.
func NewPhpAppLayerLister(indexer cache.Indexer) PhpAppLayerLister {
	return &phpAppLayerLister{indexer: indexer}
}

// List lists all PhpAppLayers in the indexer.
func (s *phpAppLayerLister) List(selector labels.Selector) (ret []*v1alpha1.PhpAppLayer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PhpAppLayer))
	})
	return ret, err
}

// PhpAppLayers returns an object that can list and get PhpAppLayers.
func (s *phpAppLayerLister) PhpAppLayers(namespace string) PhpAppLayerNamespaceLister {
	return phpAppLayerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PhpAppLayerNamespaceLister helps list and get PhpAppLayers.
// All objects returned here must be treated as read-only.
type PhpAppLayerNamespaceLister interface {
	// List lists all PhpAppLayers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PhpAppLayer, err error)
	// Get retrieves the PhpAppLayer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PhpAppLayer, error)
	PhpAppLayerNamespaceListerExpansion
}

// phpAppLayerNamespaceLister implements the PhpAppLayerNamespaceLister
// interface.
type phpAppLayerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PhpAppLayers in the indexer for a given namespace.
func (s phpAppLayerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PhpAppLayer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PhpAppLayer))
	})
	return ret, err
}

// Get retrieves the PhpAppLayer from the indexer for a given namespace and name.
func (s phpAppLayerNamespaceLister) Get(name string) (*v1alpha1.PhpAppLayer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("phpapplayer"), name)
	}
	return obj.(*v1alpha1.PhpAppLayer), nil
}
