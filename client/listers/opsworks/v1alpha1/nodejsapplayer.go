/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/opsworks/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodejsAppLayerLister helps list NodejsAppLayers.
// All objects returned here must be treated as read-only.
type NodejsAppLayerLister interface {
	// List lists all NodejsAppLayers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodejsAppLayer, err error)
	// NodejsAppLayers returns an object that can list and get NodejsAppLayers.
	NodejsAppLayers(namespace string) NodejsAppLayerNamespaceLister
	NodejsAppLayerListerExpansion
}

// nodejsAppLayerLister implements the NodejsAppLayerLister interface.
type nodejsAppLayerLister struct {
	indexer cache.Indexer
}

// NewNodejsAppLayerLister returns a new NodejsAppLayerLister.
func NewNodejsAppLayerLister(indexer cache.Indexer) NodejsAppLayerLister {
	return &nodejsAppLayerLister{indexer: indexer}
}

// List lists all NodejsAppLayers in the indexer.
func (s *nodejsAppLayerLister) List(selector labels.Selector) (ret []*v1alpha1.NodejsAppLayer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodejsAppLayer))
	})
	return ret, err
}

// NodejsAppLayers returns an object that can list and get NodejsAppLayers.
func (s *nodejsAppLayerLister) NodejsAppLayers(namespace string) NodejsAppLayerNamespaceLister {
	return nodejsAppLayerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodejsAppLayerNamespaceLister helps list and get NodejsAppLayers.
// All objects returned here must be treated as read-only.
type NodejsAppLayerNamespaceLister interface {
	// List lists all NodejsAppLayers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodejsAppLayer, err error)
	// Get retrieves the NodejsAppLayer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NodejsAppLayer, error)
	NodejsAppLayerNamespaceListerExpansion
}

// nodejsAppLayerNamespaceLister implements the NodejsAppLayerNamespaceLister
// interface.
type nodejsAppLayerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodejsAppLayers in the indexer for a given namespace.
func (s nodejsAppLayerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NodejsAppLayer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodejsAppLayer))
	})
	return ret, err
}

// Get retrieves the NodejsAppLayer from the indexer for a given namespace and name.
func (s nodejsAppLayerNamespaceLister) Get(name string) (*v1alpha1.NodejsAppLayer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nodejsapplayer"), name)
	}
	return obj.(*v1alpha1.NodejsAppLayer), nil
}
