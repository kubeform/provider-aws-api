/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/opsworks/v1alpha1"
)

// JavaAppLayerLister helps list JavaAppLayers.
// All objects returned here must be treated as read-only.
type JavaAppLayerLister interface {
	// List lists all JavaAppLayers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JavaAppLayer, err error)
	// JavaAppLayers returns an object that can list and get JavaAppLayers.
	JavaAppLayers(namespace string) JavaAppLayerNamespaceLister
	JavaAppLayerListerExpansion
}

// javaAppLayerLister implements the JavaAppLayerLister interface.
type javaAppLayerLister struct {
	indexer cache.Indexer
}

// NewJavaAppLayerLister returns a new JavaAppLayerLister.
func NewJavaAppLayerLister(indexer cache.Indexer) JavaAppLayerLister {
	return &javaAppLayerLister{indexer: indexer}
}

// List lists all JavaAppLayers in the indexer.
func (s *javaAppLayerLister) List(selector labels.Selector) (ret []*v1alpha1.JavaAppLayer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JavaAppLayer))
	})
	return ret, err
}

// JavaAppLayers returns an object that can list and get JavaAppLayers.
func (s *javaAppLayerLister) JavaAppLayers(namespace string) JavaAppLayerNamespaceLister {
	return javaAppLayerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JavaAppLayerNamespaceLister helps list and get JavaAppLayers.
// All objects returned here must be treated as read-only.
type JavaAppLayerNamespaceLister interface {
	// List lists all JavaAppLayers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JavaAppLayer, err error)
	// Get retrieves the JavaAppLayer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.JavaAppLayer, error)
	JavaAppLayerNamespaceListerExpansion
}

// javaAppLayerNamespaceLister implements the JavaAppLayerNamespaceLister
// interface.
type javaAppLayerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all JavaAppLayers in the indexer for a given namespace.
func (s javaAppLayerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.JavaAppLayer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JavaAppLayer))
	})
	return ret, err
}

// Get retrieves the JavaAppLayer from the indexer for a given namespace and name.
func (s javaAppLayerNamespaceLister) Get(name string) (*v1alpha1.JavaAppLayer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("javaapplayer"), name)
	}
	return obj.(*v1alpha1.JavaAppLayer), nil
}
