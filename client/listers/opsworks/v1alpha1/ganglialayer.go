/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/opsworks/v1alpha1"
)

// GangliaLayerLister helps list GangliaLayers.
// All objects returned here must be treated as read-only.
type GangliaLayerLister interface {
	// List lists all GangliaLayers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GangliaLayer, err error)
	// GangliaLayers returns an object that can list and get GangliaLayers.
	GangliaLayers(namespace string) GangliaLayerNamespaceLister
	GangliaLayerListerExpansion
}

// gangliaLayerLister implements the GangliaLayerLister interface.
type gangliaLayerLister struct {
	indexer cache.Indexer
}

// NewGangliaLayerLister returns a new GangliaLayerLister.
func NewGangliaLayerLister(indexer cache.Indexer) GangliaLayerLister {
	return &gangliaLayerLister{indexer: indexer}
}

// List lists all GangliaLayers in the indexer.
func (s *gangliaLayerLister) List(selector labels.Selector) (ret []*v1alpha1.GangliaLayer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GangliaLayer))
	})
	return ret, err
}

// GangliaLayers returns an object that can list and get GangliaLayers.
func (s *gangliaLayerLister) GangliaLayers(namespace string) GangliaLayerNamespaceLister {
	return gangliaLayerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GangliaLayerNamespaceLister helps list and get GangliaLayers.
// All objects returned here must be treated as read-only.
type GangliaLayerNamespaceLister interface {
	// List lists all GangliaLayers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GangliaLayer, err error)
	// Get retrieves the GangliaLayer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GangliaLayer, error)
	GangliaLayerNamespaceListerExpansion
}

// gangliaLayerNamespaceLister implements the GangliaLayerNamespaceLister
// interface.
type gangliaLayerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GangliaLayers in the indexer for a given namespace.
func (s gangliaLayerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GangliaLayer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GangliaLayer))
	})
	return ret, err
}

// Get retrieves the GangliaLayer from the indexer for a given namespace and name.
func (s gangliaLayerNamespaceLister) Get(name string) (*v1alpha1.GangliaLayer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ganglialayer"), name)
	}
	return obj.(*v1alpha1.GangliaLayer), nil
}
