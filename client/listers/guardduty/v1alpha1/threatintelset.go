/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/guardduty/v1alpha1"
)

// ThreatintelsetLister helps list Threatintelsets.
// All objects returned here must be treated as read-only.
type ThreatintelsetLister interface {
	// List lists all Threatintelsets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Threatintelset, err error)
	// Threatintelsets returns an object that can list and get Threatintelsets.
	Threatintelsets(namespace string) ThreatintelsetNamespaceLister
	ThreatintelsetListerExpansion
}

// threatintelsetLister implements the ThreatintelsetLister interface.
type threatintelsetLister struct {
	indexer cache.Indexer
}

// NewThreatintelsetLister returns a new ThreatintelsetLister.
func NewThreatintelsetLister(indexer cache.Indexer) ThreatintelsetLister {
	return &threatintelsetLister{indexer: indexer}
}

// List lists all Threatintelsets in the indexer.
func (s *threatintelsetLister) List(selector labels.Selector) (ret []*v1alpha1.Threatintelset, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Threatintelset))
	})
	return ret, err
}

// Threatintelsets returns an object that can list and get Threatintelsets.
func (s *threatintelsetLister) Threatintelsets(namespace string) ThreatintelsetNamespaceLister {
	return threatintelsetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ThreatintelsetNamespaceLister helps list and get Threatintelsets.
// All objects returned here must be treated as read-only.
type ThreatintelsetNamespaceLister interface {
	// List lists all Threatintelsets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Threatintelset, err error)
	// Get retrieves the Threatintelset from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Threatintelset, error)
	ThreatintelsetNamespaceListerExpansion
}

// threatintelsetNamespaceLister implements the ThreatintelsetNamespaceLister
// interface.
type threatintelsetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Threatintelsets in the indexer for a given namespace.
func (s threatintelsetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Threatintelset, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Threatintelset))
	})
	return ret, err
}

// Get retrieves the Threatintelset from the indexer for a given namespace and name.
func (s threatintelsetNamespaceLister) Get(name string) (*v1alpha1.Threatintelset, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("threatintelset"), name)
	}
	return obj.(*v1alpha1.Threatintelset), nil
}
