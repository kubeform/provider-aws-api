/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/neptune/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterSnapshotLister helps list ClusterSnapshots.
// All objects returned here must be treated as read-only.
type ClusterSnapshotLister interface {
	// List lists all ClusterSnapshots in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterSnapshot, err error)
	// ClusterSnapshots returns an object that can list and get ClusterSnapshots.
	ClusterSnapshots(namespace string) ClusterSnapshotNamespaceLister
	ClusterSnapshotListerExpansion
}

// clusterSnapshotLister implements the ClusterSnapshotLister interface.
type clusterSnapshotLister struct {
	indexer cache.Indexer
}

// NewClusterSnapshotLister returns a new ClusterSnapshotLister.
func NewClusterSnapshotLister(indexer cache.Indexer) ClusterSnapshotLister {
	return &clusterSnapshotLister{indexer: indexer}
}

// List lists all ClusterSnapshots in the indexer.
func (s *clusterSnapshotLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterSnapshot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterSnapshot))
	})
	return ret, err
}

// ClusterSnapshots returns an object that can list and get ClusterSnapshots.
func (s *clusterSnapshotLister) ClusterSnapshots(namespace string) ClusterSnapshotNamespaceLister {
	return clusterSnapshotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterSnapshotNamespaceLister helps list and get ClusterSnapshots.
// All objects returned here must be treated as read-only.
type ClusterSnapshotNamespaceLister interface {
	// List lists all ClusterSnapshots in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterSnapshot, err error)
	// Get retrieves the ClusterSnapshot from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterSnapshot, error)
	ClusterSnapshotNamespaceListerExpansion
}

// clusterSnapshotNamespaceLister implements the ClusterSnapshotNamespaceLister
// interface.
type clusterSnapshotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterSnapshots in the indexer for a given namespace.
func (s clusterSnapshotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterSnapshot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterSnapshot))
	})
	return ret, err
}

// Get retrieves the ClusterSnapshot from the indexer for a given namespace and name.
func (s clusterSnapshotNamespaceLister) Get(name string) (*v1alpha1.ClusterSnapshot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clustersnapshot"), name)
	}
	return obj.(*v1alpha1.ClusterSnapshot), nil
}
