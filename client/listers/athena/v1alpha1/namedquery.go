/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/athena/v1alpha1"
)

// NamedQueryLister helps list NamedQueries.
// All objects returned here must be treated as read-only.
type NamedQueryLister interface {
	// List lists all NamedQueries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NamedQuery, err error)
	// NamedQueries returns an object that can list and get NamedQueries.
	NamedQueries(namespace string) NamedQueryNamespaceLister
	NamedQueryListerExpansion
}

// namedQueryLister implements the NamedQueryLister interface.
type namedQueryLister struct {
	indexer cache.Indexer
}

// NewNamedQueryLister returns a new NamedQueryLister.
func NewNamedQueryLister(indexer cache.Indexer) NamedQueryLister {
	return &namedQueryLister{indexer: indexer}
}

// List lists all NamedQueries in the indexer.
func (s *namedQueryLister) List(selector labels.Selector) (ret []*v1alpha1.NamedQuery, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamedQuery))
	})
	return ret, err
}

// NamedQueries returns an object that can list and get NamedQueries.
func (s *namedQueryLister) NamedQueries(namespace string) NamedQueryNamespaceLister {
	return namedQueryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NamedQueryNamespaceLister helps list and get NamedQueries.
// All objects returned here must be treated as read-only.
type NamedQueryNamespaceLister interface {
	// List lists all NamedQueries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NamedQuery, err error)
	// Get retrieves the NamedQuery from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NamedQuery, error)
	NamedQueryNamespaceListerExpansion
}

// namedQueryNamespaceLister implements the NamedQueryNamespaceLister
// interface.
type namedQueryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NamedQueries in the indexer for a given namespace.
func (s namedQueryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NamedQuery, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamedQuery))
	})
	return ret, err
}

// Get retrieves the NamedQuery from the indexer for a given namespace and name.
func (s namedQueryNamespaceLister) Get(name string) (*v1alpha1.NamedQuery, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("namedquery"), name)
	}
	return obj.(*v1alpha1.NamedQuery), nil
}
