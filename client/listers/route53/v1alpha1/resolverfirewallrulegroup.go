/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/route53/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResolverFirewallRuleGroupLister helps list ResolverFirewallRuleGroups.
// All objects returned here must be treated as read-only.
type ResolverFirewallRuleGroupLister interface {
	// List lists all ResolverFirewallRuleGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallRuleGroup, err error)
	// ResolverFirewallRuleGroups returns an object that can list and get ResolverFirewallRuleGroups.
	ResolverFirewallRuleGroups(namespace string) ResolverFirewallRuleGroupNamespaceLister
	ResolverFirewallRuleGroupListerExpansion
}

// resolverFirewallRuleGroupLister implements the ResolverFirewallRuleGroupLister interface.
type resolverFirewallRuleGroupLister struct {
	indexer cache.Indexer
}

// NewResolverFirewallRuleGroupLister returns a new ResolverFirewallRuleGroupLister.
func NewResolverFirewallRuleGroupLister(indexer cache.Indexer) ResolverFirewallRuleGroupLister {
	return &resolverFirewallRuleGroupLister{indexer: indexer}
}

// List lists all ResolverFirewallRuleGroups in the indexer.
func (s *resolverFirewallRuleGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallRuleGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResolverFirewallRuleGroup))
	})
	return ret, err
}

// ResolverFirewallRuleGroups returns an object that can list and get ResolverFirewallRuleGroups.
func (s *resolverFirewallRuleGroupLister) ResolverFirewallRuleGroups(namespace string) ResolverFirewallRuleGroupNamespaceLister {
	return resolverFirewallRuleGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResolverFirewallRuleGroupNamespaceLister helps list and get ResolverFirewallRuleGroups.
// All objects returned here must be treated as read-only.
type ResolverFirewallRuleGroupNamespaceLister interface {
	// List lists all ResolverFirewallRuleGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallRuleGroup, err error)
	// Get retrieves the ResolverFirewallRuleGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResolverFirewallRuleGroup, error)
	ResolverFirewallRuleGroupNamespaceListerExpansion
}

// resolverFirewallRuleGroupNamespaceLister implements the ResolverFirewallRuleGroupNamespaceLister
// interface.
type resolverFirewallRuleGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResolverFirewallRuleGroups in the indexer for a given namespace.
func (s resolverFirewallRuleGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallRuleGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResolverFirewallRuleGroup))
	})
	return ret, err
}

// Get retrieves the ResolverFirewallRuleGroup from the indexer for a given namespace and name.
func (s resolverFirewallRuleGroupNamespaceLister) Get(name string) (*v1alpha1.ResolverFirewallRuleGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resolverfirewallrulegroup"), name)
	}
	return obj.(*v1alpha1.ResolverFirewallRuleGroup), nil
}
