/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/route53/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpcAssociationAuthorizationLister helps list VpcAssociationAuthorizations.
// All objects returned here must be treated as read-only.
type VpcAssociationAuthorizationLister interface {
	// List lists all VpcAssociationAuthorizations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcAssociationAuthorization, err error)
	// VpcAssociationAuthorizations returns an object that can list and get VpcAssociationAuthorizations.
	VpcAssociationAuthorizations(namespace string) VpcAssociationAuthorizationNamespaceLister
	VpcAssociationAuthorizationListerExpansion
}

// vpcAssociationAuthorizationLister implements the VpcAssociationAuthorizationLister interface.
type vpcAssociationAuthorizationLister struct {
	indexer cache.Indexer
}

// NewVpcAssociationAuthorizationLister returns a new VpcAssociationAuthorizationLister.
func NewVpcAssociationAuthorizationLister(indexer cache.Indexer) VpcAssociationAuthorizationLister {
	return &vpcAssociationAuthorizationLister{indexer: indexer}
}

// List lists all VpcAssociationAuthorizations in the indexer.
func (s *vpcAssociationAuthorizationLister) List(selector labels.Selector) (ret []*v1alpha1.VpcAssociationAuthorization, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcAssociationAuthorization))
	})
	return ret, err
}

// VpcAssociationAuthorizations returns an object that can list and get VpcAssociationAuthorizations.
func (s *vpcAssociationAuthorizationLister) VpcAssociationAuthorizations(namespace string) VpcAssociationAuthorizationNamespaceLister {
	return vpcAssociationAuthorizationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpcAssociationAuthorizationNamespaceLister helps list and get VpcAssociationAuthorizations.
// All objects returned here must be treated as read-only.
type VpcAssociationAuthorizationNamespaceLister interface {
	// List lists all VpcAssociationAuthorizations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VpcAssociationAuthorization, err error)
	// Get retrieves the VpcAssociationAuthorization from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VpcAssociationAuthorization, error)
	VpcAssociationAuthorizationNamespaceListerExpansion
}

// vpcAssociationAuthorizationNamespaceLister implements the VpcAssociationAuthorizationNamespaceLister
// interface.
type vpcAssociationAuthorizationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpcAssociationAuthorizations in the indexer for a given namespace.
func (s vpcAssociationAuthorizationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpcAssociationAuthorization, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcAssociationAuthorization))
	})
	return ret, err
}

// Get retrieves the VpcAssociationAuthorization from the indexer for a given namespace and name.
func (s vpcAssociationAuthorizationNamespaceLister) Get(name string) (*v1alpha1.VpcAssociationAuthorization, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpcassociationauthorization"), name)
	}
	return obj.(*v1alpha1.VpcAssociationAuthorization), nil
}
