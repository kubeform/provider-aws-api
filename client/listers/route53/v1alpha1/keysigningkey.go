/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/route53/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KeySigningKeyLister helps list KeySigningKeys.
// All objects returned here must be treated as read-only.
type KeySigningKeyLister interface {
	// List lists all KeySigningKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeySigningKey, err error)
	// KeySigningKeys returns an object that can list and get KeySigningKeys.
	KeySigningKeys(namespace string) KeySigningKeyNamespaceLister
	KeySigningKeyListerExpansion
}

// keySigningKeyLister implements the KeySigningKeyLister interface.
type keySigningKeyLister struct {
	indexer cache.Indexer
}

// NewKeySigningKeyLister returns a new KeySigningKeyLister.
func NewKeySigningKeyLister(indexer cache.Indexer) KeySigningKeyLister {
	return &keySigningKeyLister{indexer: indexer}
}

// List lists all KeySigningKeys in the indexer.
func (s *keySigningKeyLister) List(selector labels.Selector) (ret []*v1alpha1.KeySigningKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeySigningKey))
	})
	return ret, err
}

// KeySigningKeys returns an object that can list and get KeySigningKeys.
func (s *keySigningKeyLister) KeySigningKeys(namespace string) KeySigningKeyNamespaceLister {
	return keySigningKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeySigningKeyNamespaceLister helps list and get KeySigningKeys.
// All objects returned here must be treated as read-only.
type KeySigningKeyNamespaceLister interface {
	// List lists all KeySigningKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeySigningKey, err error)
	// Get retrieves the KeySigningKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KeySigningKey, error)
	KeySigningKeyNamespaceListerExpansion
}

// keySigningKeyNamespaceLister implements the KeySigningKeyNamespaceLister
// interface.
type keySigningKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeySigningKeys in the indexer for a given namespace.
func (s keySigningKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KeySigningKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeySigningKey))
	})
	return ret, err
}

// Get retrieves the KeySigningKey from the indexer for a given namespace and name.
func (s keySigningKeyNamespaceLister) Get(name string) (*v1alpha1.KeySigningKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keysigningkey"), name)
	}
	return obj.(*v1alpha1.KeySigningKey), nil
}
