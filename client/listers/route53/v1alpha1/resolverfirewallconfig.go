/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/route53/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResolverFirewallConfigLister helps list ResolverFirewallConfigs.
// All objects returned here must be treated as read-only.
type ResolverFirewallConfigLister interface {
	// List lists all ResolverFirewallConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallConfig, err error)
	// ResolverFirewallConfigs returns an object that can list and get ResolverFirewallConfigs.
	ResolverFirewallConfigs(namespace string) ResolverFirewallConfigNamespaceLister
	ResolverFirewallConfigListerExpansion
}

// resolverFirewallConfigLister implements the ResolverFirewallConfigLister interface.
type resolverFirewallConfigLister struct {
	indexer cache.Indexer
}

// NewResolverFirewallConfigLister returns a new ResolverFirewallConfigLister.
func NewResolverFirewallConfigLister(indexer cache.Indexer) ResolverFirewallConfigLister {
	return &resolverFirewallConfigLister{indexer: indexer}
}

// List lists all ResolverFirewallConfigs in the indexer.
func (s *resolverFirewallConfigLister) List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResolverFirewallConfig))
	})
	return ret, err
}

// ResolverFirewallConfigs returns an object that can list and get ResolverFirewallConfigs.
func (s *resolverFirewallConfigLister) ResolverFirewallConfigs(namespace string) ResolverFirewallConfigNamespaceLister {
	return resolverFirewallConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResolverFirewallConfigNamespaceLister helps list and get ResolverFirewallConfigs.
// All objects returned here must be treated as read-only.
type ResolverFirewallConfigNamespaceLister interface {
	// List lists all ResolverFirewallConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallConfig, err error)
	// Get retrieves the ResolverFirewallConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResolverFirewallConfig, error)
	ResolverFirewallConfigNamespaceListerExpansion
}

// resolverFirewallConfigNamespaceLister implements the ResolverFirewallConfigNamespaceLister
// interface.
type resolverFirewallConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResolverFirewallConfigs in the indexer for a given namespace.
func (s resolverFirewallConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResolverFirewallConfig))
	})
	return ret, err
}

// Get retrieves the ResolverFirewallConfig from the indexer for a given namespace and name.
func (s resolverFirewallConfigNamespaceLister) Get(name string) (*v1alpha1.ResolverFirewallConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resolverfirewallconfig"), name)
	}
	return obj.(*v1alpha1.ResolverFirewallConfig), nil
}
