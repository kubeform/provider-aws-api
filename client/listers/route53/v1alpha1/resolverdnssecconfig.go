/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/route53/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResolverDnssecConfigLister helps list ResolverDnssecConfigs.
// All objects returned here must be treated as read-only.
type ResolverDnssecConfigLister interface {
	// List lists all ResolverDnssecConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResolverDnssecConfig, err error)
	// ResolverDnssecConfigs returns an object that can list and get ResolverDnssecConfigs.
	ResolverDnssecConfigs(namespace string) ResolverDnssecConfigNamespaceLister
	ResolverDnssecConfigListerExpansion
}

// resolverDnssecConfigLister implements the ResolverDnssecConfigLister interface.
type resolverDnssecConfigLister struct {
	indexer cache.Indexer
}

// NewResolverDnssecConfigLister returns a new ResolverDnssecConfigLister.
func NewResolverDnssecConfigLister(indexer cache.Indexer) ResolverDnssecConfigLister {
	return &resolverDnssecConfigLister{indexer: indexer}
}

// List lists all ResolverDnssecConfigs in the indexer.
func (s *resolverDnssecConfigLister) List(selector labels.Selector) (ret []*v1alpha1.ResolverDnssecConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResolverDnssecConfig))
	})
	return ret, err
}

// ResolverDnssecConfigs returns an object that can list and get ResolverDnssecConfigs.
func (s *resolverDnssecConfigLister) ResolverDnssecConfigs(namespace string) ResolverDnssecConfigNamespaceLister {
	return resolverDnssecConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResolverDnssecConfigNamespaceLister helps list and get ResolverDnssecConfigs.
// All objects returned here must be treated as read-only.
type ResolverDnssecConfigNamespaceLister interface {
	// List lists all ResolverDnssecConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResolverDnssecConfig, err error)
	// Get retrieves the ResolverDnssecConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResolverDnssecConfig, error)
	ResolverDnssecConfigNamespaceListerExpansion
}

// resolverDnssecConfigNamespaceLister implements the ResolverDnssecConfigNamespaceLister
// interface.
type resolverDnssecConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResolverDnssecConfigs in the indexer for a given namespace.
func (s resolverDnssecConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResolverDnssecConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResolverDnssecConfig))
	})
	return ret, err
}

// Get retrieves the ResolverDnssecConfig from the indexer for a given namespace and name.
func (s resolverDnssecConfigNamespaceLister) Get(name string) (*v1alpha1.ResolverDnssecConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resolverdnssecconfig"), name)
	}
	return obj.(*v1alpha1.ResolverDnssecConfig), nil
}
