/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/route53/v1alpha1"
)

// DelegationSetLister helps list DelegationSets.
// All objects returned here must be treated as read-only.
type DelegationSetLister interface {
	// List lists all DelegationSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DelegationSet, err error)
	// DelegationSets returns an object that can list and get DelegationSets.
	DelegationSets(namespace string) DelegationSetNamespaceLister
	DelegationSetListerExpansion
}

// delegationSetLister implements the DelegationSetLister interface.
type delegationSetLister struct {
	indexer cache.Indexer
}

// NewDelegationSetLister returns a new DelegationSetLister.
func NewDelegationSetLister(indexer cache.Indexer) DelegationSetLister {
	return &delegationSetLister{indexer: indexer}
}

// List lists all DelegationSets in the indexer.
func (s *delegationSetLister) List(selector labels.Selector) (ret []*v1alpha1.DelegationSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DelegationSet))
	})
	return ret, err
}

// DelegationSets returns an object that can list and get DelegationSets.
func (s *delegationSetLister) DelegationSets(namespace string) DelegationSetNamespaceLister {
	return delegationSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DelegationSetNamespaceLister helps list and get DelegationSets.
// All objects returned here must be treated as read-only.
type DelegationSetNamespaceLister interface {
	// List lists all DelegationSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DelegationSet, err error)
	// Get retrieves the DelegationSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DelegationSet, error)
	DelegationSetNamespaceListerExpansion
}

// delegationSetNamespaceLister implements the DelegationSetNamespaceLister
// interface.
type delegationSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DelegationSets in the indexer for a given namespace.
func (s delegationSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DelegationSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DelegationSet))
	})
	return ret, err
}

// Get retrieves the DelegationSet from the indexer for a given namespace and name.
func (s delegationSetNamespaceLister) Get(name string) (*v1alpha1.DelegationSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("delegationset"), name)
	}
	return obj.(*v1alpha1.DelegationSet), nil
}
