/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/route53/v1alpha1"
)

// ResolverFirewallDomainListLister helps list ResolverFirewallDomainLists.
// All objects returned here must be treated as read-only.
type ResolverFirewallDomainListLister interface {
	// List lists all ResolverFirewallDomainLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallDomainList, err error)
	// ResolverFirewallDomainLists returns an object that can list and get ResolverFirewallDomainLists.
	ResolverFirewallDomainLists(namespace string) ResolverFirewallDomainListNamespaceLister
	ResolverFirewallDomainListListerExpansion
}

// resolverFirewallDomainListLister implements the ResolverFirewallDomainListLister interface.
type resolverFirewallDomainListLister struct {
	indexer cache.Indexer
}

// NewResolverFirewallDomainListLister returns a new ResolverFirewallDomainListLister.
func NewResolverFirewallDomainListLister(indexer cache.Indexer) ResolverFirewallDomainListLister {
	return &resolverFirewallDomainListLister{indexer: indexer}
}

// List lists all ResolverFirewallDomainLists in the indexer.
func (s *resolverFirewallDomainListLister) List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallDomainList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResolverFirewallDomainList))
	})
	return ret, err
}

// ResolverFirewallDomainLists returns an object that can list and get ResolverFirewallDomainLists.
func (s *resolverFirewallDomainListLister) ResolverFirewallDomainLists(namespace string) ResolverFirewallDomainListNamespaceLister {
	return resolverFirewallDomainListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResolverFirewallDomainListNamespaceLister helps list and get ResolverFirewallDomainLists.
// All objects returned here must be treated as read-only.
type ResolverFirewallDomainListNamespaceLister interface {
	// List lists all ResolverFirewallDomainLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallDomainList, err error)
	// Get retrieves the ResolverFirewallDomainList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResolverFirewallDomainList, error)
	ResolverFirewallDomainListNamespaceListerExpansion
}

// resolverFirewallDomainListNamespaceLister implements the ResolverFirewallDomainListNamespaceLister
// interface.
type resolverFirewallDomainListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResolverFirewallDomainLists in the indexer for a given namespace.
func (s resolverFirewallDomainListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallDomainList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResolverFirewallDomainList))
	})
	return ret, err
}

// Get retrieves the ResolverFirewallDomainList from the indexer for a given namespace and name.
func (s resolverFirewallDomainListNamespaceLister) Get(name string) (*v1alpha1.ResolverFirewallDomainList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resolverfirewalldomainlist"), name)
	}
	return obj.(*v1alpha1.ResolverFirewallDomainList), nil
}
