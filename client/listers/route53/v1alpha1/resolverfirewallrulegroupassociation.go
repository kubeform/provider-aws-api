/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/route53/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResolverFirewallRuleGroupAssociationLister helps list ResolverFirewallRuleGroupAssociations.
// All objects returned here must be treated as read-only.
type ResolverFirewallRuleGroupAssociationLister interface {
	// List lists all ResolverFirewallRuleGroupAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallRuleGroupAssociation, err error)
	// ResolverFirewallRuleGroupAssociations returns an object that can list and get ResolverFirewallRuleGroupAssociations.
	ResolverFirewallRuleGroupAssociations(namespace string) ResolverFirewallRuleGroupAssociationNamespaceLister
	ResolverFirewallRuleGroupAssociationListerExpansion
}

// resolverFirewallRuleGroupAssociationLister implements the ResolverFirewallRuleGroupAssociationLister interface.
type resolverFirewallRuleGroupAssociationLister struct {
	indexer cache.Indexer
}

// NewResolverFirewallRuleGroupAssociationLister returns a new ResolverFirewallRuleGroupAssociationLister.
func NewResolverFirewallRuleGroupAssociationLister(indexer cache.Indexer) ResolverFirewallRuleGroupAssociationLister {
	return &resolverFirewallRuleGroupAssociationLister{indexer: indexer}
}

// List lists all ResolverFirewallRuleGroupAssociations in the indexer.
func (s *resolverFirewallRuleGroupAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallRuleGroupAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResolverFirewallRuleGroupAssociation))
	})
	return ret, err
}

// ResolverFirewallRuleGroupAssociations returns an object that can list and get ResolverFirewallRuleGroupAssociations.
func (s *resolverFirewallRuleGroupAssociationLister) ResolverFirewallRuleGroupAssociations(namespace string) ResolverFirewallRuleGroupAssociationNamespaceLister {
	return resolverFirewallRuleGroupAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResolverFirewallRuleGroupAssociationNamespaceLister helps list and get ResolverFirewallRuleGroupAssociations.
// All objects returned here must be treated as read-only.
type ResolverFirewallRuleGroupAssociationNamespaceLister interface {
	// List lists all ResolverFirewallRuleGroupAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallRuleGroupAssociation, err error)
	// Get retrieves the ResolverFirewallRuleGroupAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResolverFirewallRuleGroupAssociation, error)
	ResolverFirewallRuleGroupAssociationNamespaceListerExpansion
}

// resolverFirewallRuleGroupAssociationNamespaceLister implements the ResolverFirewallRuleGroupAssociationNamespaceLister
// interface.
type resolverFirewallRuleGroupAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResolverFirewallRuleGroupAssociations in the indexer for a given namespace.
func (s resolverFirewallRuleGroupAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResolverFirewallRuleGroupAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResolverFirewallRuleGroupAssociation))
	})
	return ret, err
}

// Get retrieves the ResolverFirewallRuleGroupAssociation from the indexer for a given namespace and name.
func (s resolverFirewallRuleGroupAssociationNamespaceLister) Get(name string) (*v1alpha1.ResolverFirewallRuleGroupAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resolverfirewallrulegroupassociation"), name)
	}
	return obj.(*v1alpha1.ResolverFirewallRuleGroupAssociation), nil
}
