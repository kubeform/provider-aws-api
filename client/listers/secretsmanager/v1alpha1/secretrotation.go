/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/secretsmanager/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecretRotationLister helps list SecretRotations.
// All objects returned here must be treated as read-only.
type SecretRotationLister interface {
	// List lists all SecretRotations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecretRotation, err error)
	// SecretRotations returns an object that can list and get SecretRotations.
	SecretRotations(namespace string) SecretRotationNamespaceLister
	SecretRotationListerExpansion
}

// secretRotationLister implements the SecretRotationLister interface.
type secretRotationLister struct {
	indexer cache.Indexer
}

// NewSecretRotationLister returns a new SecretRotationLister.
func NewSecretRotationLister(indexer cache.Indexer) SecretRotationLister {
	return &secretRotationLister{indexer: indexer}
}

// List lists all SecretRotations in the indexer.
func (s *secretRotationLister) List(selector labels.Selector) (ret []*v1alpha1.SecretRotation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretRotation))
	})
	return ret, err
}

// SecretRotations returns an object that can list and get SecretRotations.
func (s *secretRotationLister) SecretRotations(namespace string) SecretRotationNamespaceLister {
	return secretRotationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecretRotationNamespaceLister helps list and get SecretRotations.
// All objects returned here must be treated as read-only.
type SecretRotationNamespaceLister interface {
	// List lists all SecretRotations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecretRotation, err error)
	// Get retrieves the SecretRotation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SecretRotation, error)
	SecretRotationNamespaceListerExpansion
}

// secretRotationNamespaceLister implements the SecretRotationNamespaceLister
// interface.
type secretRotationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecretRotations in the indexer for a given namespace.
func (s secretRotationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecretRotation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretRotation))
	})
	return ret, err
}

// Get retrieves the SecretRotation from the indexer for a given namespace and name.
func (s secretRotationNamespaceLister) Get(name string) (*v1alpha1.SecretRotation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("secretrotation"), name)
	}
	return obj.(*v1alpha1.SecretRotation), nil
}
