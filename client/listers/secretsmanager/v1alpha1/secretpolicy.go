/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/secretsmanager/v1alpha1"
)

// SecretPolicyLister helps list SecretPolicies.
// All objects returned here must be treated as read-only.
type SecretPolicyLister interface {
	// List lists all SecretPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecretPolicy, err error)
	// SecretPolicies returns an object that can list and get SecretPolicies.
	SecretPolicies(namespace string) SecretPolicyNamespaceLister
	SecretPolicyListerExpansion
}

// secretPolicyLister implements the SecretPolicyLister interface.
type secretPolicyLister struct {
	indexer cache.Indexer
}

// NewSecretPolicyLister returns a new SecretPolicyLister.
func NewSecretPolicyLister(indexer cache.Indexer) SecretPolicyLister {
	return &secretPolicyLister{indexer: indexer}
}

// List lists all SecretPolicies in the indexer.
func (s *secretPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.SecretPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretPolicy))
	})
	return ret, err
}

// SecretPolicies returns an object that can list and get SecretPolicies.
func (s *secretPolicyLister) SecretPolicies(namespace string) SecretPolicyNamespaceLister {
	return secretPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecretPolicyNamespaceLister helps list and get SecretPolicies.
// All objects returned here must be treated as read-only.
type SecretPolicyNamespaceLister interface {
	// List lists all SecretPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecretPolicy, err error)
	// Get retrieves the SecretPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SecretPolicy, error)
	SecretPolicyNamespaceListerExpansion
}

// secretPolicyNamespaceLister implements the SecretPolicyNamespaceLister
// interface.
type secretPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecretPolicies in the indexer for a given namespace.
func (s secretPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecretPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretPolicy))
	})
	return ret, err
}

// Get retrieves the SecretPolicy from the indexer for a given namespace and name.
func (s secretPolicyNamespaceLister) Get(name string) (*v1alpha1.SecretPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("secretpolicy"), name)
	}
	return obj.(*v1alpha1.SecretPolicy), nil
}
