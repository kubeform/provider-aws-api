/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/storagegateway/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkingStorageLister helps list WorkingStorages.
// All objects returned here must be treated as read-only.
type WorkingStorageLister interface {
	// List lists all WorkingStorages in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkingStorage, err error)
	// WorkingStorages returns an object that can list and get WorkingStorages.
	WorkingStorages(namespace string) WorkingStorageNamespaceLister
	WorkingStorageListerExpansion
}

// workingStorageLister implements the WorkingStorageLister interface.
type workingStorageLister struct {
	indexer cache.Indexer
}

// NewWorkingStorageLister returns a new WorkingStorageLister.
func NewWorkingStorageLister(indexer cache.Indexer) WorkingStorageLister {
	return &workingStorageLister{indexer: indexer}
}

// List lists all WorkingStorages in the indexer.
func (s *workingStorageLister) List(selector labels.Selector) (ret []*v1alpha1.WorkingStorage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkingStorage))
	})
	return ret, err
}

// WorkingStorages returns an object that can list and get WorkingStorages.
func (s *workingStorageLister) WorkingStorages(namespace string) WorkingStorageNamespaceLister {
	return workingStorageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkingStorageNamespaceLister helps list and get WorkingStorages.
// All objects returned here must be treated as read-only.
type WorkingStorageNamespaceLister interface {
	// List lists all WorkingStorages in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkingStorage, err error)
	// Get retrieves the WorkingStorage from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WorkingStorage, error)
	WorkingStorageNamespaceListerExpansion
}

// workingStorageNamespaceLister implements the WorkingStorageNamespaceLister
// interface.
type workingStorageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkingStorages in the indexer for a given namespace.
func (s workingStorageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WorkingStorage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkingStorage))
	})
	return ret, err
}

// Get retrieves the WorkingStorage from the indexer for a given namespace and name.
func (s workingStorageNamespaceLister) Get(name string) (*v1alpha1.WorkingStorage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("workingstorage"), name)
	}
	return obj.(*v1alpha1.WorkingStorage), nil
}
