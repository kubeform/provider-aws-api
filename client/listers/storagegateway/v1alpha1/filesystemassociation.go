/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/storagegateway/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FileSystemAssociationLister helps list FileSystemAssociations.
// All objects returned here must be treated as read-only.
type FileSystemAssociationLister interface {
	// List lists all FileSystemAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FileSystemAssociation, err error)
	// FileSystemAssociations returns an object that can list and get FileSystemAssociations.
	FileSystemAssociations(namespace string) FileSystemAssociationNamespaceLister
	FileSystemAssociationListerExpansion
}

// fileSystemAssociationLister implements the FileSystemAssociationLister interface.
type fileSystemAssociationLister struct {
	indexer cache.Indexer
}

// NewFileSystemAssociationLister returns a new FileSystemAssociationLister.
func NewFileSystemAssociationLister(indexer cache.Indexer) FileSystemAssociationLister {
	return &fileSystemAssociationLister{indexer: indexer}
}

// List lists all FileSystemAssociations in the indexer.
func (s *fileSystemAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.FileSystemAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FileSystemAssociation))
	})
	return ret, err
}

// FileSystemAssociations returns an object that can list and get FileSystemAssociations.
func (s *fileSystemAssociationLister) FileSystemAssociations(namespace string) FileSystemAssociationNamespaceLister {
	return fileSystemAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FileSystemAssociationNamespaceLister helps list and get FileSystemAssociations.
// All objects returned here must be treated as read-only.
type FileSystemAssociationNamespaceLister interface {
	// List lists all FileSystemAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FileSystemAssociation, err error)
	// Get retrieves the FileSystemAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FileSystemAssociation, error)
	FileSystemAssociationNamespaceListerExpansion
}

// fileSystemAssociationNamespaceLister implements the FileSystemAssociationNamespaceLister
// interface.
type fileSystemAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FileSystemAssociations in the indexer for a given namespace.
func (s fileSystemAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FileSystemAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FileSystemAssociation))
	})
	return ret, err
}

// Get retrieves the FileSystemAssociation from the indexer for a given namespace and name.
func (s fileSystemAssociationNamespaceLister) Get(name string) (*v1alpha1.FileSystemAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("filesystemassociation"), name)
	}
	return obj.(*v1alpha1.FileSystemAssociation), nil
}
