/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/storagegateway/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UploadBufferLister helps list UploadBuffers.
// All objects returned here must be treated as read-only.
type UploadBufferLister interface {
	// List lists all UploadBuffers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UploadBuffer, err error)
	// UploadBuffers returns an object that can list and get UploadBuffers.
	UploadBuffers(namespace string) UploadBufferNamespaceLister
	UploadBufferListerExpansion
}

// uploadBufferLister implements the UploadBufferLister interface.
type uploadBufferLister struct {
	indexer cache.Indexer
}

// NewUploadBufferLister returns a new UploadBufferLister.
func NewUploadBufferLister(indexer cache.Indexer) UploadBufferLister {
	return &uploadBufferLister{indexer: indexer}
}

// List lists all UploadBuffers in the indexer.
func (s *uploadBufferLister) List(selector labels.Selector) (ret []*v1alpha1.UploadBuffer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UploadBuffer))
	})
	return ret, err
}

// UploadBuffers returns an object that can list and get UploadBuffers.
func (s *uploadBufferLister) UploadBuffers(namespace string) UploadBufferNamespaceLister {
	return uploadBufferNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UploadBufferNamespaceLister helps list and get UploadBuffers.
// All objects returned here must be treated as read-only.
type UploadBufferNamespaceLister interface {
	// List lists all UploadBuffers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UploadBuffer, err error)
	// Get retrieves the UploadBuffer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UploadBuffer, error)
	UploadBufferNamespaceListerExpansion
}

// uploadBufferNamespaceLister implements the UploadBufferNamespaceLister
// interface.
type uploadBufferNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UploadBuffers in the indexer for a given namespace.
func (s uploadBufferNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UploadBuffer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UploadBuffer))
	})
	return ret, err
}

// Get retrieves the UploadBuffer from the indexer for a given namespace and name.
func (s uploadBufferNamespaceLister) Get(name string) (*v1alpha1.UploadBuffer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("uploadbuffer"), name)
	}
	return obj.(*v1alpha1.UploadBuffer), nil
}
