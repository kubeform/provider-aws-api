/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/storagegateway/v1alpha1"
)

// SmbFileShareLister helps list SmbFileShares.
// All objects returned here must be treated as read-only.
type SmbFileShareLister interface {
	// List lists all SmbFileShares in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SmbFileShare, err error)
	// SmbFileShares returns an object that can list and get SmbFileShares.
	SmbFileShares(namespace string) SmbFileShareNamespaceLister
	SmbFileShareListerExpansion
}

// smbFileShareLister implements the SmbFileShareLister interface.
type smbFileShareLister struct {
	indexer cache.Indexer
}

// NewSmbFileShareLister returns a new SmbFileShareLister.
func NewSmbFileShareLister(indexer cache.Indexer) SmbFileShareLister {
	return &smbFileShareLister{indexer: indexer}
}

// List lists all SmbFileShares in the indexer.
func (s *smbFileShareLister) List(selector labels.Selector) (ret []*v1alpha1.SmbFileShare, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SmbFileShare))
	})
	return ret, err
}

// SmbFileShares returns an object that can list and get SmbFileShares.
func (s *smbFileShareLister) SmbFileShares(namespace string) SmbFileShareNamespaceLister {
	return smbFileShareNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SmbFileShareNamespaceLister helps list and get SmbFileShares.
// All objects returned here must be treated as read-only.
type SmbFileShareNamespaceLister interface {
	// List lists all SmbFileShares in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SmbFileShare, err error)
	// Get retrieves the SmbFileShare from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SmbFileShare, error)
	SmbFileShareNamespaceListerExpansion
}

// smbFileShareNamespaceLister implements the SmbFileShareNamespaceLister
// interface.
type smbFileShareNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SmbFileShares in the indexer for a given namespace.
func (s smbFileShareNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SmbFileShare, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SmbFileShare))
	})
	return ret, err
}

// Get retrieves the SmbFileShare from the indexer for a given namespace and name.
func (s smbFileShareNamespaceLister) Get(name string) (*v1alpha1.SmbFileShare, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("smbfileshare"), name)
	}
	return obj.(*v1alpha1.SmbFileShare), nil
}
