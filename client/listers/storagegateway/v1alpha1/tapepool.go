/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/storagegateway/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TapePoolLister helps list TapePools.
// All objects returned here must be treated as read-only.
type TapePoolLister interface {
	// List lists all TapePools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TapePool, err error)
	// TapePools returns an object that can list and get TapePools.
	TapePools(namespace string) TapePoolNamespaceLister
	TapePoolListerExpansion
}

// tapePoolLister implements the TapePoolLister interface.
type tapePoolLister struct {
	indexer cache.Indexer
}

// NewTapePoolLister returns a new TapePoolLister.
func NewTapePoolLister(indexer cache.Indexer) TapePoolLister {
	return &tapePoolLister{indexer: indexer}
}

// List lists all TapePools in the indexer.
func (s *tapePoolLister) List(selector labels.Selector) (ret []*v1alpha1.TapePool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TapePool))
	})
	return ret, err
}

// TapePools returns an object that can list and get TapePools.
func (s *tapePoolLister) TapePools(namespace string) TapePoolNamespaceLister {
	return tapePoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TapePoolNamespaceLister helps list and get TapePools.
// All objects returned here must be treated as read-only.
type TapePoolNamespaceLister interface {
	// List lists all TapePools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TapePool, err error)
	// Get retrieves the TapePool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TapePool, error)
	TapePoolNamespaceListerExpansion
}

// tapePoolNamespaceLister implements the TapePoolNamespaceLister
// interface.
type tapePoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TapePools in the indexer for a given namespace.
func (s tapePoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TapePool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TapePool))
	})
	return ret, err
}

// Get retrieves the TapePool from the indexer for a given namespace and name.
func (s tapePoolNamespaceLister) Get(name string) (*v1alpha1.TapePool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tapepool"), name)
	}
	return obj.(*v1alpha1.TapePool), nil
}
