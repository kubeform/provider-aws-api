/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/fsx/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WindowsFileSystemLister helps list WindowsFileSystems.
// All objects returned here must be treated as read-only.
type WindowsFileSystemLister interface {
	// List lists all WindowsFileSystems in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WindowsFileSystem, err error)
	// WindowsFileSystems returns an object that can list and get WindowsFileSystems.
	WindowsFileSystems(namespace string) WindowsFileSystemNamespaceLister
	WindowsFileSystemListerExpansion
}

// windowsFileSystemLister implements the WindowsFileSystemLister interface.
type windowsFileSystemLister struct {
	indexer cache.Indexer
}

// NewWindowsFileSystemLister returns a new WindowsFileSystemLister.
func NewWindowsFileSystemLister(indexer cache.Indexer) WindowsFileSystemLister {
	return &windowsFileSystemLister{indexer: indexer}
}

// List lists all WindowsFileSystems in the indexer.
func (s *windowsFileSystemLister) List(selector labels.Selector) (ret []*v1alpha1.WindowsFileSystem, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WindowsFileSystem))
	})
	return ret, err
}

// WindowsFileSystems returns an object that can list and get WindowsFileSystems.
func (s *windowsFileSystemLister) WindowsFileSystems(namespace string) WindowsFileSystemNamespaceLister {
	return windowsFileSystemNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WindowsFileSystemNamespaceLister helps list and get WindowsFileSystems.
// All objects returned here must be treated as read-only.
type WindowsFileSystemNamespaceLister interface {
	// List lists all WindowsFileSystems in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WindowsFileSystem, err error)
	// Get retrieves the WindowsFileSystem from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WindowsFileSystem, error)
	WindowsFileSystemNamespaceListerExpansion
}

// windowsFileSystemNamespaceLister implements the WindowsFileSystemNamespaceLister
// interface.
type windowsFileSystemNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WindowsFileSystems in the indexer for a given namespace.
func (s windowsFileSystemNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WindowsFileSystem, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WindowsFileSystem))
	})
	return ret, err
}

// Get retrieves the WindowsFileSystem from the indexer for a given namespace and name.
func (s windowsFileSystemNamespaceLister) Get(name string) (*v1alpha1.WindowsFileSystem, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("windowsfilesystem"), name)
	}
	return obj.(*v1alpha1.WindowsFileSystem), nil
}
