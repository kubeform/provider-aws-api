/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/fsx/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpenzfsVolumeLister helps list OpenzfsVolumes.
// All objects returned here must be treated as read-only.
type OpenzfsVolumeLister interface {
	// List lists all OpenzfsVolumes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OpenzfsVolume, err error)
	// OpenzfsVolumes returns an object that can list and get OpenzfsVolumes.
	OpenzfsVolumes(namespace string) OpenzfsVolumeNamespaceLister
	OpenzfsVolumeListerExpansion
}

// openzfsVolumeLister implements the OpenzfsVolumeLister interface.
type openzfsVolumeLister struct {
	indexer cache.Indexer
}

// NewOpenzfsVolumeLister returns a new OpenzfsVolumeLister.
func NewOpenzfsVolumeLister(indexer cache.Indexer) OpenzfsVolumeLister {
	return &openzfsVolumeLister{indexer: indexer}
}

// List lists all OpenzfsVolumes in the indexer.
func (s *openzfsVolumeLister) List(selector labels.Selector) (ret []*v1alpha1.OpenzfsVolume, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenzfsVolume))
	})
	return ret, err
}

// OpenzfsVolumes returns an object that can list and get OpenzfsVolumes.
func (s *openzfsVolumeLister) OpenzfsVolumes(namespace string) OpenzfsVolumeNamespaceLister {
	return openzfsVolumeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OpenzfsVolumeNamespaceLister helps list and get OpenzfsVolumes.
// All objects returned here must be treated as read-only.
type OpenzfsVolumeNamespaceLister interface {
	// List lists all OpenzfsVolumes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OpenzfsVolume, err error)
	// Get retrieves the OpenzfsVolume from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OpenzfsVolume, error)
	OpenzfsVolumeNamespaceListerExpansion
}

// openzfsVolumeNamespaceLister implements the OpenzfsVolumeNamespaceLister
// interface.
type openzfsVolumeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OpenzfsVolumes in the indexer for a given namespace.
func (s openzfsVolumeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OpenzfsVolume, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenzfsVolume))
	})
	return ret, err
}

// Get retrieves the OpenzfsVolume from the indexer for a given namespace and name.
func (s openzfsVolumeNamespaceLister) Get(name string) (*v1alpha1.OpenzfsVolume, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("openzfsvolume"), name)
	}
	return obj.(*v1alpha1.OpenzfsVolume), nil
}
