/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/fsx/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpenzfsSnapshotLister helps list OpenzfsSnapshots.
// All objects returned here must be treated as read-only.
type OpenzfsSnapshotLister interface {
	// List lists all OpenzfsSnapshots in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OpenzfsSnapshot, err error)
	// OpenzfsSnapshots returns an object that can list and get OpenzfsSnapshots.
	OpenzfsSnapshots(namespace string) OpenzfsSnapshotNamespaceLister
	OpenzfsSnapshotListerExpansion
}

// openzfsSnapshotLister implements the OpenzfsSnapshotLister interface.
type openzfsSnapshotLister struct {
	indexer cache.Indexer
}

// NewOpenzfsSnapshotLister returns a new OpenzfsSnapshotLister.
func NewOpenzfsSnapshotLister(indexer cache.Indexer) OpenzfsSnapshotLister {
	return &openzfsSnapshotLister{indexer: indexer}
}

// List lists all OpenzfsSnapshots in the indexer.
func (s *openzfsSnapshotLister) List(selector labels.Selector) (ret []*v1alpha1.OpenzfsSnapshot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenzfsSnapshot))
	})
	return ret, err
}

// OpenzfsSnapshots returns an object that can list and get OpenzfsSnapshots.
func (s *openzfsSnapshotLister) OpenzfsSnapshots(namespace string) OpenzfsSnapshotNamespaceLister {
	return openzfsSnapshotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OpenzfsSnapshotNamespaceLister helps list and get OpenzfsSnapshots.
// All objects returned here must be treated as read-only.
type OpenzfsSnapshotNamespaceLister interface {
	// List lists all OpenzfsSnapshots in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OpenzfsSnapshot, err error)
	// Get retrieves the OpenzfsSnapshot from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OpenzfsSnapshot, error)
	OpenzfsSnapshotNamespaceListerExpansion
}

// openzfsSnapshotNamespaceLister implements the OpenzfsSnapshotNamespaceLister
// interface.
type openzfsSnapshotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OpenzfsSnapshots in the indexer for a given namespace.
func (s openzfsSnapshotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OpenzfsSnapshot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenzfsSnapshot))
	})
	return ret, err
}

// Get retrieves the OpenzfsSnapshot from the indexer for a given namespace and name.
func (s openzfsSnapshotNamespaceLister) Get(name string) (*v1alpha1.OpenzfsSnapshot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("openzfssnapshot"), name)
	}
	return obj.(*v1alpha1.OpenzfsSnapshot), nil
}
