/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/fsx/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpenzfsFileSystemLister helps list OpenzfsFileSystems.
// All objects returned here must be treated as read-only.
type OpenzfsFileSystemLister interface {
	// List lists all OpenzfsFileSystems in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OpenzfsFileSystem, err error)
	// OpenzfsFileSystems returns an object that can list and get OpenzfsFileSystems.
	OpenzfsFileSystems(namespace string) OpenzfsFileSystemNamespaceLister
	OpenzfsFileSystemListerExpansion
}

// openzfsFileSystemLister implements the OpenzfsFileSystemLister interface.
type openzfsFileSystemLister struct {
	indexer cache.Indexer
}

// NewOpenzfsFileSystemLister returns a new OpenzfsFileSystemLister.
func NewOpenzfsFileSystemLister(indexer cache.Indexer) OpenzfsFileSystemLister {
	return &openzfsFileSystemLister{indexer: indexer}
}

// List lists all OpenzfsFileSystems in the indexer.
func (s *openzfsFileSystemLister) List(selector labels.Selector) (ret []*v1alpha1.OpenzfsFileSystem, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenzfsFileSystem))
	})
	return ret, err
}

// OpenzfsFileSystems returns an object that can list and get OpenzfsFileSystems.
func (s *openzfsFileSystemLister) OpenzfsFileSystems(namespace string) OpenzfsFileSystemNamespaceLister {
	return openzfsFileSystemNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OpenzfsFileSystemNamespaceLister helps list and get OpenzfsFileSystems.
// All objects returned here must be treated as read-only.
type OpenzfsFileSystemNamespaceLister interface {
	// List lists all OpenzfsFileSystems in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OpenzfsFileSystem, err error)
	// Get retrieves the OpenzfsFileSystem from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OpenzfsFileSystem, error)
	OpenzfsFileSystemNamespaceListerExpansion
}

// openzfsFileSystemNamespaceLister implements the OpenzfsFileSystemNamespaceLister
// interface.
type openzfsFileSystemNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OpenzfsFileSystems in the indexer for a given namespace.
func (s openzfsFileSystemNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OpenzfsFileSystem, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenzfsFileSystem))
	})
	return ret, err
}

// Get retrieves the OpenzfsFileSystem from the indexer for a given namespace and name.
func (s openzfsFileSystemNamespaceLister) Get(name string) (*v1alpha1.OpenzfsFileSystem, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("openzfsfilesystem"), name)
	}
	return obj.(*v1alpha1.OpenzfsFileSystem), nil
}
