/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/fsx/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataRepositoryAssociationLister helps list DataRepositoryAssociations.
// All objects returned here must be treated as read-only.
type DataRepositoryAssociationLister interface {
	// List lists all DataRepositoryAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataRepositoryAssociation, err error)
	// DataRepositoryAssociations returns an object that can list and get DataRepositoryAssociations.
	DataRepositoryAssociations(namespace string) DataRepositoryAssociationNamespaceLister
	DataRepositoryAssociationListerExpansion
}

// dataRepositoryAssociationLister implements the DataRepositoryAssociationLister interface.
type dataRepositoryAssociationLister struct {
	indexer cache.Indexer
}

// NewDataRepositoryAssociationLister returns a new DataRepositoryAssociationLister.
func NewDataRepositoryAssociationLister(indexer cache.Indexer) DataRepositoryAssociationLister {
	return &dataRepositoryAssociationLister{indexer: indexer}
}

// List lists all DataRepositoryAssociations in the indexer.
func (s *dataRepositoryAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.DataRepositoryAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataRepositoryAssociation))
	})
	return ret, err
}

// DataRepositoryAssociations returns an object that can list and get DataRepositoryAssociations.
func (s *dataRepositoryAssociationLister) DataRepositoryAssociations(namespace string) DataRepositoryAssociationNamespaceLister {
	return dataRepositoryAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataRepositoryAssociationNamespaceLister helps list and get DataRepositoryAssociations.
// All objects returned here must be treated as read-only.
type DataRepositoryAssociationNamespaceLister interface {
	// List lists all DataRepositoryAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataRepositoryAssociation, err error)
	// Get retrieves the DataRepositoryAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DataRepositoryAssociation, error)
	DataRepositoryAssociationNamespaceListerExpansion
}

// dataRepositoryAssociationNamespaceLister implements the DataRepositoryAssociationNamespaceLister
// interface.
type dataRepositoryAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataRepositoryAssociations in the indexer for a given namespace.
func (s dataRepositoryAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataRepositoryAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataRepositoryAssociation))
	})
	return ret, err
}

// Get retrieves the DataRepositoryAssociation from the indexer for a given namespace and name.
func (s dataRepositoryAssociationNamespaceLister) Get(name string) (*v1alpha1.DataRepositoryAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datarepositoryassociation"), name)
	}
	return obj.(*v1alpha1.DataRepositoryAssociation), nil
}
