/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/fsx/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LustreFileSystemLister helps list LustreFileSystems.
// All objects returned here must be treated as read-only.
type LustreFileSystemLister interface {
	// List lists all LustreFileSystems in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LustreFileSystem, err error)
	// LustreFileSystems returns an object that can list and get LustreFileSystems.
	LustreFileSystems(namespace string) LustreFileSystemNamespaceLister
	LustreFileSystemListerExpansion
}

// lustreFileSystemLister implements the LustreFileSystemLister interface.
type lustreFileSystemLister struct {
	indexer cache.Indexer
}

// NewLustreFileSystemLister returns a new LustreFileSystemLister.
func NewLustreFileSystemLister(indexer cache.Indexer) LustreFileSystemLister {
	return &lustreFileSystemLister{indexer: indexer}
}

// List lists all LustreFileSystems in the indexer.
func (s *lustreFileSystemLister) List(selector labels.Selector) (ret []*v1alpha1.LustreFileSystem, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LustreFileSystem))
	})
	return ret, err
}

// LustreFileSystems returns an object that can list and get LustreFileSystems.
func (s *lustreFileSystemLister) LustreFileSystems(namespace string) LustreFileSystemNamespaceLister {
	return lustreFileSystemNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LustreFileSystemNamespaceLister helps list and get LustreFileSystems.
// All objects returned here must be treated as read-only.
type LustreFileSystemNamespaceLister interface {
	// List lists all LustreFileSystems in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LustreFileSystem, err error)
	// Get retrieves the LustreFileSystem from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LustreFileSystem, error)
	LustreFileSystemNamespaceListerExpansion
}

// lustreFileSystemNamespaceLister implements the LustreFileSystemNamespaceLister
// interface.
type lustreFileSystemNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LustreFileSystems in the indexer for a given namespace.
func (s lustreFileSystemNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LustreFileSystem, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LustreFileSystem))
	})
	return ret, err
}

// Get retrieves the LustreFileSystem from the indexer for a given namespace and name.
func (s lustreFileSystemNamespaceLister) Get(name string) (*v1alpha1.LustreFileSystem, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lustrefilesystem"), name)
	}
	return obj.(*v1alpha1.LustreFileSystem), nil
}
