/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/eks/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IdentityProviderConfigLister helps list IdentityProviderConfigs.
// All objects returned here must be treated as read-only.
type IdentityProviderConfigLister interface {
	// List lists all IdentityProviderConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderConfig, err error)
	// IdentityProviderConfigs returns an object that can list and get IdentityProviderConfigs.
	IdentityProviderConfigs(namespace string) IdentityProviderConfigNamespaceLister
	IdentityProviderConfigListerExpansion
}

// identityProviderConfigLister implements the IdentityProviderConfigLister interface.
type identityProviderConfigLister struct {
	indexer cache.Indexer
}

// NewIdentityProviderConfigLister returns a new IdentityProviderConfigLister.
func NewIdentityProviderConfigLister(indexer cache.Indexer) IdentityProviderConfigLister {
	return &identityProviderConfigLister{indexer: indexer}
}

// List lists all IdentityProviderConfigs in the indexer.
func (s *identityProviderConfigLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityProviderConfig))
	})
	return ret, err
}

// IdentityProviderConfigs returns an object that can list and get IdentityProviderConfigs.
func (s *identityProviderConfigLister) IdentityProviderConfigs(namespace string) IdentityProviderConfigNamespaceLister {
	return identityProviderConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IdentityProviderConfigNamespaceLister helps list and get IdentityProviderConfigs.
// All objects returned here must be treated as read-only.
type IdentityProviderConfigNamespaceLister interface {
	// List lists all IdentityProviderConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderConfig, err error)
	// Get retrieves the IdentityProviderConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IdentityProviderConfig, error)
	IdentityProviderConfigNamespaceListerExpansion
}

// identityProviderConfigNamespaceLister implements the IdentityProviderConfigNamespaceLister
// interface.
type identityProviderConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IdentityProviderConfigs in the indexer for a given namespace.
func (s identityProviderConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityProviderConfig))
	})
	return ret, err
}

// Get retrieves the IdentityProviderConfig from the indexer for a given namespace and name.
func (s identityProviderConfigNamespaceLister) Get(name string) (*v1alpha1.IdentityProviderConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("identityproviderconfig"), name)
	}
	return obj.(*v1alpha1.IdentityProviderConfig), nil
}
