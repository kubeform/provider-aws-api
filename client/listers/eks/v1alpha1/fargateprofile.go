/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/eks/v1alpha1"
)

// FargateProfileLister helps list FargateProfiles.
// All objects returned here must be treated as read-only.
type FargateProfileLister interface {
	// List lists all FargateProfiles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FargateProfile, err error)
	// FargateProfiles returns an object that can list and get FargateProfiles.
	FargateProfiles(namespace string) FargateProfileNamespaceLister
	FargateProfileListerExpansion
}

// fargateProfileLister implements the FargateProfileLister interface.
type fargateProfileLister struct {
	indexer cache.Indexer
}

// NewFargateProfileLister returns a new FargateProfileLister.
func NewFargateProfileLister(indexer cache.Indexer) FargateProfileLister {
	return &fargateProfileLister{indexer: indexer}
}

// List lists all FargateProfiles in the indexer.
func (s *fargateProfileLister) List(selector labels.Selector) (ret []*v1alpha1.FargateProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FargateProfile))
	})
	return ret, err
}

// FargateProfiles returns an object that can list and get FargateProfiles.
func (s *fargateProfileLister) FargateProfiles(namespace string) FargateProfileNamespaceLister {
	return fargateProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FargateProfileNamespaceLister helps list and get FargateProfiles.
// All objects returned here must be treated as read-only.
type FargateProfileNamespaceLister interface {
	// List lists all FargateProfiles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FargateProfile, err error)
	// Get retrieves the FargateProfile from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FargateProfile, error)
	FargateProfileNamespaceListerExpansion
}

// fargateProfileNamespaceLister implements the FargateProfileNamespaceLister
// interface.
type fargateProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FargateProfiles in the indexer for a given namespace.
func (s fargateProfileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FargateProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FargateProfile))
	})
	return ret, err
}

// Get retrieves the FargateProfile from the indexer for a given namespace and name.
func (s fargateProfileNamespaceLister) Get(name string) (*v1alpha1.FargateProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("fargateprofile"), name)
	}
	return obj.(*v1alpha1.FargateProfile), nil
}
