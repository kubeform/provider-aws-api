/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ecs/v1alpha1"
)

// CapacityProviderLister helps list CapacityProviders.
// All objects returned here must be treated as read-only.
type CapacityProviderLister interface {
	// List lists all CapacityProviders in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CapacityProvider, err error)
	// CapacityProviders returns an object that can list and get CapacityProviders.
	CapacityProviders(namespace string) CapacityProviderNamespaceLister
	CapacityProviderListerExpansion
}

// capacityProviderLister implements the CapacityProviderLister interface.
type capacityProviderLister struct {
	indexer cache.Indexer
}

// NewCapacityProviderLister returns a new CapacityProviderLister.
func NewCapacityProviderLister(indexer cache.Indexer) CapacityProviderLister {
	return &capacityProviderLister{indexer: indexer}
}

// List lists all CapacityProviders in the indexer.
func (s *capacityProviderLister) List(selector labels.Selector) (ret []*v1alpha1.CapacityProvider, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CapacityProvider))
	})
	return ret, err
}

// CapacityProviders returns an object that can list and get CapacityProviders.
func (s *capacityProviderLister) CapacityProviders(namespace string) CapacityProviderNamespaceLister {
	return capacityProviderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CapacityProviderNamespaceLister helps list and get CapacityProviders.
// All objects returned here must be treated as read-only.
type CapacityProviderNamespaceLister interface {
	// List lists all CapacityProviders in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CapacityProvider, err error)
	// Get retrieves the CapacityProvider from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CapacityProvider, error)
	CapacityProviderNamespaceListerExpansion
}

// capacityProviderNamespaceLister implements the CapacityProviderNamespaceLister
// interface.
type capacityProviderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CapacityProviders in the indexer for a given namespace.
func (s capacityProviderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CapacityProvider, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CapacityProvider))
	})
	return ret, err
}

// Get retrieves the CapacityProvider from the indexer for a given namespace and name.
func (s capacityProviderNamespaceLister) Get(name string) (*v1alpha1.CapacityProvider, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("capacityprovider"), name)
	}
	return obj.(*v1alpha1.CapacityProvider), nil
}
