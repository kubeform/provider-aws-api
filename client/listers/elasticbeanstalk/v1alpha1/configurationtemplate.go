/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/elasticbeanstalk/v1alpha1"
)

// ConfigurationTemplateLister helps list ConfigurationTemplates.
// All objects returned here must be treated as read-only.
type ConfigurationTemplateLister interface {
	// List lists all ConfigurationTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationTemplate, err error)
	// ConfigurationTemplates returns an object that can list and get ConfigurationTemplates.
	ConfigurationTemplates(namespace string) ConfigurationTemplateNamespaceLister
	ConfigurationTemplateListerExpansion
}

// configurationTemplateLister implements the ConfigurationTemplateLister interface.
type configurationTemplateLister struct {
	indexer cache.Indexer
}

// NewConfigurationTemplateLister returns a new ConfigurationTemplateLister.
func NewConfigurationTemplateLister(indexer cache.Indexer) ConfigurationTemplateLister {
	return &configurationTemplateLister{indexer: indexer}
}

// List lists all ConfigurationTemplates in the indexer.
func (s *configurationTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationTemplate))
	})
	return ret, err
}

// ConfigurationTemplates returns an object that can list and get ConfigurationTemplates.
func (s *configurationTemplateLister) ConfigurationTemplates(namespace string) ConfigurationTemplateNamespaceLister {
	return configurationTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigurationTemplateNamespaceLister helps list and get ConfigurationTemplates.
// All objects returned here must be treated as read-only.
type ConfigurationTemplateNamespaceLister interface {
	// List lists all ConfigurationTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationTemplate, err error)
	// Get retrieves the ConfigurationTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfigurationTemplate, error)
	ConfigurationTemplateNamespaceListerExpansion
}

// configurationTemplateNamespaceLister implements the ConfigurationTemplateNamespaceLister
// interface.
type configurationTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigurationTemplates in the indexer for a given namespace.
func (s configurationTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationTemplate))
	})
	return ret, err
}

// Get retrieves the ConfigurationTemplate from the indexer for a given namespace and name.
func (s configurationTemplateNamespaceLister) Get(name string) (*v1alpha1.ConfigurationTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configurationtemplate"), name)
	}
	return obj.(*v1alpha1.ConfigurationTemplate), nil
}
