/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/wafv2/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WebACLLoggingConfigurationLister helps list WebACLLoggingConfigurations.
// All objects returned here must be treated as read-only.
type WebACLLoggingConfigurationLister interface {
	// List lists all WebACLLoggingConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WebACLLoggingConfiguration, err error)
	// WebACLLoggingConfigurations returns an object that can list and get WebACLLoggingConfigurations.
	WebACLLoggingConfigurations(namespace string) WebACLLoggingConfigurationNamespaceLister
	WebACLLoggingConfigurationListerExpansion
}

// webACLLoggingConfigurationLister implements the WebACLLoggingConfigurationLister interface.
type webACLLoggingConfigurationLister struct {
	indexer cache.Indexer
}

// NewWebACLLoggingConfigurationLister returns a new WebACLLoggingConfigurationLister.
func NewWebACLLoggingConfigurationLister(indexer cache.Indexer) WebACLLoggingConfigurationLister {
	return &webACLLoggingConfigurationLister{indexer: indexer}
}

// List lists all WebACLLoggingConfigurations in the indexer.
func (s *webACLLoggingConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.WebACLLoggingConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebACLLoggingConfiguration))
	})
	return ret, err
}

// WebACLLoggingConfigurations returns an object that can list and get WebACLLoggingConfigurations.
func (s *webACLLoggingConfigurationLister) WebACLLoggingConfigurations(namespace string) WebACLLoggingConfigurationNamespaceLister {
	return webACLLoggingConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WebACLLoggingConfigurationNamespaceLister helps list and get WebACLLoggingConfigurations.
// All objects returned here must be treated as read-only.
type WebACLLoggingConfigurationNamespaceLister interface {
	// List lists all WebACLLoggingConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WebACLLoggingConfiguration, err error)
	// Get retrieves the WebACLLoggingConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WebACLLoggingConfiguration, error)
	WebACLLoggingConfigurationNamespaceListerExpansion
}

// webACLLoggingConfigurationNamespaceLister implements the WebACLLoggingConfigurationNamespaceLister
// interface.
type webACLLoggingConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WebACLLoggingConfigurations in the indexer for a given namespace.
func (s webACLLoggingConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WebACLLoggingConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebACLLoggingConfiguration))
	})
	return ret, err
}

// Get retrieves the WebACLLoggingConfiguration from the indexer for a given namespace and name.
func (s webACLLoggingConfigurationNamespaceLister) Get(name string) (*v1alpha1.WebACLLoggingConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("webaclloggingconfiguration"), name)
	}
	return obj.(*v1alpha1.WebACLLoggingConfiguration), nil
}
