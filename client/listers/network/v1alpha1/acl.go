/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/network/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AclLister helps list Acls.
// All objects returned here must be treated as read-only.
type AclLister interface {
	// List lists all Acls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Acl, err error)
	// Acls returns an object that can list and get Acls.
	Acls(namespace string) AclNamespaceLister
	AclListerExpansion
}

// aclLister implements the AclLister interface.
type aclLister struct {
	indexer cache.Indexer
}

// NewAclLister returns a new AclLister.
func NewAclLister(indexer cache.Indexer) AclLister {
	return &aclLister{indexer: indexer}
}

// List lists all Acls in the indexer.
func (s *aclLister) List(selector labels.Selector) (ret []*v1alpha1.Acl, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Acl))
	})
	return ret, err
}

// Acls returns an object that can list and get Acls.
func (s *aclLister) Acls(namespace string) AclNamespaceLister {
	return aclNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AclNamespaceLister helps list and get Acls.
// All objects returned here must be treated as read-only.
type AclNamespaceLister interface {
	// List lists all Acls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Acl, err error)
	// Get retrieves the Acl from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Acl, error)
	AclNamespaceListerExpansion
}

// aclNamespaceLister implements the AclNamespaceLister
// interface.
type aclNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Acls in the indexer for a given namespace.
func (s aclNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Acl, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Acl))
	})
	return ret, err
}

// Get retrieves the Acl from the indexer for a given namespace and name.
func (s aclNamespaceLister) Get(name string) (*v1alpha1.Acl, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("acl"), name)
	}
	return obj.(*v1alpha1.Acl), nil
}
