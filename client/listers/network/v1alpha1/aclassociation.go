/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/network/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AclAssociationLister helps list AclAssociations.
// All objects returned here must be treated as read-only.
type AclAssociationLister interface {
	// List lists all AclAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AclAssociation, err error)
	// AclAssociations returns an object that can list and get AclAssociations.
	AclAssociations(namespace string) AclAssociationNamespaceLister
	AclAssociationListerExpansion
}

// aclAssociationLister implements the AclAssociationLister interface.
type aclAssociationLister struct {
	indexer cache.Indexer
}

// NewAclAssociationLister returns a new AclAssociationLister.
func NewAclAssociationLister(indexer cache.Indexer) AclAssociationLister {
	return &aclAssociationLister{indexer: indexer}
}

// List lists all AclAssociations in the indexer.
func (s *aclAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.AclAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AclAssociation))
	})
	return ret, err
}

// AclAssociations returns an object that can list and get AclAssociations.
func (s *aclAssociationLister) AclAssociations(namespace string) AclAssociationNamespaceLister {
	return aclAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AclAssociationNamespaceLister helps list and get AclAssociations.
// All objects returned here must be treated as read-only.
type AclAssociationNamespaceLister interface {
	// List lists all AclAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AclAssociation, err error)
	// Get retrieves the AclAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AclAssociation, error)
	AclAssociationNamespaceListerExpansion
}

// aclAssociationNamespaceLister implements the AclAssociationNamespaceLister
// interface.
type aclAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AclAssociations in the indexer for a given namespace.
func (s aclAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AclAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AclAssociation))
	})
	return ret, err
}

// Get retrieves the AclAssociation from the indexer for a given namespace and name.
func (s aclAssociationNamespaceLister) Get(name string) (*v1alpha1.AclAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aclassociation"), name)
	}
	return obj.(*v1alpha1.AclAssociation), nil
}
