/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ecr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RepositoryPolicyLister helps list RepositoryPolicies.
// All objects returned here must be treated as read-only.
type RepositoryPolicyLister interface {
	// List lists all RepositoryPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RepositoryPolicy, err error)
	// RepositoryPolicies returns an object that can list and get RepositoryPolicies.
	RepositoryPolicies(namespace string) RepositoryPolicyNamespaceLister
	RepositoryPolicyListerExpansion
}

// repositoryPolicyLister implements the RepositoryPolicyLister interface.
type repositoryPolicyLister struct {
	indexer cache.Indexer
}

// NewRepositoryPolicyLister returns a new RepositoryPolicyLister.
func NewRepositoryPolicyLister(indexer cache.Indexer) RepositoryPolicyLister {
	return &repositoryPolicyLister{indexer: indexer}
}

// List lists all RepositoryPolicies in the indexer.
func (s *repositoryPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.RepositoryPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RepositoryPolicy))
	})
	return ret, err
}

// RepositoryPolicies returns an object that can list and get RepositoryPolicies.
func (s *repositoryPolicyLister) RepositoryPolicies(namespace string) RepositoryPolicyNamespaceLister {
	return repositoryPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RepositoryPolicyNamespaceLister helps list and get RepositoryPolicies.
// All objects returned here must be treated as read-only.
type RepositoryPolicyNamespaceLister interface {
	// List lists all RepositoryPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RepositoryPolicy, err error)
	// Get retrieves the RepositoryPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RepositoryPolicy, error)
	RepositoryPolicyNamespaceListerExpansion
}

// repositoryPolicyNamespaceLister implements the RepositoryPolicyNamespaceLister
// interface.
type repositoryPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RepositoryPolicies in the indexer for a given namespace.
func (s repositoryPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RepositoryPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RepositoryPolicy))
	})
	return ret, err
}

// Get retrieves the RepositoryPolicy from the indexer for a given namespace and name.
func (s repositoryPolicyNamespaceLister) Get(name string) (*v1alpha1.RepositoryPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("repositorypolicy"), name)
	}
	return obj.(*v1alpha1.RepositoryPolicy), nil
}
