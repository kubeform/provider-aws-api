/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ecr/v1alpha1"
)

// RegistryPolicyLister helps list RegistryPolicies.
// All objects returned here must be treated as read-only.
type RegistryPolicyLister interface {
	// List lists all RegistryPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegistryPolicy, err error)
	// RegistryPolicies returns an object that can list and get RegistryPolicies.
	RegistryPolicies(namespace string) RegistryPolicyNamespaceLister
	RegistryPolicyListerExpansion
}

// registryPolicyLister implements the RegistryPolicyLister interface.
type registryPolicyLister struct {
	indexer cache.Indexer
}

// NewRegistryPolicyLister returns a new RegistryPolicyLister.
func NewRegistryPolicyLister(indexer cache.Indexer) RegistryPolicyLister {
	return &registryPolicyLister{indexer: indexer}
}

// List lists all RegistryPolicies in the indexer.
func (s *registryPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.RegistryPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegistryPolicy))
	})
	return ret, err
}

// RegistryPolicies returns an object that can list and get RegistryPolicies.
func (s *registryPolicyLister) RegistryPolicies(namespace string) RegistryPolicyNamespaceLister {
	return registryPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegistryPolicyNamespaceLister helps list and get RegistryPolicies.
// All objects returned here must be treated as read-only.
type RegistryPolicyNamespaceLister interface {
	// List lists all RegistryPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegistryPolicy, err error)
	// Get retrieves the RegistryPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegistryPolicy, error)
	RegistryPolicyNamespaceListerExpansion
}

// registryPolicyNamespaceLister implements the RegistryPolicyNamespaceLister
// interface.
type registryPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegistryPolicies in the indexer for a given namespace.
func (s registryPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegistryPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegistryPolicy))
	})
	return ret, err
}

// Get retrieves the RegistryPolicy from the indexer for a given namespace and name.
func (s registryPolicyNamespaceLister) Get(name string) (*v1alpha1.RegistryPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("registrypolicy"), name)
	}
	return obj.(*v1alpha1.RegistryPolicy), nil
}
