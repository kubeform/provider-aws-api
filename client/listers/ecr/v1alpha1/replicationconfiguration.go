/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ecr/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReplicationConfigurationLister helps list ReplicationConfigurations.
// All objects returned here must be treated as read-only.
type ReplicationConfigurationLister interface {
	// List lists all ReplicationConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicationConfiguration, err error)
	// ReplicationConfigurations returns an object that can list and get ReplicationConfigurations.
	ReplicationConfigurations(namespace string) ReplicationConfigurationNamespaceLister
	ReplicationConfigurationListerExpansion
}

// replicationConfigurationLister implements the ReplicationConfigurationLister interface.
type replicationConfigurationLister struct {
	indexer cache.Indexer
}

// NewReplicationConfigurationLister returns a new ReplicationConfigurationLister.
func NewReplicationConfigurationLister(indexer cache.Indexer) ReplicationConfigurationLister {
	return &replicationConfigurationLister{indexer: indexer}
}

// List lists all ReplicationConfigurations in the indexer.
func (s *replicationConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicationConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicationConfiguration))
	})
	return ret, err
}

// ReplicationConfigurations returns an object that can list and get ReplicationConfigurations.
func (s *replicationConfigurationLister) ReplicationConfigurations(namespace string) ReplicationConfigurationNamespaceLister {
	return replicationConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReplicationConfigurationNamespaceLister helps list and get ReplicationConfigurations.
// All objects returned here must be treated as read-only.
type ReplicationConfigurationNamespaceLister interface {
	// List lists all ReplicationConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicationConfiguration, err error)
	// Get retrieves the ReplicationConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ReplicationConfiguration, error)
	ReplicationConfigurationNamespaceListerExpansion
}

// replicationConfigurationNamespaceLister implements the ReplicationConfigurationNamespaceLister
// interface.
type replicationConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReplicationConfigurations in the indexer for a given namespace.
func (s replicationConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicationConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicationConfiguration))
	})
	return ret, err
}

// Get retrieves the ReplicationConfiguration from the indexer for a given namespace and name.
func (s replicationConfigurationNamespaceLister) Get(name string) (*v1alpha1.ReplicationConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("replicationconfiguration"), name)
	}
	return obj.(*v1alpha1.ReplicationConfiguration), nil
}
