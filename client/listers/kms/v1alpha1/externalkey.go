/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/kms/v1alpha1"
)

// ExternalKeyLister helps list ExternalKeys.
// All objects returned here must be treated as read-only.
type ExternalKeyLister interface {
	// List lists all ExternalKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ExternalKey, err error)
	// ExternalKeys returns an object that can list and get ExternalKeys.
	ExternalKeys(namespace string) ExternalKeyNamespaceLister
	ExternalKeyListerExpansion
}

// externalKeyLister implements the ExternalKeyLister interface.
type externalKeyLister struct {
	indexer cache.Indexer
}

// NewExternalKeyLister returns a new ExternalKeyLister.
func NewExternalKeyLister(indexer cache.Indexer) ExternalKeyLister {
	return &externalKeyLister{indexer: indexer}
}

// List lists all ExternalKeys in the indexer.
func (s *externalKeyLister) List(selector labels.Selector) (ret []*v1alpha1.ExternalKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExternalKey))
	})
	return ret, err
}

// ExternalKeys returns an object that can list and get ExternalKeys.
func (s *externalKeyLister) ExternalKeys(namespace string) ExternalKeyNamespaceLister {
	return externalKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExternalKeyNamespaceLister helps list and get ExternalKeys.
// All objects returned here must be treated as read-only.
type ExternalKeyNamespaceLister interface {
	// List lists all ExternalKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ExternalKey, err error)
	// Get retrieves the ExternalKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ExternalKey, error)
	ExternalKeyNamespaceListerExpansion
}

// externalKeyNamespaceLister implements the ExternalKeyNamespaceLister
// interface.
type externalKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExternalKeys in the indexer for a given namespace.
func (s externalKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ExternalKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExternalKey))
	})
	return ret, err
}

// Get retrieves the ExternalKey from the indexer for a given namespace and name.
func (s externalKeyNamespaceLister) Get(name string) (*v1alpha1.ExternalKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("externalkey"), name)
	}
	return obj.(*v1alpha1.ExternalKey), nil
}
