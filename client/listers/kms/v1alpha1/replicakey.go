/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/kms/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReplicaKeyLister helps list ReplicaKeys.
// All objects returned here must be treated as read-only.
type ReplicaKeyLister interface {
	// List lists all ReplicaKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicaKey, err error)
	// ReplicaKeys returns an object that can list and get ReplicaKeys.
	ReplicaKeys(namespace string) ReplicaKeyNamespaceLister
	ReplicaKeyListerExpansion
}

// replicaKeyLister implements the ReplicaKeyLister interface.
type replicaKeyLister struct {
	indexer cache.Indexer
}

// NewReplicaKeyLister returns a new ReplicaKeyLister.
func NewReplicaKeyLister(indexer cache.Indexer) ReplicaKeyLister {
	return &replicaKeyLister{indexer: indexer}
}

// List lists all ReplicaKeys in the indexer.
func (s *replicaKeyLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicaKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicaKey))
	})
	return ret, err
}

// ReplicaKeys returns an object that can list and get ReplicaKeys.
func (s *replicaKeyLister) ReplicaKeys(namespace string) ReplicaKeyNamespaceLister {
	return replicaKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReplicaKeyNamespaceLister helps list and get ReplicaKeys.
// All objects returned here must be treated as read-only.
type ReplicaKeyNamespaceLister interface {
	// List lists all ReplicaKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicaKey, err error)
	// Get retrieves the ReplicaKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ReplicaKey, error)
	ReplicaKeyNamespaceListerExpansion
}

// replicaKeyNamespaceLister implements the ReplicaKeyNamespaceLister
// interface.
type replicaKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReplicaKeys in the indexer for a given namespace.
func (s replicaKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicaKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicaKey))
	})
	return ret, err
}

// Get retrieves the ReplicaKey from the indexer for a given namespace and name.
func (s replicaKeyNamespaceLister) Get(name string) (*v1alpha1.ReplicaKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("replicakey"), name)
	}
	return obj.(*v1alpha1.ReplicaKey), nil
}
