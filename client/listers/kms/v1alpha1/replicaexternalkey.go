/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/kms/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReplicaExternalKeyLister helps list ReplicaExternalKeys.
// All objects returned here must be treated as read-only.
type ReplicaExternalKeyLister interface {
	// List lists all ReplicaExternalKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicaExternalKey, err error)
	// ReplicaExternalKeys returns an object that can list and get ReplicaExternalKeys.
	ReplicaExternalKeys(namespace string) ReplicaExternalKeyNamespaceLister
	ReplicaExternalKeyListerExpansion
}

// replicaExternalKeyLister implements the ReplicaExternalKeyLister interface.
type replicaExternalKeyLister struct {
	indexer cache.Indexer
}

// NewReplicaExternalKeyLister returns a new ReplicaExternalKeyLister.
func NewReplicaExternalKeyLister(indexer cache.Indexer) ReplicaExternalKeyLister {
	return &replicaExternalKeyLister{indexer: indexer}
}

// List lists all ReplicaExternalKeys in the indexer.
func (s *replicaExternalKeyLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicaExternalKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicaExternalKey))
	})
	return ret, err
}

// ReplicaExternalKeys returns an object that can list and get ReplicaExternalKeys.
func (s *replicaExternalKeyLister) ReplicaExternalKeys(namespace string) ReplicaExternalKeyNamespaceLister {
	return replicaExternalKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReplicaExternalKeyNamespaceLister helps list and get ReplicaExternalKeys.
// All objects returned here must be treated as read-only.
type ReplicaExternalKeyNamespaceLister interface {
	// List lists all ReplicaExternalKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicaExternalKey, err error)
	// Get retrieves the ReplicaExternalKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ReplicaExternalKey, error)
	ReplicaExternalKeyNamespaceListerExpansion
}

// replicaExternalKeyNamespaceLister implements the ReplicaExternalKeyNamespaceLister
// interface.
type replicaExternalKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReplicaExternalKeys in the indexer for a given namespace.
func (s replicaExternalKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicaExternalKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicaExternalKey))
	})
	return ret, err
}

// Get retrieves the ReplicaExternalKey from the indexer for a given namespace and name.
func (s replicaExternalKeyNamespaceLister) Get(name string) (*v1alpha1.ReplicaExternalKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("replicaexternalkey"), name)
	}
	return obj.(*v1alpha1.ReplicaExternalKey), nil
}
