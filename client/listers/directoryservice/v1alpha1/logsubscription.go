/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/directoryservice/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LogSubscriptionLister helps list LogSubscriptions.
// All objects returned here must be treated as read-only.
type LogSubscriptionLister interface {
	// List lists all LogSubscriptions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogSubscription, err error)
	// LogSubscriptions returns an object that can list and get LogSubscriptions.
	LogSubscriptions(namespace string) LogSubscriptionNamespaceLister
	LogSubscriptionListerExpansion
}

// logSubscriptionLister implements the LogSubscriptionLister interface.
type logSubscriptionLister struct {
	indexer cache.Indexer
}

// NewLogSubscriptionLister returns a new LogSubscriptionLister.
func NewLogSubscriptionLister(indexer cache.Indexer) LogSubscriptionLister {
	return &logSubscriptionLister{indexer: indexer}
}

// List lists all LogSubscriptions in the indexer.
func (s *logSubscriptionLister) List(selector labels.Selector) (ret []*v1alpha1.LogSubscription, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogSubscription))
	})
	return ret, err
}

// LogSubscriptions returns an object that can list and get LogSubscriptions.
func (s *logSubscriptionLister) LogSubscriptions(namespace string) LogSubscriptionNamespaceLister {
	return logSubscriptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogSubscriptionNamespaceLister helps list and get LogSubscriptions.
// All objects returned here must be treated as read-only.
type LogSubscriptionNamespaceLister interface {
	// List lists all LogSubscriptions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogSubscription, err error)
	// Get retrieves the LogSubscription from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LogSubscription, error)
	LogSubscriptionNamespaceListerExpansion
}

// logSubscriptionNamespaceLister implements the LogSubscriptionNamespaceLister
// interface.
type logSubscriptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogSubscriptions in the indexer for a given namespace.
func (s logSubscriptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogSubscription, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogSubscription))
	})
	return ret, err
}

// Get retrieves the LogSubscription from the indexer for a given namespace and name.
func (s logSubscriptionNamespaceLister) Get(name string) (*v1alpha1.LogSubscription, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("logsubscription"), name)
	}
	return obj.(*v1alpha1.LogSubscription), nil
}
