/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/servicediscovery/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PublicDNSNamespaceLister helps list PublicDNSNamespaces.
// All objects returned here must be treated as read-only.
type PublicDNSNamespaceLister interface {
	// List lists all PublicDNSNamespaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PublicDNSNamespace, err error)
	// PublicDNSNamespaces returns an object that can list and get PublicDNSNamespaces.
	PublicDNSNamespaces(namespace string) PublicDNSNamespaceNamespaceLister
	PublicDNSNamespaceListerExpansion
}

// publicDNSNamespaceLister implements the PublicDNSNamespaceLister interface.
type publicDNSNamespaceLister struct {
	indexer cache.Indexer
}

// NewPublicDNSNamespaceLister returns a new PublicDNSNamespaceLister.
func NewPublicDNSNamespaceLister(indexer cache.Indexer) PublicDNSNamespaceLister {
	return &publicDNSNamespaceLister{indexer: indexer}
}

// List lists all PublicDNSNamespaces in the indexer.
func (s *publicDNSNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PublicDNSNamespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PublicDNSNamespace))
	})
	return ret, err
}

// PublicDNSNamespaces returns an object that can list and get PublicDNSNamespaces.
func (s *publicDNSNamespaceLister) PublicDNSNamespaces(namespace string) PublicDNSNamespaceNamespaceLister {
	return publicDNSNamespaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PublicDNSNamespaceNamespaceLister helps list and get PublicDNSNamespaces.
// All objects returned here must be treated as read-only.
type PublicDNSNamespaceNamespaceLister interface {
	// List lists all PublicDNSNamespaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PublicDNSNamespace, err error)
	// Get retrieves the PublicDNSNamespace from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PublicDNSNamespace, error)
	PublicDNSNamespaceNamespaceListerExpansion
}

// publicDNSNamespaceNamespaceLister implements the PublicDNSNamespaceNamespaceLister
// interface.
type publicDNSNamespaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PublicDNSNamespaces in the indexer for a given namespace.
func (s publicDNSNamespaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PublicDNSNamespace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PublicDNSNamespace))
	})
	return ret, err
}

// Get retrieves the PublicDNSNamespace from the indexer for a given namespace and name.
func (s publicDNSNamespaceNamespaceLister) Get(name string) (*v1alpha1.PublicDNSNamespace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("publicdnsnamespace"), name)
	}
	return obj.(*v1alpha1.PublicDNSNamespace), nil
}
