/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/servicediscovery/v1alpha1"
)

// HttpNamespaceLister helps list HttpNamespaces.
// All objects returned here must be treated as read-only.
type HttpNamespaceLister interface {
	// List lists all HttpNamespaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HttpNamespace, err error)
	// HttpNamespaces returns an object that can list and get HttpNamespaces.
	HttpNamespaces(namespace string) HttpNamespaceNamespaceLister
	HttpNamespaceListerExpansion
}

// httpNamespaceLister implements the HttpNamespaceLister interface.
type httpNamespaceLister struct {
	indexer cache.Indexer
}

// NewHttpNamespaceLister returns a new HttpNamespaceLister.
func NewHttpNamespaceLister(indexer cache.Indexer) HttpNamespaceLister {
	return &httpNamespaceLister{indexer: indexer}
}

// List lists all HttpNamespaces in the indexer.
func (s *httpNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HttpNamespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HttpNamespace))
	})
	return ret, err
}

// HttpNamespaces returns an object that can list and get HttpNamespaces.
func (s *httpNamespaceLister) HttpNamespaces(namespace string) HttpNamespaceNamespaceLister {
	return httpNamespaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HttpNamespaceNamespaceLister helps list and get HttpNamespaces.
// All objects returned here must be treated as read-only.
type HttpNamespaceNamespaceLister interface {
	// List lists all HttpNamespaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HttpNamespace, err error)
	// Get retrieves the HttpNamespace from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HttpNamespace, error)
	HttpNamespaceNamespaceListerExpansion
}

// httpNamespaceNamespaceLister implements the HttpNamespaceNamespaceLister
// interface.
type httpNamespaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HttpNamespaces in the indexer for a given namespace.
func (s httpNamespaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HttpNamespace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HttpNamespace))
	})
	return ret, err
}

// Get retrieves the HttpNamespace from the indexer for a given namespace and name.
func (s httpNamespaceNamespaceLister) Get(name string) (*v1alpha1.HttpNamespace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("httpnamespace"), name)
	}
	return obj.(*v1alpha1.HttpNamespace), nil
}
