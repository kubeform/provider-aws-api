/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/servicediscovery/v1alpha1"
)

// PrivateDNSNamespaceLister helps list PrivateDNSNamespaces.
// All objects returned here must be treated as read-only.
type PrivateDNSNamespaceLister interface {
	// List lists all PrivateDNSNamespaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSNamespace, err error)
	// PrivateDNSNamespaces returns an object that can list and get PrivateDNSNamespaces.
	PrivateDNSNamespaces(namespace string) PrivateDNSNamespaceNamespaceLister
	PrivateDNSNamespaceListerExpansion
}

// privateDNSNamespaceLister implements the PrivateDNSNamespaceLister interface.
type privateDNSNamespaceLister struct {
	indexer cache.Indexer
}

// NewPrivateDNSNamespaceLister returns a new PrivateDNSNamespaceLister.
func NewPrivateDNSNamespaceLister(indexer cache.Indexer) PrivateDNSNamespaceLister {
	return &privateDNSNamespaceLister{indexer: indexer}
}

// List lists all PrivateDNSNamespaces in the indexer.
func (s *privateDNSNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSNamespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateDNSNamespace))
	})
	return ret, err
}

// PrivateDNSNamespaces returns an object that can list and get PrivateDNSNamespaces.
func (s *privateDNSNamespaceLister) PrivateDNSNamespaces(namespace string) PrivateDNSNamespaceNamespaceLister {
	return privateDNSNamespaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrivateDNSNamespaceNamespaceLister helps list and get PrivateDNSNamespaces.
// All objects returned here must be treated as read-only.
type PrivateDNSNamespaceNamespaceLister interface {
	// List lists all PrivateDNSNamespaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSNamespace, err error)
	// Get retrieves the PrivateDNSNamespace from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PrivateDNSNamespace, error)
	PrivateDNSNamespaceNamespaceListerExpansion
}

// privateDNSNamespaceNamespaceLister implements the PrivateDNSNamespaceNamespaceLister
// interface.
type privateDNSNamespaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrivateDNSNamespaces in the indexer for a given namespace.
func (s privateDNSNamespaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateDNSNamespace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateDNSNamespace))
	})
	return ret, err
}

// Get retrieves the PrivateDNSNamespace from the indexer for a given namespace and name.
func (s privateDNSNamespaceNamespaceLister) Get(name string) (*v1alpha1.PrivateDNSNamespace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("privatednsnamespace"), name)
	}
	return obj.(*v1alpha1.PrivateDNSNamespace), nil
}
