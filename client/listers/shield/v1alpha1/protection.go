/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/shield/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProtectionLister helps list Protections.
// All objects returned here must be treated as read-only.
type ProtectionLister interface {
	// List lists all Protections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Protection, err error)
	// Protections returns an object that can list and get Protections.
	Protections(namespace string) ProtectionNamespaceLister
	ProtectionListerExpansion
}

// protectionLister implements the ProtectionLister interface.
type protectionLister struct {
	indexer cache.Indexer
}

// NewProtectionLister returns a new ProtectionLister.
func NewProtectionLister(indexer cache.Indexer) ProtectionLister {
	return &protectionLister{indexer: indexer}
}

// List lists all Protections in the indexer.
func (s *protectionLister) List(selector labels.Selector) (ret []*v1alpha1.Protection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Protection))
	})
	return ret, err
}

// Protections returns an object that can list and get Protections.
func (s *protectionLister) Protections(namespace string) ProtectionNamespaceLister {
	return protectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProtectionNamespaceLister helps list and get Protections.
// All objects returned here must be treated as read-only.
type ProtectionNamespaceLister interface {
	// List lists all Protections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Protection, err error)
	// Get retrieves the Protection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Protection, error)
	ProtectionNamespaceListerExpansion
}

// protectionNamespaceLister implements the ProtectionNamespaceLister
// interface.
type protectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Protections in the indexer for a given namespace.
func (s protectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Protection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Protection))
	})
	return ret, err
}

// Get retrieves the Protection from the indexer for a given namespace and name.
func (s protectionNamespaceLister) Get(name string) (*v1alpha1.Protection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("protection"), name)
	}
	return obj.(*v1alpha1.Protection), nil
}
