/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/workspaces/v1alpha1"
)

// IpGroupLister helps list IpGroups.
// All objects returned here must be treated as read-only.
type IpGroupLister interface {
	// List lists all IpGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpGroup, err error)
	// IpGroups returns an object that can list and get IpGroups.
	IpGroups(namespace string) IpGroupNamespaceLister
	IpGroupListerExpansion
}

// ipGroupLister implements the IpGroupLister interface.
type ipGroupLister struct {
	indexer cache.Indexer
}

// NewIpGroupLister returns a new IpGroupLister.
func NewIpGroupLister(indexer cache.Indexer) IpGroupLister {
	return &ipGroupLister{indexer: indexer}
}

// List lists all IpGroups in the indexer.
func (s *ipGroupLister) List(selector labels.Selector) (ret []*v1alpha1.IpGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpGroup))
	})
	return ret, err
}

// IpGroups returns an object that can list and get IpGroups.
func (s *ipGroupLister) IpGroups(namespace string) IpGroupNamespaceLister {
	return ipGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpGroupNamespaceLister helps list and get IpGroups.
// All objects returned here must be treated as read-only.
type IpGroupNamespaceLister interface {
	// List lists all IpGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpGroup, err error)
	// Get retrieves the IpGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IpGroup, error)
	IpGroupNamespaceListerExpansion
}

// ipGroupNamespaceLister implements the IpGroupNamespaceLister
// interface.
type ipGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IpGroups in the indexer for a given namespace.
func (s ipGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IpGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpGroup))
	})
	return ret, err
}

// Get retrieves the IpGroup from the indexer for a given namespace and name.
func (s ipGroupNamespaceLister) Get(name string) (*v1alpha1.IpGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipgroup"), name)
	}
	return obj.(*v1alpha1.IpGroup), nil
}
