/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EndpointPolicyLister helps list EndpointPolicies.
// All objects returned here must be treated as read-only.
type EndpointPolicyLister interface {
	// List lists all EndpointPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointPolicy, err error)
	// EndpointPolicies returns an object that can list and get EndpointPolicies.
	EndpointPolicies(namespace string) EndpointPolicyNamespaceLister
	EndpointPolicyListerExpansion
}

// endpointPolicyLister implements the EndpointPolicyLister interface.
type endpointPolicyLister struct {
	indexer cache.Indexer
}

// NewEndpointPolicyLister returns a new EndpointPolicyLister.
func NewEndpointPolicyLister(indexer cache.Indexer) EndpointPolicyLister {
	return &endpointPolicyLister{indexer: indexer}
}

// List lists all EndpointPolicies in the indexer.
func (s *endpointPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointPolicy))
	})
	return ret, err
}

// EndpointPolicies returns an object that can list and get EndpointPolicies.
func (s *endpointPolicyLister) EndpointPolicies(namespace string) EndpointPolicyNamespaceLister {
	return endpointPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EndpointPolicyNamespaceLister helps list and get EndpointPolicies.
// All objects returned here must be treated as read-only.
type EndpointPolicyNamespaceLister interface {
	// List lists all EndpointPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointPolicy, err error)
	// Get retrieves the EndpointPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EndpointPolicy, error)
	EndpointPolicyNamespaceListerExpansion
}

// endpointPolicyNamespaceLister implements the EndpointPolicyNamespaceLister
// interface.
type endpointPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EndpointPolicies in the indexer for a given namespace.
func (s endpointPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointPolicy))
	})
	return ret, err
}

// Get retrieves the EndpointPolicy from the indexer for a given namespace and name.
func (s endpointPolicyNamespaceLister) Get(name string) (*v1alpha1.EndpointPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("endpointpolicy"), name)
	}
	return obj.(*v1alpha1.EndpointPolicy), nil
}
