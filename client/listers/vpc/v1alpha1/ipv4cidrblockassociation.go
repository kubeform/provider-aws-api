/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"
)

// Ipv4CIDRBlockAssociationLister helps list Ipv4CIDRBlockAssociations.
// All objects returned here must be treated as read-only.
type Ipv4CIDRBlockAssociationLister interface {
	// List lists all Ipv4CIDRBlockAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipv4CIDRBlockAssociation, err error)
	// Ipv4CIDRBlockAssociations returns an object that can list and get Ipv4CIDRBlockAssociations.
	Ipv4CIDRBlockAssociations(namespace string) Ipv4CIDRBlockAssociationNamespaceLister
	Ipv4CIDRBlockAssociationListerExpansion
}

// ipv4CIDRBlockAssociationLister implements the Ipv4CIDRBlockAssociationLister interface.
type ipv4CIDRBlockAssociationLister struct {
	indexer cache.Indexer
}

// NewIpv4CIDRBlockAssociationLister returns a new Ipv4CIDRBlockAssociationLister.
func NewIpv4CIDRBlockAssociationLister(indexer cache.Indexer) Ipv4CIDRBlockAssociationLister {
	return &ipv4CIDRBlockAssociationLister{indexer: indexer}
}

// List lists all Ipv4CIDRBlockAssociations in the indexer.
func (s *ipv4CIDRBlockAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.Ipv4CIDRBlockAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipv4CIDRBlockAssociation))
	})
	return ret, err
}

// Ipv4CIDRBlockAssociations returns an object that can list and get Ipv4CIDRBlockAssociations.
func (s *ipv4CIDRBlockAssociationLister) Ipv4CIDRBlockAssociations(namespace string) Ipv4CIDRBlockAssociationNamespaceLister {
	return ipv4CIDRBlockAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// Ipv4CIDRBlockAssociationNamespaceLister helps list and get Ipv4CIDRBlockAssociations.
// All objects returned here must be treated as read-only.
type Ipv4CIDRBlockAssociationNamespaceLister interface {
	// List lists all Ipv4CIDRBlockAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipv4CIDRBlockAssociation, err error)
	// Get retrieves the Ipv4CIDRBlockAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Ipv4CIDRBlockAssociation, error)
	Ipv4CIDRBlockAssociationNamespaceListerExpansion
}

// ipv4CIDRBlockAssociationNamespaceLister implements the Ipv4CIDRBlockAssociationNamespaceLister
// interface.
type ipv4CIDRBlockAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ipv4CIDRBlockAssociations in the indexer for a given namespace.
func (s ipv4CIDRBlockAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ipv4CIDRBlockAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipv4CIDRBlockAssociation))
	})
	return ret, err
}

// Get retrieves the Ipv4CIDRBlockAssociation from the indexer for a given namespace and name.
func (s ipv4CIDRBlockAssociationNamespaceLister) Get(name string) (*v1alpha1.Ipv4CIDRBlockAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipv4cidrblockassociation"), name)
	}
	return obj.(*v1alpha1.Ipv4CIDRBlockAssociation), nil
}
