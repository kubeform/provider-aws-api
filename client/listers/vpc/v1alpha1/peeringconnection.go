/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"
)

// PeeringConnectionLister helps list PeeringConnections.
// All objects returned here must be treated as read-only.
type PeeringConnectionLister interface {
	// List lists all PeeringConnections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PeeringConnection, err error)
	// PeeringConnections returns an object that can list and get PeeringConnections.
	PeeringConnections(namespace string) PeeringConnectionNamespaceLister
	PeeringConnectionListerExpansion
}

// peeringConnectionLister implements the PeeringConnectionLister interface.
type peeringConnectionLister struct {
	indexer cache.Indexer
}

// NewPeeringConnectionLister returns a new PeeringConnectionLister.
func NewPeeringConnectionLister(indexer cache.Indexer) PeeringConnectionLister {
	return &peeringConnectionLister{indexer: indexer}
}

// List lists all PeeringConnections in the indexer.
func (s *peeringConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.PeeringConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PeeringConnection))
	})
	return ret, err
}

// PeeringConnections returns an object that can list and get PeeringConnections.
func (s *peeringConnectionLister) PeeringConnections(namespace string) PeeringConnectionNamespaceLister {
	return peeringConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PeeringConnectionNamespaceLister helps list and get PeeringConnections.
// All objects returned here must be treated as read-only.
type PeeringConnectionNamespaceLister interface {
	// List lists all PeeringConnections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PeeringConnection, err error)
	// Get retrieves the PeeringConnection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PeeringConnection, error)
	PeeringConnectionNamespaceListerExpansion
}

// peeringConnectionNamespaceLister implements the PeeringConnectionNamespaceLister
// interface.
type peeringConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PeeringConnections in the indexer for a given namespace.
func (s peeringConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PeeringConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PeeringConnection))
	})
	return ret, err
}

// Get retrieves the PeeringConnection from the indexer for a given namespace and name.
func (s peeringConnectionNamespaceLister) Get(name string) (*v1alpha1.PeeringConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("peeringconnection"), name)
	}
	return obj.(*v1alpha1.PeeringConnection), nil
}
