/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// Ipv6CIDRBlockAssociationLister helps list Ipv6CIDRBlockAssociations.
// All objects returned here must be treated as read-only.
type Ipv6CIDRBlockAssociationLister interface {
	// List lists all Ipv6CIDRBlockAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipv6CIDRBlockAssociation, err error)
	// Ipv6CIDRBlockAssociations returns an object that can list and get Ipv6CIDRBlockAssociations.
	Ipv6CIDRBlockAssociations(namespace string) Ipv6CIDRBlockAssociationNamespaceLister
	Ipv6CIDRBlockAssociationListerExpansion
}

// ipv6CIDRBlockAssociationLister implements the Ipv6CIDRBlockAssociationLister interface.
type ipv6CIDRBlockAssociationLister struct {
	indexer cache.Indexer
}

// NewIpv6CIDRBlockAssociationLister returns a new Ipv6CIDRBlockAssociationLister.
func NewIpv6CIDRBlockAssociationLister(indexer cache.Indexer) Ipv6CIDRBlockAssociationLister {
	return &ipv6CIDRBlockAssociationLister{indexer: indexer}
}

// List lists all Ipv6CIDRBlockAssociations in the indexer.
func (s *ipv6CIDRBlockAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.Ipv6CIDRBlockAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipv6CIDRBlockAssociation))
	})
	return ret, err
}

// Ipv6CIDRBlockAssociations returns an object that can list and get Ipv6CIDRBlockAssociations.
func (s *ipv6CIDRBlockAssociationLister) Ipv6CIDRBlockAssociations(namespace string) Ipv6CIDRBlockAssociationNamespaceLister {
	return ipv6CIDRBlockAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// Ipv6CIDRBlockAssociationNamespaceLister helps list and get Ipv6CIDRBlockAssociations.
// All objects returned here must be treated as read-only.
type Ipv6CIDRBlockAssociationNamespaceLister interface {
	// List lists all Ipv6CIDRBlockAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipv6CIDRBlockAssociation, err error)
	// Get retrieves the Ipv6CIDRBlockAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Ipv6CIDRBlockAssociation, error)
	Ipv6CIDRBlockAssociationNamespaceListerExpansion
}

// ipv6CIDRBlockAssociationNamespaceLister implements the Ipv6CIDRBlockAssociationNamespaceLister
// interface.
type ipv6CIDRBlockAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ipv6CIDRBlockAssociations in the indexer for a given namespace.
func (s ipv6CIDRBlockAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ipv6CIDRBlockAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipv6CIDRBlockAssociation))
	})
	return ret, err
}

// Get retrieves the Ipv6CIDRBlockAssociation from the indexer for a given namespace and name.
func (s ipv6CIDRBlockAssociationNamespaceLister) Get(name string) (*v1alpha1.Ipv6CIDRBlockAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipv6cidrblockassociation"), name)
	}
	return obj.(*v1alpha1.Ipv6CIDRBlockAssociation), nil
}
