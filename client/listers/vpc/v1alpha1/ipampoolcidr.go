/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IpamPoolCIDRLister helps list IpamPoolCIDRs.
// All objects returned here must be treated as read-only.
type IpamPoolCIDRLister interface {
	// List lists all IpamPoolCIDRs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpamPoolCIDR, err error)
	// IpamPoolCIDRs returns an object that can list and get IpamPoolCIDRs.
	IpamPoolCIDRs(namespace string) IpamPoolCIDRNamespaceLister
	IpamPoolCIDRListerExpansion
}

// ipamPoolCIDRLister implements the IpamPoolCIDRLister interface.
type ipamPoolCIDRLister struct {
	indexer cache.Indexer
}

// NewIpamPoolCIDRLister returns a new IpamPoolCIDRLister.
func NewIpamPoolCIDRLister(indexer cache.Indexer) IpamPoolCIDRLister {
	return &ipamPoolCIDRLister{indexer: indexer}
}

// List lists all IpamPoolCIDRs in the indexer.
func (s *ipamPoolCIDRLister) List(selector labels.Selector) (ret []*v1alpha1.IpamPoolCIDR, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpamPoolCIDR))
	})
	return ret, err
}

// IpamPoolCIDRs returns an object that can list and get IpamPoolCIDRs.
func (s *ipamPoolCIDRLister) IpamPoolCIDRs(namespace string) IpamPoolCIDRNamespaceLister {
	return ipamPoolCIDRNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpamPoolCIDRNamespaceLister helps list and get IpamPoolCIDRs.
// All objects returned here must be treated as read-only.
type IpamPoolCIDRNamespaceLister interface {
	// List lists all IpamPoolCIDRs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpamPoolCIDR, err error)
	// Get retrieves the IpamPoolCIDR from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IpamPoolCIDR, error)
	IpamPoolCIDRNamespaceListerExpansion
}

// ipamPoolCIDRNamespaceLister implements the IpamPoolCIDRNamespaceLister
// interface.
type ipamPoolCIDRNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IpamPoolCIDRs in the indexer for a given namespace.
func (s ipamPoolCIDRNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IpamPoolCIDR, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpamPoolCIDR))
	})
	return ret, err
}

// Get retrieves the IpamPoolCIDR from the indexer for a given namespace and name.
func (s ipamPoolCIDRNamespaceLister) Get(name string) (*v1alpha1.IpamPoolCIDR, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipampoolcidr"), name)
	}
	return obj.(*v1alpha1.IpamPoolCIDR), nil
}
