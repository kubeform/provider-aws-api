/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"
)

// EndpointSubnetAssociationLister helps list EndpointSubnetAssociations.
// All objects returned here must be treated as read-only.
type EndpointSubnetAssociationLister interface {
	// List lists all EndpointSubnetAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointSubnetAssociation, err error)
	// EndpointSubnetAssociations returns an object that can list and get EndpointSubnetAssociations.
	EndpointSubnetAssociations(namespace string) EndpointSubnetAssociationNamespaceLister
	EndpointSubnetAssociationListerExpansion
}

// endpointSubnetAssociationLister implements the EndpointSubnetAssociationLister interface.
type endpointSubnetAssociationLister struct {
	indexer cache.Indexer
}

// NewEndpointSubnetAssociationLister returns a new EndpointSubnetAssociationLister.
func NewEndpointSubnetAssociationLister(indexer cache.Indexer) EndpointSubnetAssociationLister {
	return &endpointSubnetAssociationLister{indexer: indexer}
}

// List lists all EndpointSubnetAssociations in the indexer.
func (s *endpointSubnetAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointSubnetAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointSubnetAssociation))
	})
	return ret, err
}

// EndpointSubnetAssociations returns an object that can list and get EndpointSubnetAssociations.
func (s *endpointSubnetAssociationLister) EndpointSubnetAssociations(namespace string) EndpointSubnetAssociationNamespaceLister {
	return endpointSubnetAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EndpointSubnetAssociationNamespaceLister helps list and get EndpointSubnetAssociations.
// All objects returned here must be treated as read-only.
type EndpointSubnetAssociationNamespaceLister interface {
	// List lists all EndpointSubnetAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointSubnetAssociation, err error)
	// Get retrieves the EndpointSubnetAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EndpointSubnetAssociation, error)
	EndpointSubnetAssociationNamespaceListerExpansion
}

// endpointSubnetAssociationNamespaceLister implements the EndpointSubnetAssociationNamespaceLister
// interface.
type endpointSubnetAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EndpointSubnetAssociations in the indexer for a given namespace.
func (s endpointSubnetAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointSubnetAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointSubnetAssociation))
	})
	return ret, err
}

// Get retrieves the EndpointSubnetAssociation from the indexer for a given namespace and name.
func (s endpointSubnetAssociationNamespaceLister) Get(name string) (*v1alpha1.EndpointSubnetAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("endpointsubnetassociation"), name)
	}
	return obj.(*v1alpha1.EndpointSubnetAssociation), nil
}
