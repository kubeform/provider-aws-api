/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EndpointConnectionAccepterLister helps list EndpointConnectionAccepters.
// All objects returned here must be treated as read-only.
type EndpointConnectionAccepterLister interface {
	// List lists all EndpointConnectionAccepters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointConnectionAccepter, err error)
	// EndpointConnectionAccepters returns an object that can list and get EndpointConnectionAccepters.
	EndpointConnectionAccepters(namespace string) EndpointConnectionAccepterNamespaceLister
	EndpointConnectionAccepterListerExpansion
}

// endpointConnectionAccepterLister implements the EndpointConnectionAccepterLister interface.
type endpointConnectionAccepterLister struct {
	indexer cache.Indexer
}

// NewEndpointConnectionAccepterLister returns a new EndpointConnectionAccepterLister.
func NewEndpointConnectionAccepterLister(indexer cache.Indexer) EndpointConnectionAccepterLister {
	return &endpointConnectionAccepterLister{indexer: indexer}
}

// List lists all EndpointConnectionAccepters in the indexer.
func (s *endpointConnectionAccepterLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointConnectionAccepter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointConnectionAccepter))
	})
	return ret, err
}

// EndpointConnectionAccepters returns an object that can list and get EndpointConnectionAccepters.
func (s *endpointConnectionAccepterLister) EndpointConnectionAccepters(namespace string) EndpointConnectionAccepterNamespaceLister {
	return endpointConnectionAccepterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EndpointConnectionAccepterNamespaceLister helps list and get EndpointConnectionAccepters.
// All objects returned here must be treated as read-only.
type EndpointConnectionAccepterNamespaceLister interface {
	// List lists all EndpointConnectionAccepters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointConnectionAccepter, err error)
	// Get retrieves the EndpointConnectionAccepter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EndpointConnectionAccepter, error)
	EndpointConnectionAccepterNamespaceListerExpansion
}

// endpointConnectionAccepterNamespaceLister implements the EndpointConnectionAccepterNamespaceLister
// interface.
type endpointConnectionAccepterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EndpointConnectionAccepters in the indexer for a given namespace.
func (s endpointConnectionAccepterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointConnectionAccepter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointConnectionAccepter))
	})
	return ret, err
}

// Get retrieves the EndpointConnectionAccepter from the indexer for a given namespace and name.
func (s endpointConnectionAccepterNamespaceLister) Get(name string) (*v1alpha1.EndpointConnectionAccepter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("endpointconnectionaccepter"), name)
	}
	return obj.(*v1alpha1.EndpointConnectionAccepter), nil
}
