/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IpamPoolCIDRAllocationLister helps list IpamPoolCIDRAllocations.
// All objects returned here must be treated as read-only.
type IpamPoolCIDRAllocationLister interface {
	// List lists all IpamPoolCIDRAllocations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpamPoolCIDRAllocation, err error)
	// IpamPoolCIDRAllocations returns an object that can list and get IpamPoolCIDRAllocations.
	IpamPoolCIDRAllocations(namespace string) IpamPoolCIDRAllocationNamespaceLister
	IpamPoolCIDRAllocationListerExpansion
}

// ipamPoolCIDRAllocationLister implements the IpamPoolCIDRAllocationLister interface.
type ipamPoolCIDRAllocationLister struct {
	indexer cache.Indexer
}

// NewIpamPoolCIDRAllocationLister returns a new IpamPoolCIDRAllocationLister.
func NewIpamPoolCIDRAllocationLister(indexer cache.Indexer) IpamPoolCIDRAllocationLister {
	return &ipamPoolCIDRAllocationLister{indexer: indexer}
}

// List lists all IpamPoolCIDRAllocations in the indexer.
func (s *ipamPoolCIDRAllocationLister) List(selector labels.Selector) (ret []*v1alpha1.IpamPoolCIDRAllocation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpamPoolCIDRAllocation))
	})
	return ret, err
}

// IpamPoolCIDRAllocations returns an object that can list and get IpamPoolCIDRAllocations.
func (s *ipamPoolCIDRAllocationLister) IpamPoolCIDRAllocations(namespace string) IpamPoolCIDRAllocationNamespaceLister {
	return ipamPoolCIDRAllocationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpamPoolCIDRAllocationNamespaceLister helps list and get IpamPoolCIDRAllocations.
// All objects returned here must be treated as read-only.
type IpamPoolCIDRAllocationNamespaceLister interface {
	// List lists all IpamPoolCIDRAllocations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpamPoolCIDRAllocation, err error)
	// Get retrieves the IpamPoolCIDRAllocation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IpamPoolCIDRAllocation, error)
	IpamPoolCIDRAllocationNamespaceListerExpansion
}

// ipamPoolCIDRAllocationNamespaceLister implements the IpamPoolCIDRAllocationNamespaceLister
// interface.
type ipamPoolCIDRAllocationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IpamPoolCIDRAllocations in the indexer for a given namespace.
func (s ipamPoolCIDRAllocationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IpamPoolCIDRAllocation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpamPoolCIDRAllocation))
	})
	return ret, err
}

// Get retrieves the IpamPoolCIDRAllocation from the indexer for a given namespace and name.
func (s ipamPoolCIDRAllocationNamespaceLister) Get(name string) (*v1alpha1.IpamPoolCIDRAllocation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipampoolcidrallocation"), name)
	}
	return obj.(*v1alpha1.IpamPoolCIDRAllocation), nil
}
