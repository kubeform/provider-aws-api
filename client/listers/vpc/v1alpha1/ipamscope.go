/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IpamScopeLister helps list IpamScopes.
// All objects returned here must be treated as read-only.
type IpamScopeLister interface {
	// List lists all IpamScopes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpamScope, err error)
	// IpamScopes returns an object that can list and get IpamScopes.
	IpamScopes(namespace string) IpamScopeNamespaceLister
	IpamScopeListerExpansion
}

// ipamScopeLister implements the IpamScopeLister interface.
type ipamScopeLister struct {
	indexer cache.Indexer
}

// NewIpamScopeLister returns a new IpamScopeLister.
func NewIpamScopeLister(indexer cache.Indexer) IpamScopeLister {
	return &ipamScopeLister{indexer: indexer}
}

// List lists all IpamScopes in the indexer.
func (s *ipamScopeLister) List(selector labels.Selector) (ret []*v1alpha1.IpamScope, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpamScope))
	})
	return ret, err
}

// IpamScopes returns an object that can list and get IpamScopes.
func (s *ipamScopeLister) IpamScopes(namespace string) IpamScopeNamespaceLister {
	return ipamScopeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpamScopeNamespaceLister helps list and get IpamScopes.
// All objects returned here must be treated as read-only.
type IpamScopeNamespaceLister interface {
	// List lists all IpamScopes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpamScope, err error)
	// Get retrieves the IpamScope from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IpamScope, error)
	IpamScopeNamespaceListerExpansion
}

// ipamScopeNamespaceLister implements the IpamScopeNamespaceLister
// interface.
type ipamScopeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IpamScopes in the indexer for a given namespace.
func (s ipamScopeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IpamScope, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpamScope))
	})
	return ret, err
}

// Get retrieves the IpamScope from the indexer for a given namespace and name.
func (s ipamScopeNamespaceLister) Get(name string) (*v1alpha1.IpamScope, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipamscope"), name)
	}
	return obj.(*v1alpha1.IpamScope), nil
}
