/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DhcpOptionsLister helps list DhcpOptionses.
// All objects returned here must be treated as read-only.
type DhcpOptionsLister interface {
	// List lists all DhcpOptionses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DhcpOptions, err error)
	// DhcpOptionses returns an object that can list and get DhcpOptionses.
	DhcpOptionses(namespace string) DhcpOptionsNamespaceLister
	DhcpOptionsListerExpansion
}

// dhcpOptionsLister implements the DhcpOptionsLister interface.
type dhcpOptionsLister struct {
	indexer cache.Indexer
}

// NewDhcpOptionsLister returns a new DhcpOptionsLister.
func NewDhcpOptionsLister(indexer cache.Indexer) DhcpOptionsLister {
	return &dhcpOptionsLister{indexer: indexer}
}

// List lists all DhcpOptionses in the indexer.
func (s *dhcpOptionsLister) List(selector labels.Selector) (ret []*v1alpha1.DhcpOptions, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DhcpOptions))
	})
	return ret, err
}

// DhcpOptionses returns an object that can list and get DhcpOptionses.
func (s *dhcpOptionsLister) DhcpOptionses(namespace string) DhcpOptionsNamespaceLister {
	return dhcpOptionsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DhcpOptionsNamespaceLister helps list and get DhcpOptionses.
// All objects returned here must be treated as read-only.
type DhcpOptionsNamespaceLister interface {
	// List lists all DhcpOptionses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DhcpOptions, err error)
	// Get retrieves the DhcpOptions from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DhcpOptions, error)
	DhcpOptionsNamespaceListerExpansion
}

// dhcpOptionsNamespaceLister implements the DhcpOptionsNamespaceLister
// interface.
type dhcpOptionsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DhcpOptionses in the indexer for a given namespace.
func (s dhcpOptionsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DhcpOptions, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DhcpOptions))
	})
	return ret, err
}

// Get retrieves the DhcpOptions from the indexer for a given namespace and name.
func (s dhcpOptionsNamespaceLister) Get(name string) (*v1alpha1.DhcpOptions, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dhcpoptions"), name)
	}
	return obj.(*v1alpha1.DhcpOptions), nil
}
