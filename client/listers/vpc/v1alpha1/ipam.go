/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IpamLister helps list Ipams.
// All objects returned here must be treated as read-only.
type IpamLister interface {
	// List lists all Ipams in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipam, err error)
	// Ipams returns an object that can list and get Ipams.
	Ipams(namespace string) IpamNamespaceLister
	IpamListerExpansion
}

// ipamLister implements the IpamLister interface.
type ipamLister struct {
	indexer cache.Indexer
}

// NewIpamLister returns a new IpamLister.
func NewIpamLister(indexer cache.Indexer) IpamLister {
	return &ipamLister{indexer: indexer}
}

// List lists all Ipams in the indexer.
func (s *ipamLister) List(selector labels.Selector) (ret []*v1alpha1.Ipam, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipam))
	})
	return ret, err
}

// Ipams returns an object that can list and get Ipams.
func (s *ipamLister) Ipams(namespace string) IpamNamespaceLister {
	return ipamNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpamNamespaceLister helps list and get Ipams.
// All objects returned here must be treated as read-only.
type IpamNamespaceLister interface {
	// List lists all Ipams in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipam, err error)
	// Get retrieves the Ipam from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Ipam, error)
	IpamNamespaceListerExpansion
}

// ipamNamespaceLister implements the IpamNamespaceLister
// interface.
type ipamNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ipams in the indexer for a given namespace.
func (s ipamNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ipam, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipam))
	})
	return ret, err
}

// Get retrieves the Ipam from the indexer for a given namespace and name.
func (s ipamNamespaceLister) Get(name string) (*v1alpha1.Ipam, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipam"), name)
	}
	return obj.(*v1alpha1.Ipam), nil
}
