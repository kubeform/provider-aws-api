/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IpamOrganizationAdminAccountLister helps list IpamOrganizationAdminAccounts.
// All objects returned here must be treated as read-only.
type IpamOrganizationAdminAccountLister interface {
	// List lists all IpamOrganizationAdminAccounts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpamOrganizationAdminAccount, err error)
	// IpamOrganizationAdminAccounts returns an object that can list and get IpamOrganizationAdminAccounts.
	IpamOrganizationAdminAccounts(namespace string) IpamOrganizationAdminAccountNamespaceLister
	IpamOrganizationAdminAccountListerExpansion
}

// ipamOrganizationAdminAccountLister implements the IpamOrganizationAdminAccountLister interface.
type ipamOrganizationAdminAccountLister struct {
	indexer cache.Indexer
}

// NewIpamOrganizationAdminAccountLister returns a new IpamOrganizationAdminAccountLister.
func NewIpamOrganizationAdminAccountLister(indexer cache.Indexer) IpamOrganizationAdminAccountLister {
	return &ipamOrganizationAdminAccountLister{indexer: indexer}
}

// List lists all IpamOrganizationAdminAccounts in the indexer.
func (s *ipamOrganizationAdminAccountLister) List(selector labels.Selector) (ret []*v1alpha1.IpamOrganizationAdminAccount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpamOrganizationAdminAccount))
	})
	return ret, err
}

// IpamOrganizationAdminAccounts returns an object that can list and get IpamOrganizationAdminAccounts.
func (s *ipamOrganizationAdminAccountLister) IpamOrganizationAdminAccounts(namespace string) IpamOrganizationAdminAccountNamespaceLister {
	return ipamOrganizationAdminAccountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpamOrganizationAdminAccountNamespaceLister helps list and get IpamOrganizationAdminAccounts.
// All objects returned here must be treated as read-only.
type IpamOrganizationAdminAccountNamespaceLister interface {
	// List lists all IpamOrganizationAdminAccounts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpamOrganizationAdminAccount, err error)
	// Get retrieves the IpamOrganizationAdminAccount from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IpamOrganizationAdminAccount, error)
	IpamOrganizationAdminAccountNamespaceListerExpansion
}

// ipamOrganizationAdminAccountNamespaceLister implements the IpamOrganizationAdminAccountNamespaceLister
// interface.
type ipamOrganizationAdminAccountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IpamOrganizationAdminAccounts in the indexer for a given namespace.
func (s ipamOrganizationAdminAccountNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IpamOrganizationAdminAccount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpamOrganizationAdminAccount))
	})
	return ret, err
}

// Get retrieves the IpamOrganizationAdminAccount from the indexer for a given namespace and name.
func (s ipamOrganizationAdminAccountNamespaceLister) Get(name string) (*v1alpha1.IpamOrganizationAdminAccount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipamorganizationadminaccount"), name)
	}
	return obj.(*v1alpha1.IpamOrganizationAdminAccount), nil
}
