/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IpamPoolLister helps list IpamPools.
// All objects returned here must be treated as read-only.
type IpamPoolLister interface {
	// List lists all IpamPools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpamPool, err error)
	// IpamPools returns an object that can list and get IpamPools.
	IpamPools(namespace string) IpamPoolNamespaceLister
	IpamPoolListerExpansion
}

// ipamPoolLister implements the IpamPoolLister interface.
type ipamPoolLister struct {
	indexer cache.Indexer
}

// NewIpamPoolLister returns a new IpamPoolLister.
func NewIpamPoolLister(indexer cache.Indexer) IpamPoolLister {
	return &ipamPoolLister{indexer: indexer}
}

// List lists all IpamPools in the indexer.
func (s *ipamPoolLister) List(selector labels.Selector) (ret []*v1alpha1.IpamPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpamPool))
	})
	return ret, err
}

// IpamPools returns an object that can list and get IpamPools.
func (s *ipamPoolLister) IpamPools(namespace string) IpamPoolNamespaceLister {
	return ipamPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpamPoolNamespaceLister helps list and get IpamPools.
// All objects returned here must be treated as read-only.
type IpamPoolNamespaceLister interface {
	// List lists all IpamPools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpamPool, err error)
	// Get retrieves the IpamPool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IpamPool, error)
	IpamPoolNamespaceListerExpansion
}

// ipamPoolNamespaceLister implements the IpamPoolNamespaceLister
// interface.
type ipamPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IpamPools in the indexer for a given namespace.
func (s ipamPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IpamPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpamPool))
	})
	return ret, err
}

// Get retrieves the IpamPool from the indexer for a given namespace and name.
func (s ipamPoolNamespaceLister) Get(name string) (*v1alpha1.IpamPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipampool"), name)
	}
	return obj.(*v1alpha1.IpamPool), nil
}
