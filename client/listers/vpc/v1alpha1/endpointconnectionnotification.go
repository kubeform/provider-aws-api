/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/vpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EndpointConnectionNotificationLister helps list EndpointConnectionNotifications.
// All objects returned here must be treated as read-only.
type EndpointConnectionNotificationLister interface {
	// List lists all EndpointConnectionNotifications in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointConnectionNotification, err error)
	// EndpointConnectionNotifications returns an object that can list and get EndpointConnectionNotifications.
	EndpointConnectionNotifications(namespace string) EndpointConnectionNotificationNamespaceLister
	EndpointConnectionNotificationListerExpansion
}

// endpointConnectionNotificationLister implements the EndpointConnectionNotificationLister interface.
type endpointConnectionNotificationLister struct {
	indexer cache.Indexer
}

// NewEndpointConnectionNotificationLister returns a new EndpointConnectionNotificationLister.
func NewEndpointConnectionNotificationLister(indexer cache.Indexer) EndpointConnectionNotificationLister {
	return &endpointConnectionNotificationLister{indexer: indexer}
}

// List lists all EndpointConnectionNotifications in the indexer.
func (s *endpointConnectionNotificationLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointConnectionNotification, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointConnectionNotification))
	})
	return ret, err
}

// EndpointConnectionNotifications returns an object that can list and get EndpointConnectionNotifications.
func (s *endpointConnectionNotificationLister) EndpointConnectionNotifications(namespace string) EndpointConnectionNotificationNamespaceLister {
	return endpointConnectionNotificationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EndpointConnectionNotificationNamespaceLister helps list and get EndpointConnectionNotifications.
// All objects returned here must be treated as read-only.
type EndpointConnectionNotificationNamespaceLister interface {
	// List lists all EndpointConnectionNotifications in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointConnectionNotification, err error)
	// Get retrieves the EndpointConnectionNotification from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EndpointConnectionNotification, error)
	EndpointConnectionNotificationNamespaceListerExpansion
}

// endpointConnectionNotificationNamespaceLister implements the EndpointConnectionNotificationNamespaceLister
// interface.
type endpointConnectionNotificationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EndpointConnectionNotifications in the indexer for a given namespace.
func (s endpointConnectionNotificationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointConnectionNotification, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointConnectionNotification))
	})
	return ret, err
}

// Get retrieves the EndpointConnectionNotification from the indexer for a given namespace and name.
func (s endpointConnectionNotificationNamespaceLister) Get(name string) (*v1alpha1.EndpointConnectionNotification, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("endpointconnectionnotification"), name)
	}
	return obj.(*v1alpha1.EndpointConnectionNotification), nil
}
