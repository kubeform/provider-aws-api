/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudwatch/v1alpha1"
)

// EventPermissionLister helps list EventPermissions.
// All objects returned here must be treated as read-only.
type EventPermissionLister interface {
	// List lists all EventPermissions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EventPermission, err error)
	// EventPermissions returns an object that can list and get EventPermissions.
	EventPermissions(namespace string) EventPermissionNamespaceLister
	EventPermissionListerExpansion
}

// eventPermissionLister implements the EventPermissionLister interface.
type eventPermissionLister struct {
	indexer cache.Indexer
}

// NewEventPermissionLister returns a new EventPermissionLister.
func NewEventPermissionLister(indexer cache.Indexer) EventPermissionLister {
	return &eventPermissionLister{indexer: indexer}
}

// List lists all EventPermissions in the indexer.
func (s *eventPermissionLister) List(selector labels.Selector) (ret []*v1alpha1.EventPermission, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventPermission))
	})
	return ret, err
}

// EventPermissions returns an object that can list and get EventPermissions.
func (s *eventPermissionLister) EventPermissions(namespace string) EventPermissionNamespaceLister {
	return eventPermissionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventPermissionNamespaceLister helps list and get EventPermissions.
// All objects returned here must be treated as read-only.
type EventPermissionNamespaceLister interface {
	// List lists all EventPermissions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EventPermission, err error)
	// Get retrieves the EventPermission from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EventPermission, error)
	EventPermissionNamespaceListerExpansion
}

// eventPermissionNamespaceLister implements the EventPermissionNamespaceLister
// interface.
type eventPermissionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EventPermissions in the indexer for a given namespace.
func (s eventPermissionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EventPermission, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventPermission))
	})
	return ret, err
}

// Get retrieves the EventPermission from the indexer for a given namespace and name.
func (s eventPermissionNamespaceLister) Get(name string) (*v1alpha1.EventPermission, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eventpermission"), name)
	}
	return obj.(*v1alpha1.EventPermission), nil
}
