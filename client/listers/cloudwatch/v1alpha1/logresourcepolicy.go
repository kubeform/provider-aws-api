/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudwatch/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LogResourcePolicyLister helps list LogResourcePolicies.
// All objects returned here must be treated as read-only.
type LogResourcePolicyLister interface {
	// List lists all LogResourcePolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogResourcePolicy, err error)
	// LogResourcePolicies returns an object that can list and get LogResourcePolicies.
	LogResourcePolicies(namespace string) LogResourcePolicyNamespaceLister
	LogResourcePolicyListerExpansion
}

// logResourcePolicyLister implements the LogResourcePolicyLister interface.
type logResourcePolicyLister struct {
	indexer cache.Indexer
}

// NewLogResourcePolicyLister returns a new LogResourcePolicyLister.
func NewLogResourcePolicyLister(indexer cache.Indexer) LogResourcePolicyLister {
	return &logResourcePolicyLister{indexer: indexer}
}

// List lists all LogResourcePolicies in the indexer.
func (s *logResourcePolicyLister) List(selector labels.Selector) (ret []*v1alpha1.LogResourcePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogResourcePolicy))
	})
	return ret, err
}

// LogResourcePolicies returns an object that can list and get LogResourcePolicies.
func (s *logResourcePolicyLister) LogResourcePolicies(namespace string) LogResourcePolicyNamespaceLister {
	return logResourcePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogResourcePolicyNamespaceLister helps list and get LogResourcePolicies.
// All objects returned here must be treated as read-only.
type LogResourcePolicyNamespaceLister interface {
	// List lists all LogResourcePolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogResourcePolicy, err error)
	// Get retrieves the LogResourcePolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LogResourcePolicy, error)
	LogResourcePolicyNamespaceListerExpansion
}

// logResourcePolicyNamespaceLister implements the LogResourcePolicyNamespaceLister
// interface.
type logResourcePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogResourcePolicies in the indexer for a given namespace.
func (s logResourcePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogResourcePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogResourcePolicy))
	})
	return ret, err
}

// Get retrieves the LogResourcePolicy from the indexer for a given namespace and name.
func (s logResourcePolicyNamespaceLister) Get(name string) (*v1alpha1.LogResourcePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("logresourcepolicy"), name)
	}
	return obj.(*v1alpha1.LogResourcePolicy), nil
}
