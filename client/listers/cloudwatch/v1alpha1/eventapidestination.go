/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudwatch/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EventAPIDestinationLister helps list EventAPIDestinations.
// All objects returned here must be treated as read-only.
type EventAPIDestinationLister interface {
	// List lists all EventAPIDestinations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EventAPIDestination, err error)
	// EventAPIDestinations returns an object that can list and get EventAPIDestinations.
	EventAPIDestinations(namespace string) EventAPIDestinationNamespaceLister
	EventAPIDestinationListerExpansion
}

// eventAPIDestinationLister implements the EventAPIDestinationLister interface.
type eventAPIDestinationLister struct {
	indexer cache.Indexer
}

// NewEventAPIDestinationLister returns a new EventAPIDestinationLister.
func NewEventAPIDestinationLister(indexer cache.Indexer) EventAPIDestinationLister {
	return &eventAPIDestinationLister{indexer: indexer}
}

// List lists all EventAPIDestinations in the indexer.
func (s *eventAPIDestinationLister) List(selector labels.Selector) (ret []*v1alpha1.EventAPIDestination, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventAPIDestination))
	})
	return ret, err
}

// EventAPIDestinations returns an object that can list and get EventAPIDestinations.
func (s *eventAPIDestinationLister) EventAPIDestinations(namespace string) EventAPIDestinationNamespaceLister {
	return eventAPIDestinationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventAPIDestinationNamespaceLister helps list and get EventAPIDestinations.
// All objects returned here must be treated as read-only.
type EventAPIDestinationNamespaceLister interface {
	// List lists all EventAPIDestinations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EventAPIDestination, err error)
	// Get retrieves the EventAPIDestination from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EventAPIDestination, error)
	EventAPIDestinationNamespaceListerExpansion
}

// eventAPIDestinationNamespaceLister implements the EventAPIDestinationNamespaceLister
// interface.
type eventAPIDestinationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EventAPIDestinations in the indexer for a given namespace.
func (s eventAPIDestinationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EventAPIDestination, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventAPIDestination))
	})
	return ret, err
}

// Get retrieves the EventAPIDestination from the indexer for a given namespace and name.
func (s eventAPIDestinationNamespaceLister) Get(name string) (*v1alpha1.EventAPIDestination, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eventapidestination"), name)
	}
	return obj.(*v1alpha1.EventAPIDestination), nil
}
