/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudwatch/v1alpha1"
)

// LogSubscriptionFilterLister helps list LogSubscriptionFilters.
// All objects returned here must be treated as read-only.
type LogSubscriptionFilterLister interface {
	// List lists all LogSubscriptionFilters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogSubscriptionFilter, err error)
	// LogSubscriptionFilters returns an object that can list and get LogSubscriptionFilters.
	LogSubscriptionFilters(namespace string) LogSubscriptionFilterNamespaceLister
	LogSubscriptionFilterListerExpansion
}

// logSubscriptionFilterLister implements the LogSubscriptionFilterLister interface.
type logSubscriptionFilterLister struct {
	indexer cache.Indexer
}

// NewLogSubscriptionFilterLister returns a new LogSubscriptionFilterLister.
func NewLogSubscriptionFilterLister(indexer cache.Indexer) LogSubscriptionFilterLister {
	return &logSubscriptionFilterLister{indexer: indexer}
}

// List lists all LogSubscriptionFilters in the indexer.
func (s *logSubscriptionFilterLister) List(selector labels.Selector) (ret []*v1alpha1.LogSubscriptionFilter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogSubscriptionFilter))
	})
	return ret, err
}

// LogSubscriptionFilters returns an object that can list and get LogSubscriptionFilters.
func (s *logSubscriptionFilterLister) LogSubscriptionFilters(namespace string) LogSubscriptionFilterNamespaceLister {
	return logSubscriptionFilterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogSubscriptionFilterNamespaceLister helps list and get LogSubscriptionFilters.
// All objects returned here must be treated as read-only.
type LogSubscriptionFilterNamespaceLister interface {
	// List lists all LogSubscriptionFilters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogSubscriptionFilter, err error)
	// Get retrieves the LogSubscriptionFilter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LogSubscriptionFilter, error)
	LogSubscriptionFilterNamespaceListerExpansion
}

// logSubscriptionFilterNamespaceLister implements the LogSubscriptionFilterNamespaceLister
// interface.
type logSubscriptionFilterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogSubscriptionFilters in the indexer for a given namespace.
func (s logSubscriptionFilterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogSubscriptionFilter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogSubscriptionFilter))
	})
	return ret, err
}

// Get retrieves the LogSubscriptionFilter from the indexer for a given namespace and name.
func (s logSubscriptionFilterNamespaceLister) Get(name string) (*v1alpha1.LogSubscriptionFilter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("logsubscriptionfilter"), name)
	}
	return obj.(*v1alpha1.LogSubscriptionFilter), nil
}
