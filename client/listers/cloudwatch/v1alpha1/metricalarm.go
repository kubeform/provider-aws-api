/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudwatch/v1alpha1"
)

// MetricAlarmLister helps list MetricAlarms.
// All objects returned here must be treated as read-only.
type MetricAlarmLister interface {
	// List lists all MetricAlarms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MetricAlarm, err error)
	// MetricAlarms returns an object that can list and get MetricAlarms.
	MetricAlarms(namespace string) MetricAlarmNamespaceLister
	MetricAlarmListerExpansion
}

// metricAlarmLister implements the MetricAlarmLister interface.
type metricAlarmLister struct {
	indexer cache.Indexer
}

// NewMetricAlarmLister returns a new MetricAlarmLister.
func NewMetricAlarmLister(indexer cache.Indexer) MetricAlarmLister {
	return &metricAlarmLister{indexer: indexer}
}

// List lists all MetricAlarms in the indexer.
func (s *metricAlarmLister) List(selector labels.Selector) (ret []*v1alpha1.MetricAlarm, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MetricAlarm))
	})
	return ret, err
}

// MetricAlarms returns an object that can list and get MetricAlarms.
func (s *metricAlarmLister) MetricAlarms(namespace string) MetricAlarmNamespaceLister {
	return metricAlarmNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MetricAlarmNamespaceLister helps list and get MetricAlarms.
// All objects returned here must be treated as read-only.
type MetricAlarmNamespaceLister interface {
	// List lists all MetricAlarms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MetricAlarm, err error)
	// Get retrieves the MetricAlarm from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MetricAlarm, error)
	MetricAlarmNamespaceListerExpansion
}

// metricAlarmNamespaceLister implements the MetricAlarmNamespaceLister
// interface.
type metricAlarmNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MetricAlarms in the indexer for a given namespace.
func (s metricAlarmNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MetricAlarm, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MetricAlarm))
	})
	return ret, err
}

// Get retrieves the MetricAlarm from the indexer for a given namespace and name.
func (s metricAlarmNamespaceLister) Get(name string) (*v1alpha1.MetricAlarm, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("metricalarm"), name)
	}
	return obj.(*v1alpha1.MetricAlarm), nil
}
