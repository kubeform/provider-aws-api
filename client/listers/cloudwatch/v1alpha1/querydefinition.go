/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudwatch/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QueryDefinitionLister helps list QueryDefinitions.
// All objects returned here must be treated as read-only.
type QueryDefinitionLister interface {
	// List lists all QueryDefinitions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QueryDefinition, err error)
	// QueryDefinitions returns an object that can list and get QueryDefinitions.
	QueryDefinitions(namespace string) QueryDefinitionNamespaceLister
	QueryDefinitionListerExpansion
}

// queryDefinitionLister implements the QueryDefinitionLister interface.
type queryDefinitionLister struct {
	indexer cache.Indexer
}

// NewQueryDefinitionLister returns a new QueryDefinitionLister.
func NewQueryDefinitionLister(indexer cache.Indexer) QueryDefinitionLister {
	return &queryDefinitionLister{indexer: indexer}
}

// List lists all QueryDefinitions in the indexer.
func (s *queryDefinitionLister) List(selector labels.Selector) (ret []*v1alpha1.QueryDefinition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QueryDefinition))
	})
	return ret, err
}

// QueryDefinitions returns an object that can list and get QueryDefinitions.
func (s *queryDefinitionLister) QueryDefinitions(namespace string) QueryDefinitionNamespaceLister {
	return queryDefinitionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QueryDefinitionNamespaceLister helps list and get QueryDefinitions.
// All objects returned here must be treated as read-only.
type QueryDefinitionNamespaceLister interface {
	// List lists all QueryDefinitions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QueryDefinition, err error)
	// Get retrieves the QueryDefinition from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.QueryDefinition, error)
	QueryDefinitionNamespaceListerExpansion
}

// queryDefinitionNamespaceLister implements the QueryDefinitionNamespaceLister
// interface.
type queryDefinitionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all QueryDefinitions in the indexer for a given namespace.
func (s queryDefinitionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.QueryDefinition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QueryDefinition))
	})
	return ret, err
}

// Get retrieves the QueryDefinition from the indexer for a given namespace and name.
func (s queryDefinitionNamespaceLister) Get(name string) (*v1alpha1.QueryDefinition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("querydefinition"), name)
	}
	return obj.(*v1alpha1.QueryDefinition), nil
}
