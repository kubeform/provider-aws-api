/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudwatch/v1alpha1"
)

// LogDestinationPolicyLister helps list LogDestinationPolicies.
// All objects returned here must be treated as read-only.
type LogDestinationPolicyLister interface {
	// List lists all LogDestinationPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogDestinationPolicy, err error)
	// LogDestinationPolicies returns an object that can list and get LogDestinationPolicies.
	LogDestinationPolicies(namespace string) LogDestinationPolicyNamespaceLister
	LogDestinationPolicyListerExpansion
}

// logDestinationPolicyLister implements the LogDestinationPolicyLister interface.
type logDestinationPolicyLister struct {
	indexer cache.Indexer
}

// NewLogDestinationPolicyLister returns a new LogDestinationPolicyLister.
func NewLogDestinationPolicyLister(indexer cache.Indexer) LogDestinationPolicyLister {
	return &logDestinationPolicyLister{indexer: indexer}
}

// List lists all LogDestinationPolicies in the indexer.
func (s *logDestinationPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.LogDestinationPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogDestinationPolicy))
	})
	return ret, err
}

// LogDestinationPolicies returns an object that can list and get LogDestinationPolicies.
func (s *logDestinationPolicyLister) LogDestinationPolicies(namespace string) LogDestinationPolicyNamespaceLister {
	return logDestinationPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogDestinationPolicyNamespaceLister helps list and get LogDestinationPolicies.
// All objects returned here must be treated as read-only.
type LogDestinationPolicyNamespaceLister interface {
	// List lists all LogDestinationPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogDestinationPolicy, err error)
	// Get retrieves the LogDestinationPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LogDestinationPolicy, error)
	LogDestinationPolicyNamespaceListerExpansion
}

// logDestinationPolicyNamespaceLister implements the LogDestinationPolicyNamespaceLister
// interface.
type logDestinationPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogDestinationPolicies in the indexer for a given namespace.
func (s logDestinationPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogDestinationPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogDestinationPolicy))
	})
	return ret, err
}

// Get retrieves the LogDestinationPolicy from the indexer for a given namespace and name.
func (s logDestinationPolicyNamespaceLister) Get(name string) (*v1alpha1.LogDestinationPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("logdestinationpolicy"), name)
	}
	return obj.(*v1alpha1.LogDestinationPolicy), nil
}
