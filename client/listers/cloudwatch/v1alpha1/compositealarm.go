/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudwatch/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CompositeAlarmLister helps list CompositeAlarms.
// All objects returned here must be treated as read-only.
type CompositeAlarmLister interface {
	// List lists all CompositeAlarms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CompositeAlarm, err error)
	// CompositeAlarms returns an object that can list and get CompositeAlarms.
	CompositeAlarms(namespace string) CompositeAlarmNamespaceLister
	CompositeAlarmListerExpansion
}

// compositeAlarmLister implements the CompositeAlarmLister interface.
type compositeAlarmLister struct {
	indexer cache.Indexer
}

// NewCompositeAlarmLister returns a new CompositeAlarmLister.
func NewCompositeAlarmLister(indexer cache.Indexer) CompositeAlarmLister {
	return &compositeAlarmLister{indexer: indexer}
}

// List lists all CompositeAlarms in the indexer.
func (s *compositeAlarmLister) List(selector labels.Selector) (ret []*v1alpha1.CompositeAlarm, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CompositeAlarm))
	})
	return ret, err
}

// CompositeAlarms returns an object that can list and get CompositeAlarms.
func (s *compositeAlarmLister) CompositeAlarms(namespace string) CompositeAlarmNamespaceLister {
	return compositeAlarmNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CompositeAlarmNamespaceLister helps list and get CompositeAlarms.
// All objects returned here must be treated as read-only.
type CompositeAlarmNamespaceLister interface {
	// List lists all CompositeAlarms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CompositeAlarm, err error)
	// Get retrieves the CompositeAlarm from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CompositeAlarm, error)
	CompositeAlarmNamespaceListerExpansion
}

// compositeAlarmNamespaceLister implements the CompositeAlarmNamespaceLister
// interface.
type compositeAlarmNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CompositeAlarms in the indexer for a given namespace.
func (s compositeAlarmNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CompositeAlarm, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CompositeAlarm))
	})
	return ret, err
}

// Get retrieves the CompositeAlarm from the indexer for a given namespace and name.
func (s compositeAlarmNamespaceLister) Get(name string) (*v1alpha1.CompositeAlarm, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("compositealarm"), name)
	}
	return obj.(*v1alpha1.CompositeAlarm), nil
}
