/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cloudwatch/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LogMetricFilterLister helps list LogMetricFilters.
// All objects returned here must be treated as read-only.
type LogMetricFilterLister interface {
	// List lists all LogMetricFilters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogMetricFilter, err error)
	// LogMetricFilters returns an object that can list and get LogMetricFilters.
	LogMetricFilters(namespace string) LogMetricFilterNamespaceLister
	LogMetricFilterListerExpansion
}

// logMetricFilterLister implements the LogMetricFilterLister interface.
type logMetricFilterLister struct {
	indexer cache.Indexer
}

// NewLogMetricFilterLister returns a new LogMetricFilterLister.
func NewLogMetricFilterLister(indexer cache.Indexer) LogMetricFilterLister {
	return &logMetricFilterLister{indexer: indexer}
}

// List lists all LogMetricFilters in the indexer.
func (s *logMetricFilterLister) List(selector labels.Selector) (ret []*v1alpha1.LogMetricFilter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogMetricFilter))
	})
	return ret, err
}

// LogMetricFilters returns an object that can list and get LogMetricFilters.
func (s *logMetricFilterLister) LogMetricFilters(namespace string) LogMetricFilterNamespaceLister {
	return logMetricFilterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogMetricFilterNamespaceLister helps list and get LogMetricFilters.
// All objects returned here must be treated as read-only.
type LogMetricFilterNamespaceLister interface {
	// List lists all LogMetricFilters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogMetricFilter, err error)
	// Get retrieves the LogMetricFilter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LogMetricFilter, error)
	LogMetricFilterNamespaceListerExpansion
}

// logMetricFilterNamespaceLister implements the LogMetricFilterNamespaceLister
// interface.
type logMetricFilterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogMetricFilters in the indexer for a given namespace.
func (s logMetricFilterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogMetricFilter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogMetricFilter))
	})
	return ret, err
}

// Get retrieves the LogMetricFilter from the indexer for a given namespace and name.
func (s logMetricFilterNamespaceLister) Get(name string) (*v1alpha1.LogMetricFilter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("logmetricfilter"), name)
	}
	return obj.(*v1alpha1.LogMetricFilter), nil
}
