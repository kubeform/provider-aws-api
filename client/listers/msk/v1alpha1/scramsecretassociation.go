/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/msk/v1alpha1"
)

// ScramSecretAssociationLister helps list ScramSecretAssociations.
// All objects returned here must be treated as read-only.
type ScramSecretAssociationLister interface {
	// List lists all ScramSecretAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScramSecretAssociation, err error)
	// ScramSecretAssociations returns an object that can list and get ScramSecretAssociations.
	ScramSecretAssociations(namespace string) ScramSecretAssociationNamespaceLister
	ScramSecretAssociationListerExpansion
}

// scramSecretAssociationLister implements the ScramSecretAssociationLister interface.
type scramSecretAssociationLister struct {
	indexer cache.Indexer
}

// NewScramSecretAssociationLister returns a new ScramSecretAssociationLister.
func NewScramSecretAssociationLister(indexer cache.Indexer) ScramSecretAssociationLister {
	return &scramSecretAssociationLister{indexer: indexer}
}

// List lists all ScramSecretAssociations in the indexer.
func (s *scramSecretAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.ScramSecretAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScramSecretAssociation))
	})
	return ret, err
}

// ScramSecretAssociations returns an object that can list and get ScramSecretAssociations.
func (s *scramSecretAssociationLister) ScramSecretAssociations(namespace string) ScramSecretAssociationNamespaceLister {
	return scramSecretAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScramSecretAssociationNamespaceLister helps list and get ScramSecretAssociations.
// All objects returned here must be treated as read-only.
type ScramSecretAssociationNamespaceLister interface {
	// List lists all ScramSecretAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScramSecretAssociation, err error)
	// Get retrieves the ScramSecretAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScramSecretAssociation, error)
	ScramSecretAssociationNamespaceListerExpansion
}

// scramSecretAssociationNamespaceLister implements the ScramSecretAssociationNamespaceLister
// interface.
type scramSecretAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScramSecretAssociations in the indexer for a given namespace.
func (s scramSecretAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScramSecretAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScramSecretAssociation))
	})
	return ret, err
}

// Get retrieves the ScramSecretAssociation from the indexer for a given namespace and name.
func (s scramSecretAssociationNamespaceLister) Get(name string) (*v1alpha1.ScramSecretAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scramsecretassociation"), name)
	}
	return obj.(*v1alpha1.ScramSecretAssociation), nil
}
