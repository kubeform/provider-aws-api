/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/acmpca/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CertificateAuthorityCertificateLister helps list CertificateAuthorityCertificates.
// All objects returned here must be treated as read-only.
type CertificateAuthorityCertificateLister interface {
	// List lists all CertificateAuthorityCertificates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CertificateAuthorityCertificate, err error)
	// CertificateAuthorityCertificates returns an object that can list and get CertificateAuthorityCertificates.
	CertificateAuthorityCertificates(namespace string) CertificateAuthorityCertificateNamespaceLister
	CertificateAuthorityCertificateListerExpansion
}

// certificateAuthorityCertificateLister implements the CertificateAuthorityCertificateLister interface.
type certificateAuthorityCertificateLister struct {
	indexer cache.Indexer
}

// NewCertificateAuthorityCertificateLister returns a new CertificateAuthorityCertificateLister.
func NewCertificateAuthorityCertificateLister(indexer cache.Indexer) CertificateAuthorityCertificateLister {
	return &certificateAuthorityCertificateLister{indexer: indexer}
}

// List lists all CertificateAuthorityCertificates in the indexer.
func (s *certificateAuthorityCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateAuthorityCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CertificateAuthorityCertificate))
	})
	return ret, err
}

// CertificateAuthorityCertificates returns an object that can list and get CertificateAuthorityCertificates.
func (s *certificateAuthorityCertificateLister) CertificateAuthorityCertificates(namespace string) CertificateAuthorityCertificateNamespaceLister {
	return certificateAuthorityCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CertificateAuthorityCertificateNamespaceLister helps list and get CertificateAuthorityCertificates.
// All objects returned here must be treated as read-only.
type CertificateAuthorityCertificateNamespaceLister interface {
	// List lists all CertificateAuthorityCertificates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CertificateAuthorityCertificate, err error)
	// Get retrieves the CertificateAuthorityCertificate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CertificateAuthorityCertificate, error)
	CertificateAuthorityCertificateNamespaceListerExpansion
}

// certificateAuthorityCertificateNamespaceLister implements the CertificateAuthorityCertificateNamespaceLister
// interface.
type certificateAuthorityCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CertificateAuthorityCertificates in the indexer for a given namespace.
func (s certificateAuthorityCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateAuthorityCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CertificateAuthorityCertificate))
	})
	return ret, err
}

// Get retrieves the CertificateAuthorityCertificate from the indexer for a given namespace and name.
func (s certificateAuthorityCertificateNamespaceLister) Get(name string) (*v1alpha1.CertificateAuthorityCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("certificateauthoritycertificate"), name)
	}
	return obj.(*v1alpha1.CertificateAuthorityCertificate), nil
}
