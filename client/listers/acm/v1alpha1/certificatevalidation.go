/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/acm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CertificateValidationLister helps list CertificateValidations.
// All objects returned here must be treated as read-only.
type CertificateValidationLister interface {
	// List lists all CertificateValidations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CertificateValidation, err error)
	// CertificateValidations returns an object that can list and get CertificateValidations.
	CertificateValidations(namespace string) CertificateValidationNamespaceLister
	CertificateValidationListerExpansion
}

// certificateValidationLister implements the CertificateValidationLister interface.
type certificateValidationLister struct {
	indexer cache.Indexer
}

// NewCertificateValidationLister returns a new CertificateValidationLister.
func NewCertificateValidationLister(indexer cache.Indexer) CertificateValidationLister {
	return &certificateValidationLister{indexer: indexer}
}

// List lists all CertificateValidations in the indexer.
func (s *certificateValidationLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateValidation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CertificateValidation))
	})
	return ret, err
}

// CertificateValidations returns an object that can list and get CertificateValidations.
func (s *certificateValidationLister) CertificateValidations(namespace string) CertificateValidationNamespaceLister {
	return certificateValidationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CertificateValidationNamespaceLister helps list and get CertificateValidations.
// All objects returned here must be treated as read-only.
type CertificateValidationNamespaceLister interface {
	// List lists all CertificateValidations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CertificateValidation, err error)
	// Get retrieves the CertificateValidation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CertificateValidation, error)
	CertificateValidationNamespaceListerExpansion
}

// certificateValidationNamespaceLister implements the CertificateValidationNamespaceLister
// interface.
type certificateValidationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CertificateValidations in the indexer for a given namespace.
func (s certificateValidationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateValidation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CertificateValidation))
	})
	return ret, err
}

// Get retrieves the CertificateValidation from the indexer for a given namespace and name.
func (s certificateValidationNamespaceLister) Get(name string) (*v1alpha1.CertificateValidation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("certificatevalidation"), name)
	}
	return obj.(*v1alpha1.CertificateValidation), nil
}
