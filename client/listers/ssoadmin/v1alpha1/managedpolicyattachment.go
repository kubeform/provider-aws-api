/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ssoadmin/v1alpha1"
)

// ManagedPolicyAttachmentLister helps list ManagedPolicyAttachments.
// All objects returned here must be treated as read-only.
type ManagedPolicyAttachmentLister interface {
	// List lists all ManagedPolicyAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedPolicyAttachment, err error)
	// ManagedPolicyAttachments returns an object that can list and get ManagedPolicyAttachments.
	ManagedPolicyAttachments(namespace string) ManagedPolicyAttachmentNamespaceLister
	ManagedPolicyAttachmentListerExpansion
}

// managedPolicyAttachmentLister implements the ManagedPolicyAttachmentLister interface.
type managedPolicyAttachmentLister struct {
	indexer cache.Indexer
}

// NewManagedPolicyAttachmentLister returns a new ManagedPolicyAttachmentLister.
func NewManagedPolicyAttachmentLister(indexer cache.Indexer) ManagedPolicyAttachmentLister {
	return &managedPolicyAttachmentLister{indexer: indexer}
}

// List lists all ManagedPolicyAttachments in the indexer.
func (s *managedPolicyAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedPolicyAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedPolicyAttachment))
	})
	return ret, err
}

// ManagedPolicyAttachments returns an object that can list and get ManagedPolicyAttachments.
func (s *managedPolicyAttachmentLister) ManagedPolicyAttachments(namespace string) ManagedPolicyAttachmentNamespaceLister {
	return managedPolicyAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagedPolicyAttachmentNamespaceLister helps list and get ManagedPolicyAttachments.
// All objects returned here must be treated as read-only.
type ManagedPolicyAttachmentNamespaceLister interface {
	// List lists all ManagedPolicyAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedPolicyAttachment, err error)
	// Get retrieves the ManagedPolicyAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagedPolicyAttachment, error)
	ManagedPolicyAttachmentNamespaceListerExpansion
}

// managedPolicyAttachmentNamespaceLister implements the ManagedPolicyAttachmentNamespaceLister
// interface.
type managedPolicyAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagedPolicyAttachments in the indexer for a given namespace.
func (s managedPolicyAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedPolicyAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedPolicyAttachment))
	})
	return ret, err
}

// Get retrieves the ManagedPolicyAttachment from the indexer for a given namespace and name.
func (s managedPolicyAttachmentNamespaceLister) Get(name string) (*v1alpha1.ManagedPolicyAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managedpolicyattachment"), name)
	}
	return obj.(*v1alpha1.ManagedPolicyAttachment), nil
}
