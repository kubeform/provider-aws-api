/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ssoadmin/v1alpha1"
)

// PermissionSetLister helps list PermissionSets.
// All objects returned here must be treated as read-only.
type PermissionSetLister interface {
	// List lists all PermissionSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PermissionSet, err error)
	// PermissionSets returns an object that can list and get PermissionSets.
	PermissionSets(namespace string) PermissionSetNamespaceLister
	PermissionSetListerExpansion
}

// permissionSetLister implements the PermissionSetLister interface.
type permissionSetLister struct {
	indexer cache.Indexer
}

// NewPermissionSetLister returns a new PermissionSetLister.
func NewPermissionSetLister(indexer cache.Indexer) PermissionSetLister {
	return &permissionSetLister{indexer: indexer}
}

// List lists all PermissionSets in the indexer.
func (s *permissionSetLister) List(selector labels.Selector) (ret []*v1alpha1.PermissionSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PermissionSet))
	})
	return ret, err
}

// PermissionSets returns an object that can list and get PermissionSets.
func (s *permissionSetLister) PermissionSets(namespace string) PermissionSetNamespaceLister {
	return permissionSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PermissionSetNamespaceLister helps list and get PermissionSets.
// All objects returned here must be treated as read-only.
type PermissionSetNamespaceLister interface {
	// List lists all PermissionSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PermissionSet, err error)
	// Get retrieves the PermissionSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PermissionSet, error)
	PermissionSetNamespaceListerExpansion
}

// permissionSetNamespaceLister implements the PermissionSetNamespaceLister
// interface.
type permissionSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PermissionSets in the indexer for a given namespace.
func (s permissionSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PermissionSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PermissionSet))
	})
	return ret, err
}

// Get retrieves the PermissionSet from the indexer for a given namespace and name.
func (s permissionSetNamespaceLister) Get(name string) (*v1alpha1.PermissionSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("permissionset"), name)
	}
	return obj.(*v1alpha1.PermissionSet), nil
}
