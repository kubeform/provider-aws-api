/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/apprunner/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CustomDomainAssociationLister helps list CustomDomainAssociations.
// All objects returned here must be treated as read-only.
type CustomDomainAssociationLister interface {
	// List lists all CustomDomainAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CustomDomainAssociation, err error)
	// CustomDomainAssociations returns an object that can list and get CustomDomainAssociations.
	CustomDomainAssociations(namespace string) CustomDomainAssociationNamespaceLister
	CustomDomainAssociationListerExpansion
}

// customDomainAssociationLister implements the CustomDomainAssociationLister interface.
type customDomainAssociationLister struct {
	indexer cache.Indexer
}

// NewCustomDomainAssociationLister returns a new CustomDomainAssociationLister.
func NewCustomDomainAssociationLister(indexer cache.Indexer) CustomDomainAssociationLister {
	return &customDomainAssociationLister{indexer: indexer}
}

// List lists all CustomDomainAssociations in the indexer.
func (s *customDomainAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.CustomDomainAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CustomDomainAssociation))
	})
	return ret, err
}

// CustomDomainAssociations returns an object that can list and get CustomDomainAssociations.
func (s *customDomainAssociationLister) CustomDomainAssociations(namespace string) CustomDomainAssociationNamespaceLister {
	return customDomainAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CustomDomainAssociationNamespaceLister helps list and get CustomDomainAssociations.
// All objects returned here must be treated as read-only.
type CustomDomainAssociationNamespaceLister interface {
	// List lists all CustomDomainAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CustomDomainAssociation, err error)
	// Get retrieves the CustomDomainAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CustomDomainAssociation, error)
	CustomDomainAssociationNamespaceListerExpansion
}

// customDomainAssociationNamespaceLister implements the CustomDomainAssociationNamespaceLister
// interface.
type customDomainAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CustomDomainAssociations in the indexer for a given namespace.
func (s customDomainAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CustomDomainAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CustomDomainAssociation))
	})
	return ret, err
}

// Get retrieves the CustomDomainAssociation from the indexer for a given namespace and name.
func (s customDomainAssociationNamespaceLister) Get(name string) (*v1alpha1.CustomDomainAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("customdomainassociation"), name)
	}
	return obj.(*v1alpha1.CustomDomainAssociation), nil
}
