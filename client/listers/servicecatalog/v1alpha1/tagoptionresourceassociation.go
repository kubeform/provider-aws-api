/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/servicecatalog/v1alpha1"
)

// TagOptionResourceAssociationLister helps list TagOptionResourceAssociations.
// All objects returned here must be treated as read-only.
type TagOptionResourceAssociationLister interface {
	// List lists all TagOptionResourceAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TagOptionResourceAssociation, err error)
	// TagOptionResourceAssociations returns an object that can list and get TagOptionResourceAssociations.
	TagOptionResourceAssociations(namespace string) TagOptionResourceAssociationNamespaceLister
	TagOptionResourceAssociationListerExpansion
}

// tagOptionResourceAssociationLister implements the TagOptionResourceAssociationLister interface.
type tagOptionResourceAssociationLister struct {
	indexer cache.Indexer
}

// NewTagOptionResourceAssociationLister returns a new TagOptionResourceAssociationLister.
func NewTagOptionResourceAssociationLister(indexer cache.Indexer) TagOptionResourceAssociationLister {
	return &tagOptionResourceAssociationLister{indexer: indexer}
}

// List lists all TagOptionResourceAssociations in the indexer.
func (s *tagOptionResourceAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.TagOptionResourceAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TagOptionResourceAssociation))
	})
	return ret, err
}

// TagOptionResourceAssociations returns an object that can list and get TagOptionResourceAssociations.
func (s *tagOptionResourceAssociationLister) TagOptionResourceAssociations(namespace string) TagOptionResourceAssociationNamespaceLister {
	return tagOptionResourceAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TagOptionResourceAssociationNamespaceLister helps list and get TagOptionResourceAssociations.
// All objects returned here must be treated as read-only.
type TagOptionResourceAssociationNamespaceLister interface {
	// List lists all TagOptionResourceAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TagOptionResourceAssociation, err error)
	// Get retrieves the TagOptionResourceAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TagOptionResourceAssociation, error)
	TagOptionResourceAssociationNamespaceListerExpansion
}

// tagOptionResourceAssociationNamespaceLister implements the TagOptionResourceAssociationNamespaceLister
// interface.
type tagOptionResourceAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TagOptionResourceAssociations in the indexer for a given namespace.
func (s tagOptionResourceAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TagOptionResourceAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TagOptionResourceAssociation))
	})
	return ret, err
}

// Get retrieves the TagOptionResourceAssociation from the indexer for a given namespace and name.
func (s tagOptionResourceAssociationNamespaceLister) Get(name string) (*v1alpha1.TagOptionResourceAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tagoptionresourceassociation"), name)
	}
	return obj.(*v1alpha1.TagOptionResourceAssociation), nil
}
