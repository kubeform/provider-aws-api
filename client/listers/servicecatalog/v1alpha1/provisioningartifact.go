/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/servicecatalog/v1alpha1"
)

// ProvisioningArtifactLister helps list ProvisioningArtifacts.
// All objects returned here must be treated as read-only.
type ProvisioningArtifactLister interface {
	// List lists all ProvisioningArtifacts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProvisioningArtifact, err error)
	// ProvisioningArtifacts returns an object that can list and get ProvisioningArtifacts.
	ProvisioningArtifacts(namespace string) ProvisioningArtifactNamespaceLister
	ProvisioningArtifactListerExpansion
}

// provisioningArtifactLister implements the ProvisioningArtifactLister interface.
type provisioningArtifactLister struct {
	indexer cache.Indexer
}

// NewProvisioningArtifactLister returns a new ProvisioningArtifactLister.
func NewProvisioningArtifactLister(indexer cache.Indexer) ProvisioningArtifactLister {
	return &provisioningArtifactLister{indexer: indexer}
}

// List lists all ProvisioningArtifacts in the indexer.
func (s *provisioningArtifactLister) List(selector labels.Selector) (ret []*v1alpha1.ProvisioningArtifact, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProvisioningArtifact))
	})
	return ret, err
}

// ProvisioningArtifacts returns an object that can list and get ProvisioningArtifacts.
func (s *provisioningArtifactLister) ProvisioningArtifacts(namespace string) ProvisioningArtifactNamespaceLister {
	return provisioningArtifactNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProvisioningArtifactNamespaceLister helps list and get ProvisioningArtifacts.
// All objects returned here must be treated as read-only.
type ProvisioningArtifactNamespaceLister interface {
	// List lists all ProvisioningArtifacts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProvisioningArtifact, err error)
	// Get retrieves the ProvisioningArtifact from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProvisioningArtifact, error)
	ProvisioningArtifactNamespaceListerExpansion
}

// provisioningArtifactNamespaceLister implements the ProvisioningArtifactNamespaceLister
// interface.
type provisioningArtifactNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProvisioningArtifacts in the indexer for a given namespace.
func (s provisioningArtifactNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProvisioningArtifact, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProvisioningArtifact))
	})
	return ret, err
}

// Get retrieves the ProvisioningArtifact from the indexer for a given namespace and name.
func (s provisioningArtifactNamespaceLister) Get(name string) (*v1alpha1.ProvisioningArtifact, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("provisioningartifact"), name)
	}
	return obj.(*v1alpha1.ProvisioningArtifact), nil
}
