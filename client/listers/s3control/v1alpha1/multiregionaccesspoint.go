/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3control/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MultiRegionAccessPointLister helps list MultiRegionAccessPoints.
// All objects returned here must be treated as read-only.
type MultiRegionAccessPointLister interface {
	// List lists all MultiRegionAccessPoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiRegionAccessPoint, err error)
	// MultiRegionAccessPoints returns an object that can list and get MultiRegionAccessPoints.
	MultiRegionAccessPoints(namespace string) MultiRegionAccessPointNamespaceLister
	MultiRegionAccessPointListerExpansion
}

// multiRegionAccessPointLister implements the MultiRegionAccessPointLister interface.
type multiRegionAccessPointLister struct {
	indexer cache.Indexer
}

// NewMultiRegionAccessPointLister returns a new MultiRegionAccessPointLister.
func NewMultiRegionAccessPointLister(indexer cache.Indexer) MultiRegionAccessPointLister {
	return &multiRegionAccessPointLister{indexer: indexer}
}

// List lists all MultiRegionAccessPoints in the indexer.
func (s *multiRegionAccessPointLister) List(selector labels.Selector) (ret []*v1alpha1.MultiRegionAccessPoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiRegionAccessPoint))
	})
	return ret, err
}

// MultiRegionAccessPoints returns an object that can list and get MultiRegionAccessPoints.
func (s *multiRegionAccessPointLister) MultiRegionAccessPoints(namespace string) MultiRegionAccessPointNamespaceLister {
	return multiRegionAccessPointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MultiRegionAccessPointNamespaceLister helps list and get MultiRegionAccessPoints.
// All objects returned here must be treated as read-only.
type MultiRegionAccessPointNamespaceLister interface {
	// List lists all MultiRegionAccessPoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiRegionAccessPoint, err error)
	// Get retrieves the MultiRegionAccessPoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MultiRegionAccessPoint, error)
	MultiRegionAccessPointNamespaceListerExpansion
}

// multiRegionAccessPointNamespaceLister implements the MultiRegionAccessPointNamespaceLister
// interface.
type multiRegionAccessPointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MultiRegionAccessPoints in the indexer for a given namespace.
func (s multiRegionAccessPointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MultiRegionAccessPoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiRegionAccessPoint))
	})
	return ret, err
}

// Get retrieves the MultiRegionAccessPoint from the indexer for a given namespace and name.
func (s multiRegionAccessPointNamespaceLister) Get(name string) (*v1alpha1.MultiRegionAccessPoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("multiregionaccesspoint"), name)
	}
	return obj.(*v1alpha1.MultiRegionAccessPoint), nil
}
