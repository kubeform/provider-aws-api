/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3control/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ObjectLambdaAccessPointLister helps list ObjectLambdaAccessPoints.
// All objects returned here must be treated as read-only.
type ObjectLambdaAccessPointLister interface {
	// List lists all ObjectLambdaAccessPoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectLambdaAccessPoint, err error)
	// ObjectLambdaAccessPoints returns an object that can list and get ObjectLambdaAccessPoints.
	ObjectLambdaAccessPoints(namespace string) ObjectLambdaAccessPointNamespaceLister
	ObjectLambdaAccessPointListerExpansion
}

// objectLambdaAccessPointLister implements the ObjectLambdaAccessPointLister interface.
type objectLambdaAccessPointLister struct {
	indexer cache.Indexer
}

// NewObjectLambdaAccessPointLister returns a new ObjectLambdaAccessPointLister.
func NewObjectLambdaAccessPointLister(indexer cache.Indexer) ObjectLambdaAccessPointLister {
	return &objectLambdaAccessPointLister{indexer: indexer}
}

// List lists all ObjectLambdaAccessPoints in the indexer.
func (s *objectLambdaAccessPointLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectLambdaAccessPoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectLambdaAccessPoint))
	})
	return ret, err
}

// ObjectLambdaAccessPoints returns an object that can list and get ObjectLambdaAccessPoints.
func (s *objectLambdaAccessPointLister) ObjectLambdaAccessPoints(namespace string) ObjectLambdaAccessPointNamespaceLister {
	return objectLambdaAccessPointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ObjectLambdaAccessPointNamespaceLister helps list and get ObjectLambdaAccessPoints.
// All objects returned here must be treated as read-only.
type ObjectLambdaAccessPointNamespaceLister interface {
	// List lists all ObjectLambdaAccessPoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectLambdaAccessPoint, err error)
	// Get retrieves the ObjectLambdaAccessPoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ObjectLambdaAccessPoint, error)
	ObjectLambdaAccessPointNamespaceListerExpansion
}

// objectLambdaAccessPointNamespaceLister implements the ObjectLambdaAccessPointNamespaceLister
// interface.
type objectLambdaAccessPointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ObjectLambdaAccessPoints in the indexer for a given namespace.
func (s objectLambdaAccessPointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectLambdaAccessPoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectLambdaAccessPoint))
	})
	return ret, err
}

// Get retrieves the ObjectLambdaAccessPoint from the indexer for a given namespace and name.
func (s objectLambdaAccessPointNamespaceLister) Get(name string) (*v1alpha1.ObjectLambdaAccessPoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("objectlambdaaccesspoint"), name)
	}
	return obj.(*v1alpha1.ObjectLambdaAccessPoint), nil
}
