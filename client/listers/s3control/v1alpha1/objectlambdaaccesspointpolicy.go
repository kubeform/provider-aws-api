/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3control/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ObjectLambdaAccessPointPolicyLister helps list ObjectLambdaAccessPointPolicies.
// All objects returned here must be treated as read-only.
type ObjectLambdaAccessPointPolicyLister interface {
	// List lists all ObjectLambdaAccessPointPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectLambdaAccessPointPolicy, err error)
	// ObjectLambdaAccessPointPolicies returns an object that can list and get ObjectLambdaAccessPointPolicies.
	ObjectLambdaAccessPointPolicies(namespace string) ObjectLambdaAccessPointPolicyNamespaceLister
	ObjectLambdaAccessPointPolicyListerExpansion
}

// objectLambdaAccessPointPolicyLister implements the ObjectLambdaAccessPointPolicyLister interface.
type objectLambdaAccessPointPolicyLister struct {
	indexer cache.Indexer
}

// NewObjectLambdaAccessPointPolicyLister returns a new ObjectLambdaAccessPointPolicyLister.
func NewObjectLambdaAccessPointPolicyLister(indexer cache.Indexer) ObjectLambdaAccessPointPolicyLister {
	return &objectLambdaAccessPointPolicyLister{indexer: indexer}
}

// List lists all ObjectLambdaAccessPointPolicies in the indexer.
func (s *objectLambdaAccessPointPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectLambdaAccessPointPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectLambdaAccessPointPolicy))
	})
	return ret, err
}

// ObjectLambdaAccessPointPolicies returns an object that can list and get ObjectLambdaAccessPointPolicies.
func (s *objectLambdaAccessPointPolicyLister) ObjectLambdaAccessPointPolicies(namespace string) ObjectLambdaAccessPointPolicyNamespaceLister {
	return objectLambdaAccessPointPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ObjectLambdaAccessPointPolicyNamespaceLister helps list and get ObjectLambdaAccessPointPolicies.
// All objects returned here must be treated as read-only.
type ObjectLambdaAccessPointPolicyNamespaceLister interface {
	// List lists all ObjectLambdaAccessPointPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectLambdaAccessPointPolicy, err error)
	// Get retrieves the ObjectLambdaAccessPointPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ObjectLambdaAccessPointPolicy, error)
	ObjectLambdaAccessPointPolicyNamespaceListerExpansion
}

// objectLambdaAccessPointPolicyNamespaceLister implements the ObjectLambdaAccessPointPolicyNamespaceLister
// interface.
type objectLambdaAccessPointPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ObjectLambdaAccessPointPolicies in the indexer for a given namespace.
func (s objectLambdaAccessPointPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectLambdaAccessPointPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectLambdaAccessPointPolicy))
	})
	return ret, err
}

// Get retrieves the ObjectLambdaAccessPointPolicy from the indexer for a given namespace and name.
func (s objectLambdaAccessPointPolicyNamespaceLister) Get(name string) (*v1alpha1.ObjectLambdaAccessPointPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("objectlambdaaccesspointpolicy"), name)
	}
	return obj.(*v1alpha1.ObjectLambdaAccessPointPolicy), nil
}
