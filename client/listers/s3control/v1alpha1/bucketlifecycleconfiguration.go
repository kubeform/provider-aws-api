/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3control/v1alpha1"
)

// BucketLifecycleConfigurationLister helps list BucketLifecycleConfigurations.
// All objects returned here must be treated as read-only.
type BucketLifecycleConfigurationLister interface {
	// List lists all BucketLifecycleConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketLifecycleConfiguration, err error)
	// BucketLifecycleConfigurations returns an object that can list and get BucketLifecycleConfigurations.
	BucketLifecycleConfigurations(namespace string) BucketLifecycleConfigurationNamespaceLister
	BucketLifecycleConfigurationListerExpansion
}

// bucketLifecycleConfigurationLister implements the BucketLifecycleConfigurationLister interface.
type bucketLifecycleConfigurationLister struct {
	indexer cache.Indexer
}

// NewBucketLifecycleConfigurationLister returns a new BucketLifecycleConfigurationLister.
func NewBucketLifecycleConfigurationLister(indexer cache.Indexer) BucketLifecycleConfigurationLister {
	return &bucketLifecycleConfigurationLister{indexer: indexer}
}

// List lists all BucketLifecycleConfigurations in the indexer.
func (s *bucketLifecycleConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.BucketLifecycleConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketLifecycleConfiguration))
	})
	return ret, err
}

// BucketLifecycleConfigurations returns an object that can list and get BucketLifecycleConfigurations.
func (s *bucketLifecycleConfigurationLister) BucketLifecycleConfigurations(namespace string) BucketLifecycleConfigurationNamespaceLister {
	return bucketLifecycleConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketLifecycleConfigurationNamespaceLister helps list and get BucketLifecycleConfigurations.
// All objects returned here must be treated as read-only.
type BucketLifecycleConfigurationNamespaceLister interface {
	// List lists all BucketLifecycleConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BucketLifecycleConfiguration, err error)
	// Get retrieves the BucketLifecycleConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BucketLifecycleConfiguration, error)
	BucketLifecycleConfigurationNamespaceListerExpansion
}

// bucketLifecycleConfigurationNamespaceLister implements the BucketLifecycleConfigurationNamespaceLister
// interface.
type bucketLifecycleConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketLifecycleConfigurations in the indexer for a given namespace.
func (s bucketLifecycleConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketLifecycleConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketLifecycleConfiguration))
	})
	return ret, err
}

// Get retrieves the BucketLifecycleConfiguration from the indexer for a given namespace and name.
func (s bucketLifecycleConfigurationNamespaceLister) Get(name string) (*v1alpha1.BucketLifecycleConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketlifecycleconfiguration"), name)
	}
	return obj.(*v1alpha1.BucketLifecycleConfiguration), nil
}
