/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/s3control/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AccessPointPolicyLister helps list AccessPointPolicies.
// All objects returned here must be treated as read-only.
type AccessPointPolicyLister interface {
	// List lists all AccessPointPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessPointPolicy, err error)
	// AccessPointPolicies returns an object that can list and get AccessPointPolicies.
	AccessPointPolicies(namespace string) AccessPointPolicyNamespaceLister
	AccessPointPolicyListerExpansion
}

// accessPointPolicyLister implements the AccessPointPolicyLister interface.
type accessPointPolicyLister struct {
	indexer cache.Indexer
}

// NewAccessPointPolicyLister returns a new AccessPointPolicyLister.
func NewAccessPointPolicyLister(indexer cache.Indexer) AccessPointPolicyLister {
	return &accessPointPolicyLister{indexer: indexer}
}

// List lists all AccessPointPolicies in the indexer.
func (s *accessPointPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.AccessPointPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessPointPolicy))
	})
	return ret, err
}

// AccessPointPolicies returns an object that can list and get AccessPointPolicies.
func (s *accessPointPolicyLister) AccessPointPolicies(namespace string) AccessPointPolicyNamespaceLister {
	return accessPointPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccessPointPolicyNamespaceLister helps list and get AccessPointPolicies.
// All objects returned here must be treated as read-only.
type AccessPointPolicyNamespaceLister interface {
	// List lists all AccessPointPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccessPointPolicy, err error)
	// Get retrieves the AccessPointPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AccessPointPolicy, error)
	AccessPointPolicyNamespaceListerExpansion
}

// accessPointPolicyNamespaceLister implements the AccessPointPolicyNamespaceLister
// interface.
type accessPointPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccessPointPolicies in the indexer for a given namespace.
func (s accessPointPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AccessPointPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccessPointPolicy))
	})
	return ret, err
}

// Get retrieves the AccessPointPolicy from the indexer for a given namespace and name.
func (s accessPointPolicyNamespaceLister) Get(name string) (*v1alpha1.AccessPointPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accesspointpolicy"), name)
	}
	return obj.(*v1alpha1.AccessPointPolicy), nil
}
