/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iam/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RolePolicyLister helps list RolePolicies.
// All objects returned here must be treated as read-only.
type RolePolicyLister interface {
	// List lists all RolePolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RolePolicy, err error)
	// RolePolicies returns an object that can list and get RolePolicies.
	RolePolicies(namespace string) RolePolicyNamespaceLister
	RolePolicyListerExpansion
}

// rolePolicyLister implements the RolePolicyLister interface.
type rolePolicyLister struct {
	indexer cache.Indexer
}

// NewRolePolicyLister returns a new RolePolicyLister.
func NewRolePolicyLister(indexer cache.Indexer) RolePolicyLister {
	return &rolePolicyLister{indexer: indexer}
}

// List lists all RolePolicies in the indexer.
func (s *rolePolicyLister) List(selector labels.Selector) (ret []*v1alpha1.RolePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RolePolicy))
	})
	return ret, err
}

// RolePolicies returns an object that can list and get RolePolicies.
func (s *rolePolicyLister) RolePolicies(namespace string) RolePolicyNamespaceLister {
	return rolePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RolePolicyNamespaceLister helps list and get RolePolicies.
// All objects returned here must be treated as read-only.
type RolePolicyNamespaceLister interface {
	// List lists all RolePolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RolePolicy, err error)
	// Get retrieves the RolePolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RolePolicy, error)
	RolePolicyNamespaceListerExpansion
}

// rolePolicyNamespaceLister implements the RolePolicyNamespaceLister
// interface.
type rolePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RolePolicies in the indexer for a given namespace.
func (s rolePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RolePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RolePolicy))
	})
	return ret, err
}

// Get retrieves the RolePolicy from the indexer for a given namespace and name.
func (s rolePolicyNamespaceLister) Get(name string) (*v1alpha1.RolePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rolepolicy"), name)
	}
	return obj.(*v1alpha1.RolePolicy), nil
}
