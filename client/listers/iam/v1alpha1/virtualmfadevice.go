/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iam/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualMfaDeviceLister helps list VirtualMfaDevices.
// All objects returned here must be treated as read-only.
type VirtualMfaDeviceLister interface {
	// List lists all VirtualMfaDevices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMfaDevice, err error)
	// VirtualMfaDevices returns an object that can list and get VirtualMfaDevices.
	VirtualMfaDevices(namespace string) VirtualMfaDeviceNamespaceLister
	VirtualMfaDeviceListerExpansion
}

// virtualMfaDeviceLister implements the VirtualMfaDeviceLister interface.
type virtualMfaDeviceLister struct {
	indexer cache.Indexer
}

// NewVirtualMfaDeviceLister returns a new VirtualMfaDeviceLister.
func NewVirtualMfaDeviceLister(indexer cache.Indexer) VirtualMfaDeviceLister {
	return &virtualMfaDeviceLister{indexer: indexer}
}

// List lists all VirtualMfaDevices in the indexer.
func (s *virtualMfaDeviceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMfaDevice, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMfaDevice))
	})
	return ret, err
}

// VirtualMfaDevices returns an object that can list and get VirtualMfaDevices.
func (s *virtualMfaDeviceLister) VirtualMfaDevices(namespace string) VirtualMfaDeviceNamespaceLister {
	return virtualMfaDeviceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMfaDeviceNamespaceLister helps list and get VirtualMfaDevices.
// All objects returned here must be treated as read-only.
type VirtualMfaDeviceNamespaceLister interface {
	// List lists all VirtualMfaDevices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMfaDevice, err error)
	// Get retrieves the VirtualMfaDevice from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VirtualMfaDevice, error)
	VirtualMfaDeviceNamespaceListerExpansion
}

// virtualMfaDeviceNamespaceLister implements the VirtualMfaDeviceNamespaceLister
// interface.
type virtualMfaDeviceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMfaDevices in the indexer for a given namespace.
func (s virtualMfaDeviceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMfaDevice, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMfaDevice))
	})
	return ret, err
}

// Get retrieves the VirtualMfaDevice from the indexer for a given namespace and name.
func (s virtualMfaDeviceNamespaceLister) Get(name string) (*v1alpha1.VirtualMfaDevice, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualmfadevice"), name)
	}
	return obj.(*v1alpha1.VirtualMfaDevice), nil
}
