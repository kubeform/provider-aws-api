/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iam/v1alpha1"
)

// AccountAliasLister helps list AccountAliases.
// All objects returned here must be treated as read-only.
type AccountAliasLister interface {
	// List lists all AccountAliases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccountAlias, err error)
	// AccountAliases returns an object that can list and get AccountAliases.
	AccountAliases(namespace string) AccountAliasNamespaceLister
	AccountAliasListerExpansion
}

// accountAliasLister implements the AccountAliasLister interface.
type accountAliasLister struct {
	indexer cache.Indexer
}

// NewAccountAliasLister returns a new AccountAliasLister.
func NewAccountAliasLister(indexer cache.Indexer) AccountAliasLister {
	return &accountAliasLister{indexer: indexer}
}

// List lists all AccountAliases in the indexer.
func (s *accountAliasLister) List(selector labels.Selector) (ret []*v1alpha1.AccountAlias, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccountAlias))
	})
	return ret, err
}

// AccountAliases returns an object that can list and get AccountAliases.
func (s *accountAliasLister) AccountAliases(namespace string) AccountAliasNamespaceLister {
	return accountAliasNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccountAliasNamespaceLister helps list and get AccountAliases.
// All objects returned here must be treated as read-only.
type AccountAliasNamespaceLister interface {
	// List lists all AccountAliases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccountAlias, err error)
	// Get retrieves the AccountAlias from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AccountAlias, error)
	AccountAliasNamespaceListerExpansion
}

// accountAliasNamespaceLister implements the AccountAliasNamespaceLister
// interface.
type accountAliasNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccountAliases in the indexer for a given namespace.
func (s accountAliasNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AccountAlias, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccountAlias))
	})
	return ret, err
}

// Get retrieves the AccountAlias from the indexer for a given namespace and name.
func (s accountAliasNamespaceLister) Get(name string) (*v1alpha1.AccountAlias, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accountalias"), name)
	}
	return obj.(*v1alpha1.AccountAlias), nil
}
