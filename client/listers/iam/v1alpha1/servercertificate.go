/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iam/v1alpha1"
)

// ServerCertificateLister helps list ServerCertificates.
// All objects returned here must be treated as read-only.
type ServerCertificateLister interface {
	// List lists all ServerCertificates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerCertificate, err error)
	// ServerCertificates returns an object that can list and get ServerCertificates.
	ServerCertificates(namespace string) ServerCertificateNamespaceLister
	ServerCertificateListerExpansion
}

// serverCertificateLister implements the ServerCertificateLister interface.
type serverCertificateLister struct {
	indexer cache.Indexer
}

// NewServerCertificateLister returns a new ServerCertificateLister.
func NewServerCertificateLister(indexer cache.Indexer) ServerCertificateLister {
	return &serverCertificateLister{indexer: indexer}
}

// List lists all ServerCertificates in the indexer.
func (s *serverCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.ServerCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerCertificate))
	})
	return ret, err
}

// ServerCertificates returns an object that can list and get ServerCertificates.
func (s *serverCertificateLister) ServerCertificates(namespace string) ServerCertificateNamespaceLister {
	return serverCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServerCertificateNamespaceLister helps list and get ServerCertificates.
// All objects returned here must be treated as read-only.
type ServerCertificateNamespaceLister interface {
	// List lists all ServerCertificates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerCertificate, err error)
	// Get retrieves the ServerCertificate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServerCertificate, error)
	ServerCertificateNamespaceListerExpansion
}

// serverCertificateNamespaceLister implements the ServerCertificateNamespaceLister
// interface.
type serverCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServerCertificates in the indexer for a given namespace.
func (s serverCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServerCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerCertificate))
	})
	return ret, err
}

// Get retrieves the ServerCertificate from the indexer for a given namespace and name.
func (s serverCertificateNamespaceLister) Get(name string) (*v1alpha1.ServerCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servercertificate"), name)
	}
	return obj.(*v1alpha1.ServerCertificate), nil
}
