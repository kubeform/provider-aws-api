/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iam/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GroupPolicyLister helps list GroupPolicies.
// All objects returned here must be treated as read-only.
type GroupPolicyLister interface {
	// List lists all GroupPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GroupPolicy, err error)
	// GroupPolicies returns an object that can list and get GroupPolicies.
	GroupPolicies(namespace string) GroupPolicyNamespaceLister
	GroupPolicyListerExpansion
}

// groupPolicyLister implements the GroupPolicyLister interface.
type groupPolicyLister struct {
	indexer cache.Indexer
}

// NewGroupPolicyLister returns a new GroupPolicyLister.
func NewGroupPolicyLister(indexer cache.Indexer) GroupPolicyLister {
	return &groupPolicyLister{indexer: indexer}
}

// List lists all GroupPolicies in the indexer.
func (s *groupPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.GroupPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GroupPolicy))
	})
	return ret, err
}

// GroupPolicies returns an object that can list and get GroupPolicies.
func (s *groupPolicyLister) GroupPolicies(namespace string) GroupPolicyNamespaceLister {
	return groupPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GroupPolicyNamespaceLister helps list and get GroupPolicies.
// All objects returned here must be treated as read-only.
type GroupPolicyNamespaceLister interface {
	// List lists all GroupPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GroupPolicy, err error)
	// Get retrieves the GroupPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GroupPolicy, error)
	GroupPolicyNamespaceListerExpansion
}

// groupPolicyNamespaceLister implements the GroupPolicyNamespaceLister
// interface.
type groupPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GroupPolicies in the indexer for a given namespace.
func (s groupPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GroupPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GroupPolicy))
	})
	return ret, err
}

// Get retrieves the GroupPolicy from the indexer for a given namespace and name.
func (s groupPolicyNamespaceLister) Get(name string) (*v1alpha1.GroupPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("grouppolicy"), name)
	}
	return obj.(*v1alpha1.GroupPolicy), nil
}
