/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iam/v1alpha1"
)

// UserGroupMembershipLister helps list UserGroupMemberships.
// All objects returned here must be treated as read-only.
type UserGroupMembershipLister interface {
	// List lists all UserGroupMemberships in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserGroupMembership, err error)
	// UserGroupMemberships returns an object that can list and get UserGroupMemberships.
	UserGroupMemberships(namespace string) UserGroupMembershipNamespaceLister
	UserGroupMembershipListerExpansion
}

// userGroupMembershipLister implements the UserGroupMembershipLister interface.
type userGroupMembershipLister struct {
	indexer cache.Indexer
}

// NewUserGroupMembershipLister returns a new UserGroupMembershipLister.
func NewUserGroupMembershipLister(indexer cache.Indexer) UserGroupMembershipLister {
	return &userGroupMembershipLister{indexer: indexer}
}

// List lists all UserGroupMemberships in the indexer.
func (s *userGroupMembershipLister) List(selector labels.Selector) (ret []*v1alpha1.UserGroupMembership, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserGroupMembership))
	})
	return ret, err
}

// UserGroupMemberships returns an object that can list and get UserGroupMemberships.
func (s *userGroupMembershipLister) UserGroupMemberships(namespace string) UserGroupMembershipNamespaceLister {
	return userGroupMembershipNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserGroupMembershipNamespaceLister helps list and get UserGroupMemberships.
// All objects returned here must be treated as read-only.
type UserGroupMembershipNamespaceLister interface {
	// List lists all UserGroupMemberships in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserGroupMembership, err error)
	// Get retrieves the UserGroupMembership from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UserGroupMembership, error)
	UserGroupMembershipNamespaceListerExpansion
}

// userGroupMembershipNamespaceLister implements the UserGroupMembershipNamespaceLister
// interface.
type userGroupMembershipNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserGroupMemberships in the indexer for a given namespace.
func (s userGroupMembershipNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserGroupMembership, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserGroupMembership))
	})
	return ret, err
}

// Get retrieves the UserGroupMembership from the indexer for a given namespace and name.
func (s userGroupMembershipNamespaceLister) Get(name string) (*v1alpha1.UserGroupMembership, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("usergroupmembership"), name)
	}
	return obj.(*v1alpha1.UserGroupMembership), nil
}
