/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iam/v1alpha1"
)

// UserPolicyAttachmentLister helps list UserPolicyAttachments.
// All objects returned here must be treated as read-only.
type UserPolicyAttachmentLister interface {
	// List lists all UserPolicyAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserPolicyAttachment, err error)
	// UserPolicyAttachments returns an object that can list and get UserPolicyAttachments.
	UserPolicyAttachments(namespace string) UserPolicyAttachmentNamespaceLister
	UserPolicyAttachmentListerExpansion
}

// userPolicyAttachmentLister implements the UserPolicyAttachmentLister interface.
type userPolicyAttachmentLister struct {
	indexer cache.Indexer
}

// NewUserPolicyAttachmentLister returns a new UserPolicyAttachmentLister.
func NewUserPolicyAttachmentLister(indexer cache.Indexer) UserPolicyAttachmentLister {
	return &userPolicyAttachmentLister{indexer: indexer}
}

// List lists all UserPolicyAttachments in the indexer.
func (s *userPolicyAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.UserPolicyAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserPolicyAttachment))
	})
	return ret, err
}

// UserPolicyAttachments returns an object that can list and get UserPolicyAttachments.
func (s *userPolicyAttachmentLister) UserPolicyAttachments(namespace string) UserPolicyAttachmentNamespaceLister {
	return userPolicyAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserPolicyAttachmentNamespaceLister helps list and get UserPolicyAttachments.
// All objects returned here must be treated as read-only.
type UserPolicyAttachmentNamespaceLister interface {
	// List lists all UserPolicyAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserPolicyAttachment, err error)
	// Get retrieves the UserPolicyAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UserPolicyAttachment, error)
	UserPolicyAttachmentNamespaceListerExpansion
}

// userPolicyAttachmentNamespaceLister implements the UserPolicyAttachmentNamespaceLister
// interface.
type userPolicyAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserPolicyAttachments in the indexer for a given namespace.
func (s userPolicyAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserPolicyAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserPolicyAttachment))
	})
	return ret, err
}

// Get retrieves the UserPolicyAttachment from the indexer for a given namespace and name.
func (s userPolicyAttachmentNamespaceLister) Get(name string) (*v1alpha1.UserPolicyAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("userpolicyattachment"), name)
	}
	return obj.(*v1alpha1.UserPolicyAttachment), nil
}
