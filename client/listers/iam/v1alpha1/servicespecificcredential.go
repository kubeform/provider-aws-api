/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iam/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceSpecificCredentialLister helps list ServiceSpecificCredentials.
// All objects returned here must be treated as read-only.
type ServiceSpecificCredentialLister interface {
	// List lists all ServiceSpecificCredentials in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceSpecificCredential, err error)
	// ServiceSpecificCredentials returns an object that can list and get ServiceSpecificCredentials.
	ServiceSpecificCredentials(namespace string) ServiceSpecificCredentialNamespaceLister
	ServiceSpecificCredentialListerExpansion
}

// serviceSpecificCredentialLister implements the ServiceSpecificCredentialLister interface.
type serviceSpecificCredentialLister struct {
	indexer cache.Indexer
}

// NewServiceSpecificCredentialLister returns a new ServiceSpecificCredentialLister.
func NewServiceSpecificCredentialLister(indexer cache.Indexer) ServiceSpecificCredentialLister {
	return &serviceSpecificCredentialLister{indexer: indexer}
}

// List lists all ServiceSpecificCredentials in the indexer.
func (s *serviceSpecificCredentialLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceSpecificCredential, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceSpecificCredential))
	})
	return ret, err
}

// ServiceSpecificCredentials returns an object that can list and get ServiceSpecificCredentials.
func (s *serviceSpecificCredentialLister) ServiceSpecificCredentials(namespace string) ServiceSpecificCredentialNamespaceLister {
	return serviceSpecificCredentialNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceSpecificCredentialNamespaceLister helps list and get ServiceSpecificCredentials.
// All objects returned here must be treated as read-only.
type ServiceSpecificCredentialNamespaceLister interface {
	// List lists all ServiceSpecificCredentials in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceSpecificCredential, err error)
	// Get retrieves the ServiceSpecificCredential from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceSpecificCredential, error)
	ServiceSpecificCredentialNamespaceListerExpansion
}

// serviceSpecificCredentialNamespaceLister implements the ServiceSpecificCredentialNamespaceLister
// interface.
type serviceSpecificCredentialNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceSpecificCredentials in the indexer for a given namespace.
func (s serviceSpecificCredentialNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceSpecificCredential, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceSpecificCredential))
	})
	return ret, err
}

// Get retrieves the ServiceSpecificCredential from the indexer for a given namespace and name.
func (s serviceSpecificCredentialNamespaceLister) Get(name string) (*v1alpha1.ServiceSpecificCredential, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicespecificcredential"), name)
	}
	return obj.(*v1alpha1.ServiceSpecificCredential), nil
}
