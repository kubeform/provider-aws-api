/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iam/v1alpha1"
)

// AccountPasswordPolicyLister helps list AccountPasswordPolicies.
// All objects returned here must be treated as read-only.
type AccountPasswordPolicyLister interface {
	// List lists all AccountPasswordPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccountPasswordPolicy, err error)
	// AccountPasswordPolicies returns an object that can list and get AccountPasswordPolicies.
	AccountPasswordPolicies(namespace string) AccountPasswordPolicyNamespaceLister
	AccountPasswordPolicyListerExpansion
}

// accountPasswordPolicyLister implements the AccountPasswordPolicyLister interface.
type accountPasswordPolicyLister struct {
	indexer cache.Indexer
}

// NewAccountPasswordPolicyLister returns a new AccountPasswordPolicyLister.
func NewAccountPasswordPolicyLister(indexer cache.Indexer) AccountPasswordPolicyLister {
	return &accountPasswordPolicyLister{indexer: indexer}
}

// List lists all AccountPasswordPolicies in the indexer.
func (s *accountPasswordPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.AccountPasswordPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccountPasswordPolicy))
	})
	return ret, err
}

// AccountPasswordPolicies returns an object that can list and get AccountPasswordPolicies.
func (s *accountPasswordPolicyLister) AccountPasswordPolicies(namespace string) AccountPasswordPolicyNamespaceLister {
	return accountPasswordPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccountPasswordPolicyNamespaceLister helps list and get AccountPasswordPolicies.
// All objects returned here must be treated as read-only.
type AccountPasswordPolicyNamespaceLister interface {
	// List lists all AccountPasswordPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccountPasswordPolicy, err error)
	// Get retrieves the AccountPasswordPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AccountPasswordPolicy, error)
	AccountPasswordPolicyNamespaceListerExpansion
}

// accountPasswordPolicyNamespaceLister implements the AccountPasswordPolicyNamespaceLister
// interface.
type accountPasswordPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccountPasswordPolicies in the indexer for a given namespace.
func (s accountPasswordPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AccountPasswordPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccountPasswordPolicy))
	})
	return ret, err
}

// Get retrieves the AccountPasswordPolicy from the indexer for a given namespace and name.
func (s accountPasswordPolicyNamespaceLister) Get(name string) (*v1alpha1.AccountPasswordPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accountpasswordpolicy"), name)
	}
	return obj.(*v1alpha1.AccountPasswordPolicy), nil
}
