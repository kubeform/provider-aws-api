/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/iam/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SigningCertificateLister helps list SigningCertificates.
// All objects returned here must be treated as read-only.
type SigningCertificateLister interface {
	// List lists all SigningCertificates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SigningCertificate, err error)
	// SigningCertificates returns an object that can list and get SigningCertificates.
	SigningCertificates(namespace string) SigningCertificateNamespaceLister
	SigningCertificateListerExpansion
}

// signingCertificateLister implements the SigningCertificateLister interface.
type signingCertificateLister struct {
	indexer cache.Indexer
}

// NewSigningCertificateLister returns a new SigningCertificateLister.
func NewSigningCertificateLister(indexer cache.Indexer) SigningCertificateLister {
	return &signingCertificateLister{indexer: indexer}
}

// List lists all SigningCertificates in the indexer.
func (s *signingCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.SigningCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SigningCertificate))
	})
	return ret, err
}

// SigningCertificates returns an object that can list and get SigningCertificates.
func (s *signingCertificateLister) SigningCertificates(namespace string) SigningCertificateNamespaceLister {
	return signingCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SigningCertificateNamespaceLister helps list and get SigningCertificates.
// All objects returned here must be treated as read-only.
type SigningCertificateNamespaceLister interface {
	// List lists all SigningCertificates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SigningCertificate, err error)
	// Get retrieves the SigningCertificate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SigningCertificate, error)
	SigningCertificateNamespaceListerExpansion
}

// signingCertificateNamespaceLister implements the SigningCertificateNamespaceLister
// interface.
type signingCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SigningCertificates in the indexer for a given namespace.
func (s signingCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SigningCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SigningCertificate))
	})
	return ret, err
}

// Get retrieves the SigningCertificate from the indexer for a given namespace and name.
func (s signingCertificateNamespaceLister) Get(name string) (*v1alpha1.SigningCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("signingcertificate"), name)
	}
	return obj.(*v1alpha1.SigningCertificate), nil
}
