/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/lb/v1alpha1"
)

// TargetGroupLister helps list TargetGroups.
// All objects returned here must be treated as read-only.
type TargetGroupLister interface {
	// List lists all TargetGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TargetGroup, err error)
	// TargetGroups returns an object that can list and get TargetGroups.
	TargetGroups(namespace string) TargetGroupNamespaceLister
	TargetGroupListerExpansion
}

// targetGroupLister implements the TargetGroupLister interface.
type targetGroupLister struct {
	indexer cache.Indexer
}

// NewTargetGroupLister returns a new TargetGroupLister.
func NewTargetGroupLister(indexer cache.Indexer) TargetGroupLister {
	return &targetGroupLister{indexer: indexer}
}

// List lists all TargetGroups in the indexer.
func (s *targetGroupLister) List(selector labels.Selector) (ret []*v1alpha1.TargetGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TargetGroup))
	})
	return ret, err
}

// TargetGroups returns an object that can list and get TargetGroups.
func (s *targetGroupLister) TargetGroups(namespace string) TargetGroupNamespaceLister {
	return targetGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TargetGroupNamespaceLister helps list and get TargetGroups.
// All objects returned here must be treated as read-only.
type TargetGroupNamespaceLister interface {
	// List lists all TargetGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TargetGroup, err error)
	// Get retrieves the TargetGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TargetGroup, error)
	TargetGroupNamespaceListerExpansion
}

// targetGroupNamespaceLister implements the TargetGroupNamespaceLister
// interface.
type targetGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TargetGroups in the indexer for a given namespace.
func (s targetGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TargetGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TargetGroup))
	})
	return ret, err
}

// Get retrieves the TargetGroup from the indexer for a given namespace and name.
func (s targetGroupNamespaceLister) Get(name string) (*v1alpha1.TargetGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("targetgroup"), name)
	}
	return obj.(*v1alpha1.TargetGroup), nil
}
