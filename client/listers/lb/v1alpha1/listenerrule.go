/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/lb/v1alpha1"
)

// ListenerRuleLister helps list ListenerRules.
// All objects returned here must be treated as read-only.
type ListenerRuleLister interface {
	// List lists all ListenerRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ListenerRule, err error)
	// ListenerRules returns an object that can list and get ListenerRules.
	ListenerRules(namespace string) ListenerRuleNamespaceLister
	ListenerRuleListerExpansion
}

// listenerRuleLister implements the ListenerRuleLister interface.
type listenerRuleLister struct {
	indexer cache.Indexer
}

// NewListenerRuleLister returns a new ListenerRuleLister.
func NewListenerRuleLister(indexer cache.Indexer) ListenerRuleLister {
	return &listenerRuleLister{indexer: indexer}
}

// List lists all ListenerRules in the indexer.
func (s *listenerRuleLister) List(selector labels.Selector) (ret []*v1alpha1.ListenerRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ListenerRule))
	})
	return ret, err
}

// ListenerRules returns an object that can list and get ListenerRules.
func (s *listenerRuleLister) ListenerRules(namespace string) ListenerRuleNamespaceLister {
	return listenerRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ListenerRuleNamespaceLister helps list and get ListenerRules.
// All objects returned here must be treated as read-only.
type ListenerRuleNamespaceLister interface {
	// List lists all ListenerRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ListenerRule, err error)
	// Get retrieves the ListenerRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ListenerRule, error)
	ListenerRuleNamespaceListerExpansion
}

// listenerRuleNamespaceLister implements the ListenerRuleNamespaceLister
// interface.
type listenerRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ListenerRules in the indexer for a given namespace.
func (s listenerRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ListenerRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ListenerRule))
	})
	return ret, err
}

// Get retrieves the ListenerRule from the indexer for a given namespace and name.
func (s listenerRuleNamespaceLister) Get(name string) (*v1alpha1.ListenerRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("listenerrule"), name)
	}
	return obj.(*v1alpha1.ListenerRule), nil
}
