/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/apigateway/v1alpha1"
)

// DomainNameLister helps list DomainNames.
// All objects returned here must be treated as read-only.
type DomainNameLister interface {
	// List lists all DomainNames in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainName, err error)
	// DomainNames returns an object that can list and get DomainNames.
	DomainNames(namespace string) DomainNameNamespaceLister
	DomainNameListerExpansion
}

// domainNameLister implements the DomainNameLister interface.
type domainNameLister struct {
	indexer cache.Indexer
}

// NewDomainNameLister returns a new DomainNameLister.
func NewDomainNameLister(indexer cache.Indexer) DomainNameLister {
	return &domainNameLister{indexer: indexer}
}

// List lists all DomainNames in the indexer.
func (s *domainNameLister) List(selector labels.Selector) (ret []*v1alpha1.DomainName, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainName))
	})
	return ret, err
}

// DomainNames returns an object that can list and get DomainNames.
func (s *domainNameLister) DomainNames(namespace string) DomainNameNamespaceLister {
	return domainNameNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DomainNameNamespaceLister helps list and get DomainNames.
// All objects returned here must be treated as read-only.
type DomainNameNamespaceLister interface {
	// List lists all DomainNames in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainName, err error)
	// Get retrieves the DomainName from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DomainName, error)
	DomainNameNamespaceListerExpansion
}

// domainNameNamespaceLister implements the DomainNameNamespaceLister
// interface.
type domainNameNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DomainNames in the indexer for a given namespace.
func (s domainNameNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DomainName, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainName))
	})
	return ret, err
}

// Get retrieves the DomainName from the indexer for a given namespace and name.
func (s domainNameNamespaceLister) Get(name string) (*v1alpha1.DomainName, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("domainname"), name)
	}
	return obj.(*v1alpha1.DomainName), nil
}
