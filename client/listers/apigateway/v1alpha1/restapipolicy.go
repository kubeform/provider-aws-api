/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/apigateway/v1alpha1"
)

// RestAPIPolicyLister helps list RestAPIPolicies.
// All objects returned here must be treated as read-only.
type RestAPIPolicyLister interface {
	// List lists all RestAPIPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RestAPIPolicy, err error)
	// RestAPIPolicies returns an object that can list and get RestAPIPolicies.
	RestAPIPolicies(namespace string) RestAPIPolicyNamespaceLister
	RestAPIPolicyListerExpansion
}

// restAPIPolicyLister implements the RestAPIPolicyLister interface.
type restAPIPolicyLister struct {
	indexer cache.Indexer
}

// NewRestAPIPolicyLister returns a new RestAPIPolicyLister.
func NewRestAPIPolicyLister(indexer cache.Indexer) RestAPIPolicyLister {
	return &restAPIPolicyLister{indexer: indexer}
}

// List lists all RestAPIPolicies in the indexer.
func (s *restAPIPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.RestAPIPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RestAPIPolicy))
	})
	return ret, err
}

// RestAPIPolicies returns an object that can list and get RestAPIPolicies.
func (s *restAPIPolicyLister) RestAPIPolicies(namespace string) RestAPIPolicyNamespaceLister {
	return restAPIPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RestAPIPolicyNamespaceLister helps list and get RestAPIPolicies.
// All objects returned here must be treated as read-only.
type RestAPIPolicyNamespaceLister interface {
	// List lists all RestAPIPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RestAPIPolicy, err error)
	// Get retrieves the RestAPIPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RestAPIPolicy, error)
	RestAPIPolicyNamespaceListerExpansion
}

// restAPIPolicyNamespaceLister implements the RestAPIPolicyNamespaceLister
// interface.
type restAPIPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RestAPIPolicies in the indexer for a given namespace.
func (s restAPIPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RestAPIPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RestAPIPolicy))
	})
	return ret, err
}

// Get retrieves the RestAPIPolicy from the indexer for a given namespace and name.
func (s restAPIPolicyNamespaceLister) Get(name string) (*v1alpha1.RestAPIPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("restapipolicy"), name)
	}
	return obj.(*v1alpha1.RestAPIPolicy), nil
}
