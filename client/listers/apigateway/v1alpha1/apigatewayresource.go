/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/apigateway/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApigatewayResourceLister helps list ApigatewayResources.
// All objects returned here must be treated as read-only.
type ApigatewayResourceLister interface {
	// List lists all ApigatewayResources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApigatewayResource, err error)
	// ApigatewayResources returns an object that can list and get ApigatewayResources.
	ApigatewayResources(namespace string) ApigatewayResourceNamespaceLister
	ApigatewayResourceListerExpansion
}

// apigatewayResourceLister implements the ApigatewayResourceLister interface.
type apigatewayResourceLister struct {
	indexer cache.Indexer
}

// NewApigatewayResourceLister returns a new ApigatewayResourceLister.
func NewApigatewayResourceLister(indexer cache.Indexer) ApigatewayResourceLister {
	return &apigatewayResourceLister{indexer: indexer}
}

// List lists all ApigatewayResources in the indexer.
func (s *apigatewayResourceLister) List(selector labels.Selector) (ret []*v1alpha1.ApigatewayResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApigatewayResource))
	})
	return ret, err
}

// ApigatewayResources returns an object that can list and get ApigatewayResources.
func (s *apigatewayResourceLister) ApigatewayResources(namespace string) ApigatewayResourceNamespaceLister {
	return apigatewayResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApigatewayResourceNamespaceLister helps list and get ApigatewayResources.
// All objects returned here must be treated as read-only.
type ApigatewayResourceNamespaceLister interface {
	// List lists all ApigatewayResources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApigatewayResource, err error)
	// Get retrieves the ApigatewayResource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApigatewayResource, error)
	ApigatewayResourceNamespaceListerExpansion
}

// apigatewayResourceNamespaceLister implements the ApigatewayResourceNamespaceLister
// interface.
type apigatewayResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApigatewayResources in the indexer for a given namespace.
func (s apigatewayResourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApigatewayResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApigatewayResource))
	})
	return ret, err
}

// Get retrieves the ApigatewayResource from the indexer for a given namespace and name.
func (s apigatewayResourceNamespaceLister) Get(name string) (*v1alpha1.ApigatewayResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apigatewayresource"), name)
	}
	return obj.(*v1alpha1.ApigatewayResource), nil
}
