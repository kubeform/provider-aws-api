/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/apigateway/v1alpha1"
)

// UsagePlanLister helps list UsagePlans.
// All objects returned here must be treated as read-only.
type UsagePlanLister interface {
	// List lists all UsagePlans in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UsagePlan, err error)
	// UsagePlans returns an object that can list and get UsagePlans.
	UsagePlans(namespace string) UsagePlanNamespaceLister
	UsagePlanListerExpansion
}

// usagePlanLister implements the UsagePlanLister interface.
type usagePlanLister struct {
	indexer cache.Indexer
}

// NewUsagePlanLister returns a new UsagePlanLister.
func NewUsagePlanLister(indexer cache.Indexer) UsagePlanLister {
	return &usagePlanLister{indexer: indexer}
}

// List lists all UsagePlans in the indexer.
func (s *usagePlanLister) List(selector labels.Selector) (ret []*v1alpha1.UsagePlan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UsagePlan))
	})
	return ret, err
}

// UsagePlans returns an object that can list and get UsagePlans.
func (s *usagePlanLister) UsagePlans(namespace string) UsagePlanNamespaceLister {
	return usagePlanNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UsagePlanNamespaceLister helps list and get UsagePlans.
// All objects returned here must be treated as read-only.
type UsagePlanNamespaceLister interface {
	// List lists all UsagePlans in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UsagePlan, err error)
	// Get retrieves the UsagePlan from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UsagePlan, error)
	UsagePlanNamespaceListerExpansion
}

// usagePlanNamespaceLister implements the UsagePlanNamespaceLister
// interface.
type usagePlanNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UsagePlans in the indexer for a given namespace.
func (s usagePlanNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UsagePlan, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UsagePlan))
	})
	return ret, err
}

// Get retrieves the UsagePlan from the indexer for a given namespace and name.
func (s usagePlanNamespaceLister) Get(name string) (*v1alpha1.UsagePlan, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("usageplan"), name)
	}
	return obj.(*v1alpha1.UsagePlan), nil
}
