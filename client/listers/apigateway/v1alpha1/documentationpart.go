/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/apigateway/v1alpha1"
)

// DocumentationPartLister helps list DocumentationParts.
// All objects returned here must be treated as read-only.
type DocumentationPartLister interface {
	// List lists all DocumentationParts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DocumentationPart, err error)
	// DocumentationParts returns an object that can list and get DocumentationParts.
	DocumentationParts(namespace string) DocumentationPartNamespaceLister
	DocumentationPartListerExpansion
}

// documentationPartLister implements the DocumentationPartLister interface.
type documentationPartLister struct {
	indexer cache.Indexer
}

// NewDocumentationPartLister returns a new DocumentationPartLister.
func NewDocumentationPartLister(indexer cache.Indexer) DocumentationPartLister {
	return &documentationPartLister{indexer: indexer}
}

// List lists all DocumentationParts in the indexer.
func (s *documentationPartLister) List(selector labels.Selector) (ret []*v1alpha1.DocumentationPart, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DocumentationPart))
	})
	return ret, err
}

// DocumentationParts returns an object that can list and get DocumentationParts.
func (s *documentationPartLister) DocumentationParts(namespace string) DocumentationPartNamespaceLister {
	return documentationPartNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DocumentationPartNamespaceLister helps list and get DocumentationParts.
// All objects returned here must be treated as read-only.
type DocumentationPartNamespaceLister interface {
	// List lists all DocumentationParts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DocumentationPart, err error)
	// Get retrieves the DocumentationPart from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DocumentationPart, error)
	DocumentationPartNamespaceListerExpansion
}

// documentationPartNamespaceLister implements the DocumentationPartNamespaceLister
// interface.
type documentationPartNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DocumentationParts in the indexer for a given namespace.
func (s documentationPartNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DocumentationPart, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DocumentationPart))
	})
	return ret, err
}

// Get retrieves the DocumentationPart from the indexer for a given namespace and name.
func (s documentationPartNamespaceLister) Get(name string) (*v1alpha1.DocumentationPart, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("documentationpart"), name)
	}
	return obj.(*v1alpha1.DocumentationPart), nil
}
