/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/imagebuilder/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ContainerRecipeLister helps list ContainerRecipes.
// All objects returned here must be treated as read-only.
type ContainerRecipeLister interface {
	// List lists all ContainerRecipes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ContainerRecipe, err error)
	// ContainerRecipes returns an object that can list and get ContainerRecipes.
	ContainerRecipes(namespace string) ContainerRecipeNamespaceLister
	ContainerRecipeListerExpansion
}

// containerRecipeLister implements the ContainerRecipeLister interface.
type containerRecipeLister struct {
	indexer cache.Indexer
}

// NewContainerRecipeLister returns a new ContainerRecipeLister.
func NewContainerRecipeLister(indexer cache.Indexer) ContainerRecipeLister {
	return &containerRecipeLister{indexer: indexer}
}

// List lists all ContainerRecipes in the indexer.
func (s *containerRecipeLister) List(selector labels.Selector) (ret []*v1alpha1.ContainerRecipe, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ContainerRecipe))
	})
	return ret, err
}

// ContainerRecipes returns an object that can list and get ContainerRecipes.
func (s *containerRecipeLister) ContainerRecipes(namespace string) ContainerRecipeNamespaceLister {
	return containerRecipeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ContainerRecipeNamespaceLister helps list and get ContainerRecipes.
// All objects returned here must be treated as read-only.
type ContainerRecipeNamespaceLister interface {
	// List lists all ContainerRecipes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ContainerRecipe, err error)
	// Get retrieves the ContainerRecipe from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ContainerRecipe, error)
	ContainerRecipeNamespaceListerExpansion
}

// containerRecipeNamespaceLister implements the ContainerRecipeNamespaceLister
// interface.
type containerRecipeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ContainerRecipes in the indexer for a given namespace.
func (s containerRecipeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ContainerRecipe, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ContainerRecipe))
	})
	return ret, err
}

// Get retrieves the ContainerRecipe from the indexer for a given namespace and name.
func (s containerRecipeNamespaceLister) Get(name string) (*v1alpha1.ContainerRecipe, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("containerrecipe"), name)
	}
	return obj.(*v1alpha1.ContainerRecipe), nil
}
