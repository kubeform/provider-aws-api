/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/imagebuilder/v1alpha1"
)

// ImagePipelineLister helps list ImagePipelines.
// All objects returned here must be treated as read-only.
type ImagePipelineLister interface {
	// List lists all ImagePipelines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImagePipeline, err error)
	// ImagePipelines returns an object that can list and get ImagePipelines.
	ImagePipelines(namespace string) ImagePipelineNamespaceLister
	ImagePipelineListerExpansion
}

// imagePipelineLister implements the ImagePipelineLister interface.
type imagePipelineLister struct {
	indexer cache.Indexer
}

// NewImagePipelineLister returns a new ImagePipelineLister.
func NewImagePipelineLister(indexer cache.Indexer) ImagePipelineLister {
	return &imagePipelineLister{indexer: indexer}
}

// List lists all ImagePipelines in the indexer.
func (s *imagePipelineLister) List(selector labels.Selector) (ret []*v1alpha1.ImagePipeline, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImagePipeline))
	})
	return ret, err
}

// ImagePipelines returns an object that can list and get ImagePipelines.
func (s *imagePipelineLister) ImagePipelines(namespace string) ImagePipelineNamespaceLister {
	return imagePipelineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImagePipelineNamespaceLister helps list and get ImagePipelines.
// All objects returned here must be treated as read-only.
type ImagePipelineNamespaceLister interface {
	// List lists all ImagePipelines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImagePipeline, err error)
	// Get retrieves the ImagePipeline from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ImagePipeline, error)
	ImagePipelineNamespaceListerExpansion
}

// imagePipelineNamespaceLister implements the ImagePipelineNamespaceLister
// interface.
type imagePipelineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImagePipelines in the indexer for a given namespace.
func (s imagePipelineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ImagePipeline, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImagePipeline))
	})
	return ret, err
}

// Get retrieves the ImagePipeline from the indexer for a given namespace and name.
func (s imagePipelineNamespaceLister) Get(name string) (*v1alpha1.ImagePipeline, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("imagepipeline"), name)
	}
	return obj.(*v1alpha1.ImagePipeline), nil
}
