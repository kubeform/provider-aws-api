/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/imagebuilder/v1alpha1"
)

// InfrastructureConfigurationLister helps list InfrastructureConfigurations.
// All objects returned here must be treated as read-only.
type InfrastructureConfigurationLister interface {
	// List lists all InfrastructureConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InfrastructureConfiguration, err error)
	// InfrastructureConfigurations returns an object that can list and get InfrastructureConfigurations.
	InfrastructureConfigurations(namespace string) InfrastructureConfigurationNamespaceLister
	InfrastructureConfigurationListerExpansion
}

// infrastructureConfigurationLister implements the InfrastructureConfigurationLister interface.
type infrastructureConfigurationLister struct {
	indexer cache.Indexer
}

// NewInfrastructureConfigurationLister returns a new InfrastructureConfigurationLister.
func NewInfrastructureConfigurationLister(indexer cache.Indexer) InfrastructureConfigurationLister {
	return &infrastructureConfigurationLister{indexer: indexer}
}

// List lists all InfrastructureConfigurations in the indexer.
func (s *infrastructureConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.InfrastructureConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InfrastructureConfiguration))
	})
	return ret, err
}

// InfrastructureConfigurations returns an object that can list and get InfrastructureConfigurations.
func (s *infrastructureConfigurationLister) InfrastructureConfigurations(namespace string) InfrastructureConfigurationNamespaceLister {
	return infrastructureConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InfrastructureConfigurationNamespaceLister helps list and get InfrastructureConfigurations.
// All objects returned here must be treated as read-only.
type InfrastructureConfigurationNamespaceLister interface {
	// List lists all InfrastructureConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InfrastructureConfiguration, err error)
	// Get retrieves the InfrastructureConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InfrastructureConfiguration, error)
	InfrastructureConfigurationNamespaceListerExpansion
}

// infrastructureConfigurationNamespaceLister implements the InfrastructureConfigurationNamespaceLister
// interface.
type infrastructureConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InfrastructureConfigurations in the indexer for a given namespace.
func (s infrastructureConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InfrastructureConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InfrastructureConfiguration))
	})
	return ret, err
}

// Get retrieves the InfrastructureConfiguration from the indexer for a given namespace and name.
func (s infrastructureConfigurationNamespaceLister) Get(name string) (*v1alpha1.InfrastructureConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("infrastructureconfiguration"), name)
	}
	return obj.(*v1alpha1.InfrastructureConfiguration), nil
}
