/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/imagebuilder/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImageRecipeLister helps list ImageRecipes.
// All objects returned here must be treated as read-only.
type ImageRecipeLister interface {
	// List lists all ImageRecipes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageRecipe, err error)
	// ImageRecipes returns an object that can list and get ImageRecipes.
	ImageRecipes(namespace string) ImageRecipeNamespaceLister
	ImageRecipeListerExpansion
}

// imageRecipeLister implements the ImageRecipeLister interface.
type imageRecipeLister struct {
	indexer cache.Indexer
}

// NewImageRecipeLister returns a new ImageRecipeLister.
func NewImageRecipeLister(indexer cache.Indexer) ImageRecipeLister {
	return &imageRecipeLister{indexer: indexer}
}

// List lists all ImageRecipes in the indexer.
func (s *imageRecipeLister) List(selector labels.Selector) (ret []*v1alpha1.ImageRecipe, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageRecipe))
	})
	return ret, err
}

// ImageRecipes returns an object that can list and get ImageRecipes.
func (s *imageRecipeLister) ImageRecipes(namespace string) ImageRecipeNamespaceLister {
	return imageRecipeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImageRecipeNamespaceLister helps list and get ImageRecipes.
// All objects returned here must be treated as read-only.
type ImageRecipeNamespaceLister interface {
	// List lists all ImageRecipes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageRecipe, err error)
	// Get retrieves the ImageRecipe from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ImageRecipe, error)
	ImageRecipeNamespaceListerExpansion
}

// imageRecipeNamespaceLister implements the ImageRecipeNamespaceLister
// interface.
type imageRecipeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImageRecipes in the indexer for a given namespace.
func (s imageRecipeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ImageRecipe, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageRecipe))
	})
	return ret, err
}

// Get retrieves the ImageRecipe from the indexer for a given namespace and name.
func (s imageRecipeNamespaceLister) Get(name string) (*v1alpha1.ImageRecipe, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("imagerecipe"), name)
	}
	return obj.(*v1alpha1.ImageRecipe), nil
}
