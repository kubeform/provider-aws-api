/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cognito/v1alpha1"
)

// ResourceServerLister helps list ResourceServers.
// All objects returned here must be treated as read-only.
type ResourceServerLister interface {
	// List lists all ResourceServers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceServer, err error)
	// ResourceServers returns an object that can list and get ResourceServers.
	ResourceServers(namespace string) ResourceServerNamespaceLister
	ResourceServerListerExpansion
}

// resourceServerLister implements the ResourceServerLister interface.
type resourceServerLister struct {
	indexer cache.Indexer
}

// NewResourceServerLister returns a new ResourceServerLister.
func NewResourceServerLister(indexer cache.Indexer) ResourceServerLister {
	return &resourceServerLister{indexer: indexer}
}

// List lists all ResourceServers in the indexer.
func (s *resourceServerLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceServer))
	})
	return ret, err
}

// ResourceServers returns an object that can list and get ResourceServers.
func (s *resourceServerLister) ResourceServers(namespace string) ResourceServerNamespaceLister {
	return resourceServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceServerNamespaceLister helps list and get ResourceServers.
// All objects returned here must be treated as read-only.
type ResourceServerNamespaceLister interface {
	// List lists all ResourceServers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceServer, err error)
	// Get retrieves the ResourceServer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResourceServer, error)
	ResourceServerNamespaceListerExpansion
}

// resourceServerNamespaceLister implements the ResourceServerNamespaceLister
// interface.
type resourceServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceServers in the indexer for a given namespace.
func (s resourceServerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceServer))
	})
	return ret, err
}

// Get retrieves the ResourceServer from the indexer for a given namespace and name.
func (s resourceServerNamespaceLister) Get(name string) (*v1alpha1.ResourceServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resourceserver"), name)
	}
	return obj.(*v1alpha1.ResourceServer), nil
}
