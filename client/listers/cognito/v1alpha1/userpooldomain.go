/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cognito/v1alpha1"
)

// UserPoolDomainLister helps list UserPoolDomains.
// All objects returned here must be treated as read-only.
type UserPoolDomainLister interface {
	// List lists all UserPoolDomains in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserPoolDomain, err error)
	// UserPoolDomains returns an object that can list and get UserPoolDomains.
	UserPoolDomains(namespace string) UserPoolDomainNamespaceLister
	UserPoolDomainListerExpansion
}

// userPoolDomainLister implements the UserPoolDomainLister interface.
type userPoolDomainLister struct {
	indexer cache.Indexer
}

// NewUserPoolDomainLister returns a new UserPoolDomainLister.
func NewUserPoolDomainLister(indexer cache.Indexer) UserPoolDomainLister {
	return &userPoolDomainLister{indexer: indexer}
}

// List lists all UserPoolDomains in the indexer.
func (s *userPoolDomainLister) List(selector labels.Selector) (ret []*v1alpha1.UserPoolDomain, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserPoolDomain))
	})
	return ret, err
}

// UserPoolDomains returns an object that can list and get UserPoolDomains.
func (s *userPoolDomainLister) UserPoolDomains(namespace string) UserPoolDomainNamespaceLister {
	return userPoolDomainNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserPoolDomainNamespaceLister helps list and get UserPoolDomains.
// All objects returned here must be treated as read-only.
type UserPoolDomainNamespaceLister interface {
	// List lists all UserPoolDomains in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserPoolDomain, err error)
	// Get retrieves the UserPoolDomain from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UserPoolDomain, error)
	UserPoolDomainNamespaceListerExpansion
}

// userPoolDomainNamespaceLister implements the UserPoolDomainNamespaceLister
// interface.
type userPoolDomainNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserPoolDomains in the indexer for a given namespace.
func (s userPoolDomainNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserPoolDomain, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserPoolDomain))
	})
	return ret, err
}

// Get retrieves the UserPoolDomain from the indexer for a given namespace and name.
func (s userPoolDomainNamespaceLister) Get(name string) (*v1alpha1.UserPoolDomain, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("userpooldomain"), name)
	}
	return obj.(*v1alpha1.UserPoolDomain), nil
}
