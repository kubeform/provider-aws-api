/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cognito/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IdentityPoolRolesAttachmentLister helps list IdentityPoolRolesAttachments.
// All objects returned here must be treated as read-only.
type IdentityPoolRolesAttachmentLister interface {
	// List lists all IdentityPoolRolesAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityPoolRolesAttachment, err error)
	// IdentityPoolRolesAttachments returns an object that can list and get IdentityPoolRolesAttachments.
	IdentityPoolRolesAttachments(namespace string) IdentityPoolRolesAttachmentNamespaceLister
	IdentityPoolRolesAttachmentListerExpansion
}

// identityPoolRolesAttachmentLister implements the IdentityPoolRolesAttachmentLister interface.
type identityPoolRolesAttachmentLister struct {
	indexer cache.Indexer
}

// NewIdentityPoolRolesAttachmentLister returns a new IdentityPoolRolesAttachmentLister.
func NewIdentityPoolRolesAttachmentLister(indexer cache.Indexer) IdentityPoolRolesAttachmentLister {
	return &identityPoolRolesAttachmentLister{indexer: indexer}
}

// List lists all IdentityPoolRolesAttachments in the indexer.
func (s *identityPoolRolesAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityPoolRolesAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityPoolRolesAttachment))
	})
	return ret, err
}

// IdentityPoolRolesAttachments returns an object that can list and get IdentityPoolRolesAttachments.
func (s *identityPoolRolesAttachmentLister) IdentityPoolRolesAttachments(namespace string) IdentityPoolRolesAttachmentNamespaceLister {
	return identityPoolRolesAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IdentityPoolRolesAttachmentNamespaceLister helps list and get IdentityPoolRolesAttachments.
// All objects returned here must be treated as read-only.
type IdentityPoolRolesAttachmentNamespaceLister interface {
	// List lists all IdentityPoolRolesAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityPoolRolesAttachment, err error)
	// Get retrieves the IdentityPoolRolesAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IdentityPoolRolesAttachment, error)
	IdentityPoolRolesAttachmentNamespaceListerExpansion
}

// identityPoolRolesAttachmentNamespaceLister implements the IdentityPoolRolesAttachmentNamespaceLister
// interface.
type identityPoolRolesAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IdentityPoolRolesAttachments in the indexer for a given namespace.
func (s identityPoolRolesAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityPoolRolesAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityPoolRolesAttachment))
	})
	return ret, err
}

// Get retrieves the IdentityPoolRolesAttachment from the indexer for a given namespace and name.
func (s identityPoolRolesAttachmentNamespaceLister) Get(name string) (*v1alpha1.IdentityPoolRolesAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("identitypoolrolesattachment"), name)
	}
	return obj.(*v1alpha1.IdentityPoolRolesAttachment), nil
}
