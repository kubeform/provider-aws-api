/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cognito/v1alpha1"
)

// IdentityProviderLister helps list IdentityProviders.
// All objects returned here must be treated as read-only.
type IdentityProviderLister interface {
	// List lists all IdentityProviders in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityProvider, err error)
	// IdentityProviders returns an object that can list and get IdentityProviders.
	IdentityProviders(namespace string) IdentityProviderNamespaceLister
	IdentityProviderListerExpansion
}

// identityProviderLister implements the IdentityProviderLister interface.
type identityProviderLister struct {
	indexer cache.Indexer
}

// NewIdentityProviderLister returns a new IdentityProviderLister.
func NewIdentityProviderLister(indexer cache.Indexer) IdentityProviderLister {
	return &identityProviderLister{indexer: indexer}
}

// List lists all IdentityProviders in the indexer.
func (s *identityProviderLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityProvider, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityProvider))
	})
	return ret, err
}

// IdentityProviders returns an object that can list and get IdentityProviders.
func (s *identityProviderLister) IdentityProviders(namespace string) IdentityProviderNamespaceLister {
	return identityProviderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IdentityProviderNamespaceLister helps list and get IdentityProviders.
// All objects returned here must be treated as read-only.
type IdentityProviderNamespaceLister interface {
	// List lists all IdentityProviders in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityProvider, err error)
	// Get retrieves the IdentityProvider from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IdentityProvider, error)
	IdentityProviderNamespaceListerExpansion
}

// identityProviderNamespaceLister implements the IdentityProviderNamespaceLister
// interface.
type identityProviderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IdentityProviders in the indexer for a given namespace.
func (s identityProviderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityProvider, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityProvider))
	})
	return ret, err
}

// Get retrieves the IdentityProvider from the indexer for a given namespace and name.
func (s identityProviderNamespaceLister) Get(name string) (*v1alpha1.IdentityProvider, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("identityprovider"), name)
	}
	return obj.(*v1alpha1.IdentityProvider), nil
}
