/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/cognito/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UserPoolUiCustomizationLister helps list UserPoolUiCustomizations.
// All objects returned here must be treated as read-only.
type UserPoolUiCustomizationLister interface {
	// List lists all UserPoolUiCustomizations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserPoolUiCustomization, err error)
	// UserPoolUiCustomizations returns an object that can list and get UserPoolUiCustomizations.
	UserPoolUiCustomizations(namespace string) UserPoolUiCustomizationNamespaceLister
	UserPoolUiCustomizationListerExpansion
}

// userPoolUiCustomizationLister implements the UserPoolUiCustomizationLister interface.
type userPoolUiCustomizationLister struct {
	indexer cache.Indexer
}

// NewUserPoolUiCustomizationLister returns a new UserPoolUiCustomizationLister.
func NewUserPoolUiCustomizationLister(indexer cache.Indexer) UserPoolUiCustomizationLister {
	return &userPoolUiCustomizationLister{indexer: indexer}
}

// List lists all UserPoolUiCustomizations in the indexer.
func (s *userPoolUiCustomizationLister) List(selector labels.Selector) (ret []*v1alpha1.UserPoolUiCustomization, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserPoolUiCustomization))
	})
	return ret, err
}

// UserPoolUiCustomizations returns an object that can list and get UserPoolUiCustomizations.
func (s *userPoolUiCustomizationLister) UserPoolUiCustomizations(namespace string) UserPoolUiCustomizationNamespaceLister {
	return userPoolUiCustomizationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserPoolUiCustomizationNamespaceLister helps list and get UserPoolUiCustomizations.
// All objects returned here must be treated as read-only.
type UserPoolUiCustomizationNamespaceLister interface {
	// List lists all UserPoolUiCustomizations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserPoolUiCustomization, err error)
	// Get retrieves the UserPoolUiCustomization from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UserPoolUiCustomization, error)
	UserPoolUiCustomizationNamespaceListerExpansion
}

// userPoolUiCustomizationNamespaceLister implements the UserPoolUiCustomizationNamespaceLister
// interface.
type userPoolUiCustomizationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserPoolUiCustomizations in the indexer for a given namespace.
func (s userPoolUiCustomizationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserPoolUiCustomization, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserPoolUiCustomization))
	})
	return ret, err
}

// Get retrieves the UserPoolUiCustomization from the indexer for a given namespace and name.
func (s userPoolUiCustomizationNamespaceLister) Get(name string) (*v1alpha1.UserPoolUiCustomization, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("userpooluicustomization"), name)
	}
	return obj.(*v1alpha1.UserPoolUiCustomization), nil
}
