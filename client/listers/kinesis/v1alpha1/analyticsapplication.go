/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/kinesis/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnalyticsApplicationLister helps list AnalyticsApplications.
// All objects returned here must be treated as read-only.
type AnalyticsApplicationLister interface {
	// List lists all AnalyticsApplications in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyticsApplication, err error)
	// AnalyticsApplications returns an object that can list and get AnalyticsApplications.
	AnalyticsApplications(namespace string) AnalyticsApplicationNamespaceLister
	AnalyticsApplicationListerExpansion
}

// analyticsApplicationLister implements the AnalyticsApplicationLister interface.
type analyticsApplicationLister struct {
	indexer cache.Indexer
}

// NewAnalyticsApplicationLister returns a new AnalyticsApplicationLister.
func NewAnalyticsApplicationLister(indexer cache.Indexer) AnalyticsApplicationLister {
	return &analyticsApplicationLister{indexer: indexer}
}

// List lists all AnalyticsApplications in the indexer.
func (s *analyticsApplicationLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyticsApplication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyticsApplication))
	})
	return ret, err
}

// AnalyticsApplications returns an object that can list and get AnalyticsApplications.
func (s *analyticsApplicationLister) AnalyticsApplications(namespace string) AnalyticsApplicationNamespaceLister {
	return analyticsApplicationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnalyticsApplicationNamespaceLister helps list and get AnalyticsApplications.
// All objects returned here must be treated as read-only.
type AnalyticsApplicationNamespaceLister interface {
	// List lists all AnalyticsApplications in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyticsApplication, err error)
	// Get retrieves the AnalyticsApplication from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AnalyticsApplication, error)
	AnalyticsApplicationNamespaceListerExpansion
}

// analyticsApplicationNamespaceLister implements the AnalyticsApplicationNamespaceLister
// interface.
type analyticsApplicationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AnalyticsApplications in the indexer for a given namespace.
func (s analyticsApplicationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyticsApplication, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyticsApplication))
	})
	return ret, err
}

// Get retrieves the AnalyticsApplication from the indexer for a given namespace and name.
func (s analyticsApplicationNamespaceLister) Get(name string) (*v1alpha1.AnalyticsApplication, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("analyticsapplication"), name)
	}
	return obj.(*v1alpha1.AnalyticsApplication), nil
}
