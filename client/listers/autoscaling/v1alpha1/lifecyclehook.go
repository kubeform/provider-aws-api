/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/autoscaling/v1alpha1"
)

// LifecycleHookLister helps list LifecycleHooks.
// All objects returned here must be treated as read-only.
type LifecycleHookLister interface {
	// List lists all LifecycleHooks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LifecycleHook, err error)
	// LifecycleHooks returns an object that can list and get LifecycleHooks.
	LifecycleHooks(namespace string) LifecycleHookNamespaceLister
	LifecycleHookListerExpansion
}

// lifecycleHookLister implements the LifecycleHookLister interface.
type lifecycleHookLister struct {
	indexer cache.Indexer
}

// NewLifecycleHookLister returns a new LifecycleHookLister.
func NewLifecycleHookLister(indexer cache.Indexer) LifecycleHookLister {
	return &lifecycleHookLister{indexer: indexer}
}

// List lists all LifecycleHooks in the indexer.
func (s *lifecycleHookLister) List(selector labels.Selector) (ret []*v1alpha1.LifecycleHook, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LifecycleHook))
	})
	return ret, err
}

// LifecycleHooks returns an object that can list and get LifecycleHooks.
func (s *lifecycleHookLister) LifecycleHooks(namespace string) LifecycleHookNamespaceLister {
	return lifecycleHookNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LifecycleHookNamespaceLister helps list and get LifecycleHooks.
// All objects returned here must be treated as read-only.
type LifecycleHookNamespaceLister interface {
	// List lists all LifecycleHooks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LifecycleHook, err error)
	// Get retrieves the LifecycleHook from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LifecycleHook, error)
	LifecycleHookNamespaceListerExpansion
}

// lifecycleHookNamespaceLister implements the LifecycleHookNamespaceLister
// interface.
type lifecycleHookNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LifecycleHooks in the indexer for a given namespace.
func (s lifecycleHookNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LifecycleHook, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LifecycleHook))
	})
	return ret, err
}

// Get retrieves the LifecycleHook from the indexer for a given namespace and name.
func (s lifecycleHookNamespaceLister) Get(name string) (*v1alpha1.LifecycleHook, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lifecyclehook"), name)
	}
	return obj.(*v1alpha1.LifecycleHook), nil
}
