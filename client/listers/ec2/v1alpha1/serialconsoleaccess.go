/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ec2/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SerialConsoleAccessLister helps list SerialConsoleAccesses.
// All objects returned here must be treated as read-only.
type SerialConsoleAccessLister interface {
	// List lists all SerialConsoleAccesses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SerialConsoleAccess, err error)
	// SerialConsoleAccesses returns an object that can list and get SerialConsoleAccesses.
	SerialConsoleAccesses(namespace string) SerialConsoleAccessNamespaceLister
	SerialConsoleAccessListerExpansion
}

// serialConsoleAccessLister implements the SerialConsoleAccessLister interface.
type serialConsoleAccessLister struct {
	indexer cache.Indexer
}

// NewSerialConsoleAccessLister returns a new SerialConsoleAccessLister.
func NewSerialConsoleAccessLister(indexer cache.Indexer) SerialConsoleAccessLister {
	return &serialConsoleAccessLister{indexer: indexer}
}

// List lists all SerialConsoleAccesses in the indexer.
func (s *serialConsoleAccessLister) List(selector labels.Selector) (ret []*v1alpha1.SerialConsoleAccess, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SerialConsoleAccess))
	})
	return ret, err
}

// SerialConsoleAccesses returns an object that can list and get SerialConsoleAccesses.
func (s *serialConsoleAccessLister) SerialConsoleAccesses(namespace string) SerialConsoleAccessNamespaceLister {
	return serialConsoleAccessNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SerialConsoleAccessNamespaceLister helps list and get SerialConsoleAccesses.
// All objects returned here must be treated as read-only.
type SerialConsoleAccessNamespaceLister interface {
	// List lists all SerialConsoleAccesses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SerialConsoleAccess, err error)
	// Get retrieves the SerialConsoleAccess from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SerialConsoleAccess, error)
	SerialConsoleAccessNamespaceListerExpansion
}

// serialConsoleAccessNamespaceLister implements the SerialConsoleAccessNamespaceLister
// interface.
type serialConsoleAccessNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SerialConsoleAccesses in the indexer for a given namespace.
func (s serialConsoleAccessNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SerialConsoleAccess, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SerialConsoleAccess))
	})
	return ret, err
}

// Get retrieves the SerialConsoleAccess from the indexer for a given namespace and name.
func (s serialConsoleAccessNamespaceLister) Get(name string) (*v1alpha1.SerialConsoleAccess, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serialconsoleaccess"), name)
	}
	return obj.(*v1alpha1.SerialConsoleAccess), nil
}
