/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ec2/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClientVPNNetworkAssociationLister helps list ClientVPNNetworkAssociations.
// All objects returned here must be treated as read-only.
type ClientVPNNetworkAssociationLister interface {
	// List lists all ClientVPNNetworkAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClientVPNNetworkAssociation, err error)
	// ClientVPNNetworkAssociations returns an object that can list and get ClientVPNNetworkAssociations.
	ClientVPNNetworkAssociations(namespace string) ClientVPNNetworkAssociationNamespaceLister
	ClientVPNNetworkAssociationListerExpansion
}

// clientVPNNetworkAssociationLister implements the ClientVPNNetworkAssociationLister interface.
type clientVPNNetworkAssociationLister struct {
	indexer cache.Indexer
}

// NewClientVPNNetworkAssociationLister returns a new ClientVPNNetworkAssociationLister.
func NewClientVPNNetworkAssociationLister(indexer cache.Indexer) ClientVPNNetworkAssociationLister {
	return &clientVPNNetworkAssociationLister{indexer: indexer}
}

// List lists all ClientVPNNetworkAssociations in the indexer.
func (s *clientVPNNetworkAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.ClientVPNNetworkAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClientVPNNetworkAssociation))
	})
	return ret, err
}

// ClientVPNNetworkAssociations returns an object that can list and get ClientVPNNetworkAssociations.
func (s *clientVPNNetworkAssociationLister) ClientVPNNetworkAssociations(namespace string) ClientVPNNetworkAssociationNamespaceLister {
	return clientVPNNetworkAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClientVPNNetworkAssociationNamespaceLister helps list and get ClientVPNNetworkAssociations.
// All objects returned here must be treated as read-only.
type ClientVPNNetworkAssociationNamespaceLister interface {
	// List lists all ClientVPNNetworkAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClientVPNNetworkAssociation, err error)
	// Get retrieves the ClientVPNNetworkAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClientVPNNetworkAssociation, error)
	ClientVPNNetworkAssociationNamespaceListerExpansion
}

// clientVPNNetworkAssociationNamespaceLister implements the ClientVPNNetworkAssociationNamespaceLister
// interface.
type clientVPNNetworkAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClientVPNNetworkAssociations in the indexer for a given namespace.
func (s clientVPNNetworkAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClientVPNNetworkAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClientVPNNetworkAssociation))
	})
	return ret, err
}

// Get retrieves the ClientVPNNetworkAssociation from the indexer for a given namespace and name.
func (s clientVPNNetworkAssociationNamespaceLister) Get(name string) (*v1alpha1.ClientVPNNetworkAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clientvpnnetworkassociation"), name)
	}
	return obj.(*v1alpha1.ClientVPNNetworkAssociation), nil
}
