/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ec2/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TrafficMirrorSessionLister helps list TrafficMirrorSessions.
// All objects returned here must be treated as read-only.
type TrafficMirrorSessionLister interface {
	// List lists all TrafficMirrorSessions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficMirrorSession, err error)
	// TrafficMirrorSessions returns an object that can list and get TrafficMirrorSessions.
	TrafficMirrorSessions(namespace string) TrafficMirrorSessionNamespaceLister
	TrafficMirrorSessionListerExpansion
}

// trafficMirrorSessionLister implements the TrafficMirrorSessionLister interface.
type trafficMirrorSessionLister struct {
	indexer cache.Indexer
}

// NewTrafficMirrorSessionLister returns a new TrafficMirrorSessionLister.
func NewTrafficMirrorSessionLister(indexer cache.Indexer) TrafficMirrorSessionLister {
	return &trafficMirrorSessionLister{indexer: indexer}
}

// List lists all TrafficMirrorSessions in the indexer.
func (s *trafficMirrorSessionLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficMirrorSession, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficMirrorSession))
	})
	return ret, err
}

// TrafficMirrorSessions returns an object that can list and get TrafficMirrorSessions.
func (s *trafficMirrorSessionLister) TrafficMirrorSessions(namespace string) TrafficMirrorSessionNamespaceLister {
	return trafficMirrorSessionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TrafficMirrorSessionNamespaceLister helps list and get TrafficMirrorSessions.
// All objects returned here must be treated as read-only.
type TrafficMirrorSessionNamespaceLister interface {
	// List lists all TrafficMirrorSessions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficMirrorSession, err error)
	// Get retrieves the TrafficMirrorSession from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TrafficMirrorSession, error)
	TrafficMirrorSessionNamespaceListerExpansion
}

// trafficMirrorSessionNamespaceLister implements the TrafficMirrorSessionNamespaceLister
// interface.
type trafficMirrorSessionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TrafficMirrorSessions in the indexer for a given namespace.
func (s trafficMirrorSessionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficMirrorSession, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficMirrorSession))
	})
	return ret, err
}

// Get retrieves the TrafficMirrorSession from the indexer for a given namespace and name.
func (s trafficMirrorSessionNamespaceLister) Get(name string) (*v1alpha1.TrafficMirrorSession, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("trafficmirrorsession"), name)
	}
	return obj.(*v1alpha1.TrafficMirrorSession), nil
}
