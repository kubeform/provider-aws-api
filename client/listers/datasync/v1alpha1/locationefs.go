/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/datasync/v1alpha1"
)

// LocationEfsLister helps list LocationEfses.
// All objects returned here must be treated as read-only.
type LocationEfsLister interface {
	// List lists all LocationEfses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LocationEfs, err error)
	// LocationEfses returns an object that can list and get LocationEfses.
	LocationEfses(namespace string) LocationEfsNamespaceLister
	LocationEfsListerExpansion
}

// locationEfsLister implements the LocationEfsLister interface.
type locationEfsLister struct {
	indexer cache.Indexer
}

// NewLocationEfsLister returns a new LocationEfsLister.
func NewLocationEfsLister(indexer cache.Indexer) LocationEfsLister {
	return &locationEfsLister{indexer: indexer}
}

// List lists all LocationEfses in the indexer.
func (s *locationEfsLister) List(selector labels.Selector) (ret []*v1alpha1.LocationEfs, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LocationEfs))
	})
	return ret, err
}

// LocationEfses returns an object that can list and get LocationEfses.
func (s *locationEfsLister) LocationEfses(namespace string) LocationEfsNamespaceLister {
	return locationEfsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LocationEfsNamespaceLister helps list and get LocationEfses.
// All objects returned here must be treated as read-only.
type LocationEfsNamespaceLister interface {
	// List lists all LocationEfses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LocationEfs, err error)
	// Get retrieves the LocationEfs from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LocationEfs, error)
	LocationEfsNamespaceListerExpansion
}

// locationEfsNamespaceLister implements the LocationEfsNamespaceLister
// interface.
type locationEfsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LocationEfses in the indexer for a given namespace.
func (s locationEfsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LocationEfs, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LocationEfs))
	})
	return ret, err
}

// Get retrieves the LocationEfs from the indexer for a given namespace and name.
func (s locationEfsNamespaceLister) Get(name string) (*v1alpha1.LocationEfs, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("locationefs"), name)
	}
	return obj.(*v1alpha1.LocationEfs), nil
}
