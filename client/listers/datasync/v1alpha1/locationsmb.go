/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/datasync/v1alpha1"
)

// LocationSmbLister helps list LocationSmbs.
// All objects returned here must be treated as read-only.
type LocationSmbLister interface {
	// List lists all LocationSmbs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LocationSmb, err error)
	// LocationSmbs returns an object that can list and get LocationSmbs.
	LocationSmbs(namespace string) LocationSmbNamespaceLister
	LocationSmbListerExpansion
}

// locationSmbLister implements the LocationSmbLister interface.
type locationSmbLister struct {
	indexer cache.Indexer
}

// NewLocationSmbLister returns a new LocationSmbLister.
func NewLocationSmbLister(indexer cache.Indexer) LocationSmbLister {
	return &locationSmbLister{indexer: indexer}
}

// List lists all LocationSmbs in the indexer.
func (s *locationSmbLister) List(selector labels.Selector) (ret []*v1alpha1.LocationSmb, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LocationSmb))
	})
	return ret, err
}

// LocationSmbs returns an object that can list and get LocationSmbs.
func (s *locationSmbLister) LocationSmbs(namespace string) LocationSmbNamespaceLister {
	return locationSmbNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LocationSmbNamespaceLister helps list and get LocationSmbs.
// All objects returned here must be treated as read-only.
type LocationSmbNamespaceLister interface {
	// List lists all LocationSmbs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LocationSmb, err error)
	// Get retrieves the LocationSmb from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LocationSmb, error)
	LocationSmbNamespaceListerExpansion
}

// locationSmbNamespaceLister implements the LocationSmbNamespaceLister
// interface.
type locationSmbNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LocationSmbs in the indexer for a given namespace.
func (s locationSmbNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LocationSmb, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LocationSmb))
	})
	return ret, err
}

// Get retrieves the LocationSmb from the indexer for a given namespace and name.
func (s locationSmbNamespaceLister) Get(name string) (*v1alpha1.LocationSmb, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("locationsmb"), name)
	}
	return obj.(*v1alpha1.LocationSmb), nil
}
