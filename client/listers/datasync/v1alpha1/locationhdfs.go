/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/datasync/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LocationHdfsLister helps list LocationHdfses.
// All objects returned here must be treated as read-only.
type LocationHdfsLister interface {
	// List lists all LocationHdfses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LocationHdfs, err error)
	// LocationHdfses returns an object that can list and get LocationHdfses.
	LocationHdfses(namespace string) LocationHdfsNamespaceLister
	LocationHdfsListerExpansion
}

// locationHdfsLister implements the LocationHdfsLister interface.
type locationHdfsLister struct {
	indexer cache.Indexer
}

// NewLocationHdfsLister returns a new LocationHdfsLister.
func NewLocationHdfsLister(indexer cache.Indexer) LocationHdfsLister {
	return &locationHdfsLister{indexer: indexer}
}

// List lists all LocationHdfses in the indexer.
func (s *locationHdfsLister) List(selector labels.Selector) (ret []*v1alpha1.LocationHdfs, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LocationHdfs))
	})
	return ret, err
}

// LocationHdfses returns an object that can list and get LocationHdfses.
func (s *locationHdfsLister) LocationHdfses(namespace string) LocationHdfsNamespaceLister {
	return locationHdfsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LocationHdfsNamespaceLister helps list and get LocationHdfses.
// All objects returned here must be treated as read-only.
type LocationHdfsNamespaceLister interface {
	// List lists all LocationHdfses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LocationHdfs, err error)
	// Get retrieves the LocationHdfs from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LocationHdfs, error)
	LocationHdfsNamespaceListerExpansion
}

// locationHdfsNamespaceLister implements the LocationHdfsNamespaceLister
// interface.
type locationHdfsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LocationHdfses in the indexer for a given namespace.
func (s locationHdfsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LocationHdfs, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LocationHdfs))
	})
	return ret, err
}

// Get retrieves the LocationHdfs from the indexer for a given namespace and name.
func (s locationHdfsNamespaceLister) Get(name string) (*v1alpha1.LocationHdfs, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("locationhdfs"), name)
	}
	return obj.(*v1alpha1.LocationHdfs), nil
}
