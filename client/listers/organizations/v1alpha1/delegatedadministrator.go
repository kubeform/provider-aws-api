/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/organizations/v1alpha1"
)

// DelegatedAdministratorLister helps list DelegatedAdministrators.
// All objects returned here must be treated as read-only.
type DelegatedAdministratorLister interface {
	// List lists all DelegatedAdministrators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DelegatedAdministrator, err error)
	// DelegatedAdministrators returns an object that can list and get DelegatedAdministrators.
	DelegatedAdministrators(namespace string) DelegatedAdministratorNamespaceLister
	DelegatedAdministratorListerExpansion
}

// delegatedAdministratorLister implements the DelegatedAdministratorLister interface.
type delegatedAdministratorLister struct {
	indexer cache.Indexer
}

// NewDelegatedAdministratorLister returns a new DelegatedAdministratorLister.
func NewDelegatedAdministratorLister(indexer cache.Indexer) DelegatedAdministratorLister {
	return &delegatedAdministratorLister{indexer: indexer}
}

// List lists all DelegatedAdministrators in the indexer.
func (s *delegatedAdministratorLister) List(selector labels.Selector) (ret []*v1alpha1.DelegatedAdministrator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DelegatedAdministrator))
	})
	return ret, err
}

// DelegatedAdministrators returns an object that can list and get DelegatedAdministrators.
func (s *delegatedAdministratorLister) DelegatedAdministrators(namespace string) DelegatedAdministratorNamespaceLister {
	return delegatedAdministratorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DelegatedAdministratorNamespaceLister helps list and get DelegatedAdministrators.
// All objects returned here must be treated as read-only.
type DelegatedAdministratorNamespaceLister interface {
	// List lists all DelegatedAdministrators in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DelegatedAdministrator, err error)
	// Get retrieves the DelegatedAdministrator from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DelegatedAdministrator, error)
	DelegatedAdministratorNamespaceListerExpansion
}

// delegatedAdministratorNamespaceLister implements the DelegatedAdministratorNamespaceLister
// interface.
type delegatedAdministratorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DelegatedAdministrators in the indexer for a given namespace.
func (s delegatedAdministratorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DelegatedAdministrator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DelegatedAdministrator))
	})
	return ret, err
}

// Get retrieves the DelegatedAdministrator from the indexer for a given namespace and name.
func (s delegatedAdministratorNamespaceLister) Get(name string) (*v1alpha1.DelegatedAdministrator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("delegatedadministrator"), name)
	}
	return obj.(*v1alpha1.DelegatedAdministrator), nil
}
