/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/backup/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SelectionLister helps list Selections.
// All objects returned here must be treated as read-only.
type SelectionLister interface {
	// List lists all Selections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Selection, err error)
	// Selections returns an object that can list and get Selections.
	Selections(namespace string) SelectionNamespaceLister
	SelectionListerExpansion
}

// selectionLister implements the SelectionLister interface.
type selectionLister struct {
	indexer cache.Indexer
}

// NewSelectionLister returns a new SelectionLister.
func NewSelectionLister(indexer cache.Indexer) SelectionLister {
	return &selectionLister{indexer: indexer}
}

// List lists all Selections in the indexer.
func (s *selectionLister) List(selector labels.Selector) (ret []*v1alpha1.Selection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Selection))
	})
	return ret, err
}

// Selections returns an object that can list and get Selections.
func (s *selectionLister) Selections(namespace string) SelectionNamespaceLister {
	return selectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SelectionNamespaceLister helps list and get Selections.
// All objects returned here must be treated as read-only.
type SelectionNamespaceLister interface {
	// List lists all Selections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Selection, err error)
	// Get retrieves the Selection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Selection, error)
	SelectionNamespaceListerExpansion
}

// selectionNamespaceLister implements the SelectionNamespaceLister
// interface.
type selectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Selections in the indexer for a given namespace.
func (s selectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Selection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Selection))
	})
	return ret, err
}

// Get retrieves the Selection from the indexer for a given namespace and name.
func (s selectionNamespaceLister) Get(name string) (*v1alpha1.Selection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("selection"), name)
	}
	return obj.(*v1alpha1.Selection), nil
}
