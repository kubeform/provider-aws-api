/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/backup/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReportPlanLister helps list ReportPlans.
// All objects returned here must be treated as read-only.
type ReportPlanLister interface {
	// List lists all ReportPlans in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReportPlan, err error)
	// ReportPlans returns an object that can list and get ReportPlans.
	ReportPlans(namespace string) ReportPlanNamespaceLister
	ReportPlanListerExpansion
}

// reportPlanLister implements the ReportPlanLister interface.
type reportPlanLister struct {
	indexer cache.Indexer
}

// NewReportPlanLister returns a new ReportPlanLister.
func NewReportPlanLister(indexer cache.Indexer) ReportPlanLister {
	return &reportPlanLister{indexer: indexer}
}

// List lists all ReportPlans in the indexer.
func (s *reportPlanLister) List(selector labels.Selector) (ret []*v1alpha1.ReportPlan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReportPlan))
	})
	return ret, err
}

// ReportPlans returns an object that can list and get ReportPlans.
func (s *reportPlanLister) ReportPlans(namespace string) ReportPlanNamespaceLister {
	return reportPlanNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReportPlanNamespaceLister helps list and get ReportPlans.
// All objects returned here must be treated as read-only.
type ReportPlanNamespaceLister interface {
	// List lists all ReportPlans in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReportPlan, err error)
	// Get retrieves the ReportPlan from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ReportPlan, error)
	ReportPlanNamespaceListerExpansion
}

// reportPlanNamespaceLister implements the ReportPlanNamespaceLister
// interface.
type reportPlanNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReportPlans in the indexer for a given namespace.
func (s reportPlanNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ReportPlan, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReportPlan))
	})
	return ret, err
}

// Get retrieves the ReportPlan from the indexer for a given namespace and name.
func (s reportPlanNamespaceLister) Get(name string) (*v1alpha1.ReportPlan, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("reportplan"), name)
	}
	return obj.(*v1alpha1.ReportPlan), nil
}
