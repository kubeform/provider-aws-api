/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/egress/v1alpha1"
)

// OnlyInternetGatewayLister helps list OnlyInternetGateways.
// All objects returned here must be treated as read-only.
type OnlyInternetGatewayLister interface {
	// List lists all OnlyInternetGateways in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OnlyInternetGateway, err error)
	// OnlyInternetGateways returns an object that can list and get OnlyInternetGateways.
	OnlyInternetGateways(namespace string) OnlyInternetGatewayNamespaceLister
	OnlyInternetGatewayListerExpansion
}

// onlyInternetGatewayLister implements the OnlyInternetGatewayLister interface.
type onlyInternetGatewayLister struct {
	indexer cache.Indexer
}

// NewOnlyInternetGatewayLister returns a new OnlyInternetGatewayLister.
func NewOnlyInternetGatewayLister(indexer cache.Indexer) OnlyInternetGatewayLister {
	return &onlyInternetGatewayLister{indexer: indexer}
}

// List lists all OnlyInternetGateways in the indexer.
func (s *onlyInternetGatewayLister) List(selector labels.Selector) (ret []*v1alpha1.OnlyInternetGateway, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OnlyInternetGateway))
	})
	return ret, err
}

// OnlyInternetGateways returns an object that can list and get OnlyInternetGateways.
func (s *onlyInternetGatewayLister) OnlyInternetGateways(namespace string) OnlyInternetGatewayNamespaceLister {
	return onlyInternetGatewayNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OnlyInternetGatewayNamespaceLister helps list and get OnlyInternetGateways.
// All objects returned here must be treated as read-only.
type OnlyInternetGatewayNamespaceLister interface {
	// List lists all OnlyInternetGateways in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OnlyInternetGateway, err error)
	// Get retrieves the OnlyInternetGateway from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OnlyInternetGateway, error)
	OnlyInternetGatewayNamespaceListerExpansion
}

// onlyInternetGatewayNamespaceLister implements the OnlyInternetGatewayNamespaceLister
// interface.
type onlyInternetGatewayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OnlyInternetGateways in the indexer for a given namespace.
func (s onlyInternetGatewayNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OnlyInternetGateway, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OnlyInternetGateway))
	})
	return ret, err
}

// Get retrieves the OnlyInternetGateway from the indexer for a given namespace and name.
func (s onlyInternetGatewayNamespaceLister) Get(name string) (*v1alpha1.OnlyInternetGateway, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("onlyinternetgateway"), name)
	}
	return obj.(*v1alpha1.OnlyInternetGateway), nil
}
