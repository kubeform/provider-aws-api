/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/ram/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrincipalAssociationLister helps list PrincipalAssociations.
// All objects returned here must be treated as read-only.
type PrincipalAssociationLister interface {
	// List lists all PrincipalAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrincipalAssociation, err error)
	// PrincipalAssociations returns an object that can list and get PrincipalAssociations.
	PrincipalAssociations(namespace string) PrincipalAssociationNamespaceLister
	PrincipalAssociationListerExpansion
}

// principalAssociationLister implements the PrincipalAssociationLister interface.
type principalAssociationLister struct {
	indexer cache.Indexer
}

// NewPrincipalAssociationLister returns a new PrincipalAssociationLister.
func NewPrincipalAssociationLister(indexer cache.Indexer) PrincipalAssociationLister {
	return &principalAssociationLister{indexer: indexer}
}

// List lists all PrincipalAssociations in the indexer.
func (s *principalAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.PrincipalAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrincipalAssociation))
	})
	return ret, err
}

// PrincipalAssociations returns an object that can list and get PrincipalAssociations.
func (s *principalAssociationLister) PrincipalAssociations(namespace string) PrincipalAssociationNamespaceLister {
	return principalAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrincipalAssociationNamespaceLister helps list and get PrincipalAssociations.
// All objects returned here must be treated as read-only.
type PrincipalAssociationNamespaceLister interface {
	// List lists all PrincipalAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrincipalAssociation, err error)
	// Get retrieves the PrincipalAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PrincipalAssociation, error)
	PrincipalAssociationNamespaceListerExpansion
}

// principalAssociationNamespaceLister implements the PrincipalAssociationNamespaceLister
// interface.
type principalAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrincipalAssociations in the indexer for a given namespace.
func (s principalAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrincipalAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrincipalAssociation))
	})
	return ret, err
}

// Get retrieves the PrincipalAssociation from the indexer for a given namespace and name.
func (s principalAssociationNamespaceLister) Get(name string) (*v1alpha1.PrincipalAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("principalassociation"), name)
	}
	return obj.(*v1alpha1.PrincipalAssociation), nil
}
