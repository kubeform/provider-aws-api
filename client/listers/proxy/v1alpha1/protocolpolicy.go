/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/proxy/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProtocolPolicyLister helps list ProtocolPolicies.
// All objects returned here must be treated as read-only.
type ProtocolPolicyLister interface {
	// List lists all ProtocolPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProtocolPolicy, err error)
	// ProtocolPolicies returns an object that can list and get ProtocolPolicies.
	ProtocolPolicies(namespace string) ProtocolPolicyNamespaceLister
	ProtocolPolicyListerExpansion
}

// protocolPolicyLister implements the ProtocolPolicyLister interface.
type protocolPolicyLister struct {
	indexer cache.Indexer
}

// NewProtocolPolicyLister returns a new ProtocolPolicyLister.
func NewProtocolPolicyLister(indexer cache.Indexer) ProtocolPolicyLister {
	return &protocolPolicyLister{indexer: indexer}
}

// List lists all ProtocolPolicies in the indexer.
func (s *protocolPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ProtocolPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProtocolPolicy))
	})
	return ret, err
}

// ProtocolPolicies returns an object that can list and get ProtocolPolicies.
func (s *protocolPolicyLister) ProtocolPolicies(namespace string) ProtocolPolicyNamespaceLister {
	return protocolPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProtocolPolicyNamespaceLister helps list and get ProtocolPolicies.
// All objects returned here must be treated as read-only.
type ProtocolPolicyNamespaceLister interface {
	// List lists all ProtocolPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProtocolPolicy, err error)
	// Get retrieves the ProtocolPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProtocolPolicy, error)
	ProtocolPolicyNamespaceListerExpansion
}

// protocolPolicyNamespaceLister implements the ProtocolPolicyNamespaceLister
// interface.
type protocolPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProtocolPolicies in the indexer for a given namespace.
func (s protocolPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProtocolPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProtocolPolicy))
	})
	return ret, err
}

// Get retrieves the ProtocolPolicy from the indexer for a given namespace and name.
func (s protocolPolicyNamespaceLister) Get(name string) (*v1alpha1.ProtocolPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("protocolpolicy"), name)
	}
	return obj.(*v1alpha1.ProtocolPolicy), nil
}
