/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-aws-api/apis/licensemanager/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LicenseConfigurationLister helps list LicenseConfigurations.
// All objects returned here must be treated as read-only.
type LicenseConfigurationLister interface {
	// List lists all LicenseConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LicenseConfiguration, err error)
	// LicenseConfigurations returns an object that can list and get LicenseConfigurations.
	LicenseConfigurations(namespace string) LicenseConfigurationNamespaceLister
	LicenseConfigurationListerExpansion
}

// licenseConfigurationLister implements the LicenseConfigurationLister interface.
type licenseConfigurationLister struct {
	indexer cache.Indexer
}

// NewLicenseConfigurationLister returns a new LicenseConfigurationLister.
func NewLicenseConfigurationLister(indexer cache.Indexer) LicenseConfigurationLister {
	return &licenseConfigurationLister{indexer: indexer}
}

// List lists all LicenseConfigurations in the indexer.
func (s *licenseConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.LicenseConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LicenseConfiguration))
	})
	return ret, err
}

// LicenseConfigurations returns an object that can list and get LicenseConfigurations.
func (s *licenseConfigurationLister) LicenseConfigurations(namespace string) LicenseConfigurationNamespaceLister {
	return licenseConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LicenseConfigurationNamespaceLister helps list and get LicenseConfigurations.
// All objects returned here must be treated as read-only.
type LicenseConfigurationNamespaceLister interface {
	// List lists all LicenseConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LicenseConfiguration, err error)
	// Get retrieves the LicenseConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LicenseConfiguration, error)
	LicenseConfigurationNamespaceListerExpansion
}

// licenseConfigurationNamespaceLister implements the LicenseConfigurationNamespaceLister
// interface.
type licenseConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LicenseConfigurations in the indexer for a given namespace.
func (s licenseConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LicenseConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LicenseConfiguration))
	})
	return ret, err
}

// Get retrieves the LicenseConfiguration from the indexer for a given namespace and name.
func (s licenseConfigurationNamespaceLister) Get(name string) (*v1alpha1.LicenseConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("licenseconfiguration"), name)
	}
	return obj.(*v1alpha1.LicenseConfiguration), nil
}
