/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubeform.dev/provider-aws-api/apis/networkfirewall/v1alpha1"
)

// LoggingConfigurationLister helps list LoggingConfigurations.
// All objects returned here must be treated as read-only.
type LoggingConfigurationLister interface {
	// List lists all LoggingConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LoggingConfiguration, err error)
	// LoggingConfigurations returns an object that can list and get LoggingConfigurations.
	LoggingConfigurations(namespace string) LoggingConfigurationNamespaceLister
	LoggingConfigurationListerExpansion
}

// loggingConfigurationLister implements the LoggingConfigurationLister interface.
type loggingConfigurationLister struct {
	indexer cache.Indexer
}

// NewLoggingConfigurationLister returns a new LoggingConfigurationLister.
func NewLoggingConfigurationLister(indexer cache.Indexer) LoggingConfigurationLister {
	return &loggingConfigurationLister{indexer: indexer}
}

// List lists all LoggingConfigurations in the indexer.
func (s *loggingConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.LoggingConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoggingConfiguration))
	})
	return ret, err
}

// LoggingConfigurations returns an object that can list and get LoggingConfigurations.
func (s *loggingConfigurationLister) LoggingConfigurations(namespace string) LoggingConfigurationNamespaceLister {
	return loggingConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LoggingConfigurationNamespaceLister helps list and get LoggingConfigurations.
// All objects returned here must be treated as read-only.
type LoggingConfigurationNamespaceLister interface {
	// List lists all LoggingConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LoggingConfiguration, err error)
	// Get retrieves the LoggingConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LoggingConfiguration, error)
	LoggingConfigurationNamespaceListerExpansion
}

// loggingConfigurationNamespaceLister implements the LoggingConfigurationNamespaceLister
// interface.
type loggingConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LoggingConfigurations in the indexer for a given namespace.
func (s loggingConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LoggingConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LoggingConfiguration))
	})
	return ret, err
}

// Get retrieves the LoggingConfiguration from the indexer for a given namespace and name.
func (s loggingConfigurationNamespaceLister) Get(name string) (*v1alpha1.LoggingConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("loggingconfiguration"), name)
	}
	return obj.(*v1alpha1.LoggingConfiguration), nil
}
