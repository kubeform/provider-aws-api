/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecCorsConfiguration{}).Type1()):              ApiSpecCorsConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AuthorizerSpecJwtConfiguration{}).Type1()):        AuthorizerSpecJwtConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecDomainNameConfiguration{}).Type1()): DomainNameSpecDomainNameConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecMutualTlsAuthentication{}).Type1()): DomainNameSpecMutualTlsAuthenticationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(IntegrationSpecTlsConfig{}).Type1()):              IntegrationSpecTlsConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(StageSpecAccessLogSettings{}).Type1()):            StageSpecAccessLogSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(StageSpecDefaultRouteSettings{}).Type1()):         StageSpecDefaultRouteSettingsCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecCorsConfiguration{}).Type1()):              ApiSpecCorsConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(AuthorizerSpecJwtConfiguration{}).Type1()):        AuthorizerSpecJwtConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecDomainNameConfiguration{}).Type1()): DomainNameSpecDomainNameConfigurationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecMutualTlsAuthentication{}).Type1()): DomainNameSpecMutualTlsAuthenticationCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(IntegrationSpecTlsConfig{}).Type1()):              IntegrationSpecTlsConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(StageSpecAccessLogSettings{}).Type1()):            StageSpecAccessLogSettingsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(StageSpecDefaultRouteSettings{}).Type1()):         StageSpecDefaultRouteSettingsCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ApiSpecCorsConfigurationCodec struct {
}

func (ApiSpecCorsConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ApiSpecCorsConfiguration)(ptr) == nil
}

func (ApiSpecCorsConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ApiSpecCorsConfiguration)(ptr)
	var objs []ApiSpecCorsConfiguration
	if obj != nil {
		objs = []ApiSpecCorsConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecCorsConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ApiSpecCorsConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ApiSpecCorsConfiguration)(ptr) = ApiSpecCorsConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ApiSpecCorsConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecCorsConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ApiSpecCorsConfiguration)(ptr) = objs[0]
			} else {
				*(*ApiSpecCorsConfiguration)(ptr) = ApiSpecCorsConfiguration{}
			}
		} else {
			*(*ApiSpecCorsConfiguration)(ptr) = ApiSpecCorsConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ApiSpecCorsConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ApiSpecCorsConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ApiSpecCorsConfiguration)(ptr) = obj
		} else {
			*(*ApiSpecCorsConfiguration)(ptr) = ApiSpecCorsConfiguration{}
		}
	default:
		iter.ReportError("decode ApiSpecCorsConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type AuthorizerSpecJwtConfigurationCodec struct {
}

func (AuthorizerSpecJwtConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*AuthorizerSpecJwtConfiguration)(ptr) == nil
}

func (AuthorizerSpecJwtConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*AuthorizerSpecJwtConfiguration)(ptr)
	var objs []AuthorizerSpecJwtConfiguration
	if obj != nil {
		objs = []AuthorizerSpecJwtConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AuthorizerSpecJwtConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (AuthorizerSpecJwtConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*AuthorizerSpecJwtConfiguration)(ptr) = AuthorizerSpecJwtConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []AuthorizerSpecJwtConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AuthorizerSpecJwtConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*AuthorizerSpecJwtConfiguration)(ptr) = objs[0]
			} else {
				*(*AuthorizerSpecJwtConfiguration)(ptr) = AuthorizerSpecJwtConfiguration{}
			}
		} else {
			*(*AuthorizerSpecJwtConfiguration)(ptr) = AuthorizerSpecJwtConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj AuthorizerSpecJwtConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(AuthorizerSpecJwtConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*AuthorizerSpecJwtConfiguration)(ptr) = obj
		} else {
			*(*AuthorizerSpecJwtConfiguration)(ptr) = AuthorizerSpecJwtConfiguration{}
		}
	default:
		iter.ReportError("decode AuthorizerSpecJwtConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainNameSpecDomainNameConfigurationCodec struct {
}

func (DomainNameSpecDomainNameConfigurationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainNameSpecDomainNameConfiguration)(ptr) == nil
}

func (DomainNameSpecDomainNameConfigurationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainNameSpecDomainNameConfiguration)(ptr)
	var objs []DomainNameSpecDomainNameConfiguration
	if obj != nil {
		objs = []DomainNameSpecDomainNameConfiguration{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecDomainNameConfiguration{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainNameSpecDomainNameConfigurationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainNameSpecDomainNameConfiguration)(ptr) = DomainNameSpecDomainNameConfiguration{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainNameSpecDomainNameConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecDomainNameConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainNameSpecDomainNameConfiguration)(ptr) = objs[0]
			} else {
				*(*DomainNameSpecDomainNameConfiguration)(ptr) = DomainNameSpecDomainNameConfiguration{}
			}
		} else {
			*(*DomainNameSpecDomainNameConfiguration)(ptr) = DomainNameSpecDomainNameConfiguration{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DomainNameSpecDomainNameConfiguration

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecDomainNameConfiguration{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DomainNameSpecDomainNameConfiguration)(ptr) = obj
		} else {
			*(*DomainNameSpecDomainNameConfiguration)(ptr) = DomainNameSpecDomainNameConfiguration{}
		}
	default:
		iter.ReportError("decode DomainNameSpecDomainNameConfiguration", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type DomainNameSpecMutualTlsAuthenticationCodec struct {
}

func (DomainNameSpecMutualTlsAuthenticationCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*DomainNameSpecMutualTlsAuthentication)(ptr) == nil
}

func (DomainNameSpecMutualTlsAuthenticationCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*DomainNameSpecMutualTlsAuthentication)(ptr)
	var objs []DomainNameSpecMutualTlsAuthentication
	if obj != nil {
		objs = []DomainNameSpecMutualTlsAuthentication{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecMutualTlsAuthentication{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (DomainNameSpecMutualTlsAuthenticationCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*DomainNameSpecMutualTlsAuthentication)(ptr) = DomainNameSpecMutualTlsAuthentication{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []DomainNameSpecMutualTlsAuthentication

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecMutualTlsAuthentication{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*DomainNameSpecMutualTlsAuthentication)(ptr) = objs[0]
			} else {
				*(*DomainNameSpecMutualTlsAuthentication)(ptr) = DomainNameSpecMutualTlsAuthentication{}
			}
		} else {
			*(*DomainNameSpecMutualTlsAuthentication)(ptr) = DomainNameSpecMutualTlsAuthentication{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj DomainNameSpecMutualTlsAuthentication

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(DomainNameSpecMutualTlsAuthentication{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*DomainNameSpecMutualTlsAuthentication)(ptr) = obj
		} else {
			*(*DomainNameSpecMutualTlsAuthentication)(ptr) = DomainNameSpecMutualTlsAuthentication{}
		}
	default:
		iter.ReportError("decode DomainNameSpecMutualTlsAuthentication", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type IntegrationSpecTlsConfigCodec struct {
}

func (IntegrationSpecTlsConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*IntegrationSpecTlsConfig)(ptr) == nil
}

func (IntegrationSpecTlsConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*IntegrationSpecTlsConfig)(ptr)
	var objs []IntegrationSpecTlsConfig
	if obj != nil {
		objs = []IntegrationSpecTlsConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IntegrationSpecTlsConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (IntegrationSpecTlsConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*IntegrationSpecTlsConfig)(ptr) = IntegrationSpecTlsConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []IntegrationSpecTlsConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IntegrationSpecTlsConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*IntegrationSpecTlsConfig)(ptr) = objs[0]
			} else {
				*(*IntegrationSpecTlsConfig)(ptr) = IntegrationSpecTlsConfig{}
			}
		} else {
			*(*IntegrationSpecTlsConfig)(ptr) = IntegrationSpecTlsConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj IntegrationSpecTlsConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(IntegrationSpecTlsConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*IntegrationSpecTlsConfig)(ptr) = obj
		} else {
			*(*IntegrationSpecTlsConfig)(ptr) = IntegrationSpecTlsConfig{}
		}
	default:
		iter.ReportError("decode IntegrationSpecTlsConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type StageSpecAccessLogSettingsCodec struct {
}

func (StageSpecAccessLogSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*StageSpecAccessLogSettings)(ptr) == nil
}

func (StageSpecAccessLogSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*StageSpecAccessLogSettings)(ptr)
	var objs []StageSpecAccessLogSettings
	if obj != nil {
		objs = []StageSpecAccessLogSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(StageSpecAccessLogSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (StageSpecAccessLogSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*StageSpecAccessLogSettings)(ptr) = StageSpecAccessLogSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []StageSpecAccessLogSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(StageSpecAccessLogSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*StageSpecAccessLogSettings)(ptr) = objs[0]
			} else {
				*(*StageSpecAccessLogSettings)(ptr) = StageSpecAccessLogSettings{}
			}
		} else {
			*(*StageSpecAccessLogSettings)(ptr) = StageSpecAccessLogSettings{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj StageSpecAccessLogSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(StageSpecAccessLogSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*StageSpecAccessLogSettings)(ptr) = obj
		} else {
			*(*StageSpecAccessLogSettings)(ptr) = StageSpecAccessLogSettings{}
		}
	default:
		iter.ReportError("decode StageSpecAccessLogSettings", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type StageSpecDefaultRouteSettingsCodec struct {
}

func (StageSpecDefaultRouteSettingsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*StageSpecDefaultRouteSettings)(ptr) == nil
}

func (StageSpecDefaultRouteSettingsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*StageSpecDefaultRouteSettings)(ptr)
	var objs []StageSpecDefaultRouteSettings
	if obj != nil {
		objs = []StageSpecDefaultRouteSettings{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(StageSpecDefaultRouteSettings{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (StageSpecDefaultRouteSettingsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*StageSpecDefaultRouteSettings)(ptr) = StageSpecDefaultRouteSettings{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []StageSpecDefaultRouteSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(StageSpecDefaultRouteSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*StageSpecDefaultRouteSettings)(ptr) = objs[0]
			} else {
				*(*StageSpecDefaultRouteSettings)(ptr) = StageSpecDefaultRouteSettings{}
			}
		} else {
			*(*StageSpecDefaultRouteSettings)(ptr) = StageSpecDefaultRouteSettings{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj StageSpecDefaultRouteSettings

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(StageSpecDefaultRouteSettings{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*StageSpecDefaultRouteSettings)(ptr) = obj
		} else {
			*(*StageSpecDefaultRouteSettings)(ptr) = StageSpecDefaultRouteSettings{}
		}
	default:
		iter.ReportError("decode StageSpecDefaultRouteSettings", "unexpected JSON type")
	}
}
